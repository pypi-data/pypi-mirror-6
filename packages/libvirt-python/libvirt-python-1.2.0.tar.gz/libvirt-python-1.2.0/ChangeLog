2013-11-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Improve quality of sanitytest check
    Validate that every public API method is mapped into the python
    and that every python method has a sane C API.
    
    
    
2013-11-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Skip copying manually written python for C APIs which don't exist
    If the libvirt-override-virXXXX.py file has methods which call
    C APIs that don't exist in the version of libvirt built against
    we need to skip copying their code.
    
    eg for 0.9.13 libvirt we should not copy the 'listAllDomains'
    method.
    
    The way this works is that it breaks the override file into
    individual methods by looking for ' def '. It then collects
    the contents until the next method start, whereupon it looks
    for a libvirtmod.XXXXXX API call. It checks if the XXXXX part
    is present in the XML description we have, and if not, it
    discards the entire method.
    
    
    
2013-11-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix misc RPM specfile flaws
    Fix the RPM summary line, add placeholder %changelog tag,
    make %setup quiet, add Url: tag and filter out bogus
    provides and add example programs as docs.
    
    
    
2013-11-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix code for avoiding overrides of non-existant functions
    When reading/writing a global variable from inside a method
    it must be declared as a global, otherwise a local variable
    by the same name will be used.
    
    Special case the virConnectListDomainsID method which is
    bizarrely renamed for no obvious reason.
    
    
    
2013-11-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Deal with old filenames for events/error functions
    Older libvirt has files named 'events' and 'virterror'
    rather than 'virevent' and 'virerror'. This is visible
    in the API XML files. We must look for both names to
    ensure we don't lose generation of methods with older
    versions of libvirt.
    
    
    
2013-11-27 Daniel P. Berrange  <berrange@redhat.com>
    
    Add missing binding of security model/label APIs
    The virNodeGetSecurityModel, virDomainGetSecurityLabel and
    virDomainGetSecurityLabelList methods were disabled in the
    python binding for inexplicable reasons.
    
    
    
2013-11-27 Daniel P. Berrange  <berrange@redhat.com>
    
    Avoid generating the methods in multiple classes
    The python code generator tries to figure out what class a
    method should be in by looking at the list of arguments for
    any which are object types. Unfortunately missing break
    statements meant that methods which have multiple object
    arguments (eg migrate as a virDomainPtr followed by a
    virConnectPtr) got added to multiple classes.
    
    The following incorrect methods are removed by this change
    
    virStream.download       (dup of virStorageVol.download)
    virStream.screenshot     (dup of virDomain.screenshot)
    virStream.upload         (dup of virStorageVol.upload)
    virConnect.migrate       (dup of virDomain.migrate)
    virConnect.migrate2      (dup of virDomain.migrate2)
    virConnect.migrate3      (dup of virDomain.migrate3)
    virConnect.migrateToURI3 (dup of virDomain.migrateToURI3)
    
    
    
2013-11-27 Daniel P. Berrange  <berrange@redhat.com>
    
    Make block pull event dispatcher private
    The method dispatchDomainEventBlockPullCallback which is
    used internally to dispatch block pull events to the python
    application code was missing the leading '_', to denote that
    it was private.  All other event callback helpers have a
    leading '_'. No application should have been using this so
    it is justifiable to rename it.
    
    
    
2013-11-27 Daniel P. Berrange  <berrange@redhat.com>
    
    Don't include virDomainSnapshotRef in python API
    The reference counting API is for internal use only. Attempts
    to use it from python application code will cause havoc.
    
    
    
2013-11-26 Doug Goldstein  <cardoe@cardoe.com>
    
    Call virGetLastError from mod rather than py wrapper
    All other code always calls the methods from the mod rather than using
    the python wrapper so this matches the state of all other callers.
    
    
2013-11-26 Don Dugger  <donald.d.dugger@intel.com>
    
    Return right error code for baselineCPU
    This Python interface code is returning a -1 on errors for the
    `baselineCPU' API.  Since this API is supposed to return a pointer
    the error return value should really be VIR_PY_NONE.
    
    
    
2013-11-26 Martin Kletzander  <mkletzan@redhat.com>
    
    Make setup.py executable
    
    
2013-11-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Update README file contents and add HACKING file
    The previous README file from the python code is more like a
    HACKING file. Rename it and update the content. Then add a
    basic README file
    
    
    
2013-11-25 Eric Blake  <eblake@redhat.com>
    
    maint: next release is 1.2.0
    No other hits for:
    git grep '1\.1\.5'
    
    * libvirt-utils.h: Fix comment.
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Ensure API overrides only used if API exists
    Entries in the -overrides.xml files should only be recorded
    if the API also exists in the main API XML file.
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Relax min required libvirt to version 0.9.11
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virConnectGetCPUModelNames API appeared in 1.1.3
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED appeared in 1.1.1
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainCreateXMLWithFiles and virDomainCreateWithFiles APIs appeared in 1.1.1
    virDomainCreateXMLWithFiles() and virDomainCreateWithFiles() were not
    added to libvirt until 1.1.1
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainMigrate3 and virDomainMigrateToURI3 appeared in 1.1.0
    The functions virDomainMigrate3 and virDomainMigrateToURI3 were not
    added to libvirt until v1.1.0.
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virTypedParams* API appeared in 1.0.2 and used in 1.1.0
    When building against versions of libvirt prior to 1.0.2, we can not
    provide wrappers for virTypedParams* APIs. In addition we don't need
    to have the helper APIs until 1.1.0 when the first API we wrap starts
    to use them.
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainMigrateGetCompressionCache API appeared in 1.0.3
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainGetJobStats API appeared in 1.0.3
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virNodeGetCPUMap API appeared in 1.0.0
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK appeared in 1.0.0
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virStoragePoolListAllVolumes API appeared in 0.10.2
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virNode{Get,Set}MemoryParameters API appeared in 0.10.2
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virConnectListAll* APIs appeared in 0.10.2
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    virDomainQemuAgentCommand appeared in 0.10.0
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainPinEmulator and virDomainGetEmulatorPinInfo APIs appeared in 0.10.0
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    VIR_DOMAIN_EVENT_ID_BALLOON_CHANGED appeared in 0.10.0
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virConnect{Unr,R}egisterCloseCallback API appeared in 0.10.0
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainSnapshotListAllChildren API appeared in 0.9.13
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virConnectListAllDomains API appeared in 0.9.13
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    virDomainListAllSnapshots API appeared in 0.9.13
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    Don't build LXC module when building less than 1.0.2
    The functions that the LXC module wraps did not appear until 1.0.2 so we
    can't build the module unless we're building against 1.0.2 or newer.
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    Create array of modules to be built
    Create an array of modules to be built to allow for flexibility to
    enable or disable some modules in the future and allow for additional
    modules to be added easily
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    Break generator.py to be called per module
    Since we don't always want to build all the modules, and there might be
    more modules added in the future but we want to retain backwards
    compatibility with older libvirts, change generator.py to be called once
    per module instead of with all modules at once.
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Setup distutils build system
    Create a setup.py for building libvirt python code and add
    supporting files
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Add execute permission for sanitytest.py
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Add build/ to python module path for sanitytest.py
    The generated libvirt.py modules will be in the build/
    directory, so santitytest.py must use that directory.
    
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    Import some virTypedParams* APIs from libvirt
    virTypedParamsClear() and virTypedParamsFree() were introduced in
    libvirt 1.0.2. In an effort to keep the code clean bring these two
    functions to libvirt-python if we're building against a version of
    libvirt that's older than 1.0.2
    
    
2013-11-22 Doug Goldstein  <cardoe@cardoe.com>
    
    Import LIBVIR_CHECK_VERSION macro from libvirt
    Add LIBVIR_CHECK_VERSION from libvirt upstream so that we can check the
    version of the library we are compiling against and support a range of
    libvirt versions. The macro was added to libvirt in 1.2.0 so we must
    provide it if its not defined.
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import VIR_FORCE_CLOSE macro from libvirt
    Import the macro for safely closing file descriptors
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Remove use of virStrcpyStatic
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import VIR_ALLOC / VIR_ALLOC_N / VIR_REALLOC_N functions
    Import the libvirt memory allocation functions, stripping the OOM
    testing and error reporting pieces.
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import code annotation macros from libvirt
    Import ATTRIBUTE_RETURN_CHECK, ATTRIBUTE_UNUSED &
    ATTRIBUTE_NONNULL macros
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import gnulib's ignore_value macro
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import gnulib's xalloc_oversized macro
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Add decl of MIN macro
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Import STREQ macro from libvirt
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Update header file includes
    We're no longer using automake, so <config.h> files are not
    required. Also remove of all libvirt internal util header
    files. Reference generated header files in build/ subdir.
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Update generator for new code layout
    Change the generator.py to
    
    - Take XML API file names on command line
    - Generate data in build/ directory instead of cwd
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Remove obsolete Makefile.am
    We are no longer using automake, so Makefile.am is obsolete
    
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Move python example programs into python/examples/ subdirectory
    
    
2013-11-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Mostly revert "python: remove virConnectGetCPUModelNames from globals"
    This reverts commit 6b90d7428d72e92db292a9228c44701bfd5003c9.
    
    The original problem was that libvirt_virConnectGetCPUModelNames
    was listed twice in the exports table, once automatically from
    the generator and once from the manual override. We merely needed
    to list it in the skip_impl list, and not delete the manually
    written code entirely.
    
    
2013-11-21 Doug Goldstein  <cardoe@cardoe.com>
    
    python: remove virConnectGetCPUModelNames from globals
    Commit de51dc9c9aed0e615c8b301cccb89f4859324eb0 primarily added
    virConnectGetCPUModelNames as libvirt.getCPUModelNames(conn, arch)
    instead of libvirt.virConnect.getCPUModelNames(arch) so revert the code
    that does the former while leaving the code that does the later.
    
    This is the rest of the patch that was ACK'd by Dan but I committed only
    the partial patch in 6a8b8ae.
    
    
2013-11-21 Doug Goldstein  <cardoe@cardoe.com>
    
    python: remove virConnectGetCPUModelNames from globals
    Commit de51dc9c9aed0e615c8b301cccb89f4859324eb0 primarily added
    virConnectGetCPUModelNames as libvirt.getCPUModelNames(conn, arch)
    instead of libvirt.virConnect.getCPUModelNames(arch) so revert the code
    that does the former while leaving the code that does the later.
    
    
2013-11-20 Eric Blake  <eblake@redhat.com>
    
    maint: fix comma style issues: python
    Most of our code base uses space after comma but not before;
    fix the remaining uses before adding a syntax check.
    
    * python/libvirt-override.c: Consistently use commas.
    
    
    
2013-11-19 Doug Goldstein  <cardoe@cardoe.com>
    
    Add missing break to switch-case block
    The case label for VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED did not have its
    own break statement but relied on falling through which we probably
    don't want.
    
    
2013-10-22 Marian Neagul  <marian@info.uvt.ro>
    
    python: Fix Create*WithFiles filefd passing
    Commit d76227be added functions virDomainCreateWithFiles and
    virDomainCreateXMLWithFiles, but there was a little piece missing in
    python bindings.  This patch fixes proper passing of file descriptors
    in the overwrites of these functions.
    
    
2013-10-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Don't link virt-login-shell against libvirt.so (CVE-2013-4400)
    The libvirt.so library has far too many library deps to allow
    linking against it from setuid programs. Those libraries can
    do stuff in __attribute__((constructor) functions which is
    not setuid safe.
    
    The virt-login-shell needs to link directly against individual
    files that it uses, with all library deps turned off except
    for libxml2 and libselinux.
    
    Create a libvirt-setuid-rpc-client.la library which is linked
    to by virt-login-shell. A config-post.h file allows this library
    to disable all external deps except libselinux and libxml2.
    
    
    
2013-10-14 Eric Blake  <eblake@redhat.com>
    
    maint: avoid 'const fooPtr' in python bindings
    'const fooPtr' is the same as 'foo * const' (the pointer won't
    change, but it's contents can).  But in general, if an interface
    is trying to be const-correct, it should be using 'const foo *'
    (the pointer is to data that can't be changed).
    
    Fix up offenders in the python bindings.
    
    * python/generator.py (py_types): Drop useless conversions.
    * python/libvirt-override.c (getPyVirTypedParameter)
    (setPyVirTypedParameter): Use intended type.
    
    
    
2013-09-30 Michal Privoznik  <mprivozn@redhat.com>
    
    python: Document virNodeGetInfo bug
    The memory size in virNodeGetInfo python API binding is reported in MiB
    instead of KiB (like we have in C struct). However, there already might
    be applications out there relying on this inconsistence so we can't
    simply fix it. Document this sad fact as known bug.
    
    
2013-09-23 Giuseppe Scrivano  <gscrivan@redhat.com>
    
    python: add bindings for virConnectGetCPUModelNames
    
    
2013-09-23 Giuseppe Scrivano  <gscrivan@redhat.com>
    
    libvirt: add new public API virConnectGetCPUModelNames
    The new function virConnectGetCPUModelNames allows to retrieve the list
    of CPU models known by the hypervisor for a specific architecture.
    
    
    
2013-09-20 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix potential use of uninitialized value in virDomainGetVcpuPinInfo
    The virDomainGetVcpuPinInfo python wrapper had a potential use of
    uninitialized values
    
    
    
2013-09-10 Oskari Saarenmaa  <os@ohmu.fi>
    
    docs, comments: minor typo fixes
    
    
2013-09-04 Eric Blake  <eblake@redhat.com>
    
    build: enforce makefile conditional style
    Automake has builtin support to prevent botched conditional nesting,
    but only if you use:
    if FOO
    else !FOO
    endif !FOO
    
    An example error message when using the wrong name:
    
    daemon/Makefile.am:378: error: else reminder (LIBVIRT_INIT_SCRIPT_SYSTEMD_TRUE) incompatible with current conditional: LIBVIRT_INIT_SCRIPT_SYSTEMD_FALSE
    daemon/Makefile.am:381: error: endif reminder (LIBVIRT_INIT_SCRIPT_SYSTEMD_TRUE) incompatible with current conditional: LIBVIRT_INIT_SCRIPT_SYSTEMD_FALSE
    
    As our makefiles tend to have quite a bit of nested conditionals,
    it's better to take advantage of the benefits of the build system
    double-checking that our conditionals are well-nested, but that
    requires a syntax check to enforce our usage style.
    
    Alas, unlike C preprocessor and spec files, we can't use indentation
    to make it easier to see how deeply nesting goes.
    
    * cfg.mk (sc_makefile_conditionals): New rule.
    * daemon/Makefile.am: Enforce the style.
    * gnulib/tests/Makefile.am: Likewise.
    * python/Makefile.am: Likewise.
    * src/Makefile.am: Likewise.
    * tests/Makefile.am: Likewise.
    * tools/Makefile.am: Likewise.
    
    
    
2013-09-03 Ján Tomko  <jtomko@redhat.com>
    
    Fix leaks in python bindings
    https://bugzilla.redhat.com/show_bug.cgi?id=1003828
    
    
2013-08-29 Guan Qiang  <hzguanqiang@corp.netease.com>
    
    python: Fix a PyList usage mistake
    Fix PyList usage mistake in Function libvirt_lxc_virDomainLxcOpenNamespace.
    
    https://bugzilla.redhat.com/show_bug.cgi?id=1002383
    
    
    
2013-08-23 Claudio Bley  <cbley@av-test.de>
    
    python: simplify complicated conditional assignment
    
    
2013-08-23 Claudio Bley  <cbley@av-test.de>
    
    Test for object identity when checking for None in Python
    Consistently use "is" or "is not" to compare variables to None,
    because doing so is preferrable, as per PEP 8
    (http://www.python.org/dev/peps/pep-0008/#programming-recommendations):
    
    > Comparisons to singletons like None should always be done with is or
    > is not, never the equality operators.
    
    
2013-08-22 Guido Günther  <agx@sigxcpu.org>
    
    python: Use RELRO_LDFLAGS and NO_INDIRECT_LDFLAGS
    A readonly GOT and detecting indirect linkage is useful here too.
    
    
2013-07-30 Daniel P. Berrange  <berrange@redhat.com>
    
    Delete obsolete / unused python test files
    The python/tests directory contains a number of so called
    "tests" for the python API. These are all hardcoded to
    look for Xen and cannot be run in any automated fashion,
    and no one is ever manually running them. Given that they
    don't meaningully contribute to the test coverage, delete
    them.
    
    For some reason these tests were also copied into the
    filesystem as part of 'make install'. The change to the
    RPM in commit 3347a4203278ec93d7b0ceb88b5ed10e4f14765c
    caused a build failure, since it removed the code which
    deleted these installed tests.
    
    
    
2013-07-29 Cole Robinson  <crobinso@redhat.com>
    
    python: Drop TODO
    File hasn't been really touched for 7 years. And with recent rawhide
    changes it contributed to an RPM build failure. Let's drop it.
    
    This also removes installation of a libvirt-python doc dir, so drop
    handling of it from the RPM spec.
    
    
2013-07-19 Eric Blake  <eblake@redhat.com>
    
    maint: split long lines in Makefiles
    Makefiles are another easy file to enforce line limits.
    
    Mostly straightforward; interesting tricks worth noting:
    src/Makefile.am: $(confdir) was already defined, use it in more places
    tests/Makefile.am: path_add and VG required some interesting compression
    
    * cfg.mk (sc_prohibit_long_lines): Add another test.
    * Makefile.am: Fix offenders.
    * daemon/Makefile.am: Likewise.
    * docs/Makefile.am: Likewise.
    * python/Makefile.am: Likewise.
    * src/Makefile.am: Likewise.
    * tests/Makefile.am: Likewise.
    
    
    
2013-07-18 Jiri Denemark  <jdenemar@redhat.com>
    
    Add VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED event
    
    
2013-07-18 Daniel P. Berrange  <berrange@redhat.com>
    
    Introduce new domain create APIs to pass pre-opened FDs to LXC
    With container based virt, it is useful to be able to pass
    pre-opened file descriptors to the container init process.
    This allows for containers to be auto-activated from incoming
    socket connections, passing the active socket into the container.
    
    To do this, introduce a pair of new APIs, virDomainCreateXMLWithFiles
    and virDomainCreateWithFiles, which accept an array of file
    descriptors. For the LXC driver, UNIX file descriptor passing
    will be used to send them to libvirtd, which will them pass
    them down to libvirt_lxc, which will then pass them to the container
    init process.
    
    This will only be implemented for LXC right now, but the design
    is generic enough it could work with other hypervisors, hence
    I suggest adding this to libvirt.so, rather than libvirt-lxc.so
    
    
    
2013-07-15 Guannan Ren  <gren@redhat.com>
    
    python: return dictionary without value in case of no blockjob
    Currently, when there is no blockjob, dom.blockJobInfo('vda')
    still reports error because it doesn't distinguish return value 0 from -1.
    libvirt.libvirtError: virDomainGetBlockJobInfo() failed
    
    virDomainGetBlockJobInfo() API return value:
    -1 in case of failure, 0 when nothing found, 1 found.
    
    And use PyDict_SetItemString instead of PyDict_SetItem when key is
    of string type. PyDict_SetItemString increments key/value reference
    count, so call Py_DECREF() for value. For key, we don't need to
    do this, because PyDict_SetItemString will handle it internally.
    
    
2013-07-10 Daniel P. Berrange  <berrange@redhat.com>
    
    Convert 'int i' to 'size_t i' in python/ files
    Convert the type of loop iterators named 'i', 'j', k',
    'ii', 'jj', 'kk', to be 'size_t' instead of 'int' or
    'unsigned int', also santizing 'ii', 'jj', 'kk' to use
    the normal 'i', 'j', 'k' naming
    
    
    
2013-07-10 Michal Privoznik  <mprivozn@redhat.com>
    
    viralloc: Report OOM error on failure
    Similarly to VIR_STRDUP, we want the OOM error to be reported in
    VIR_ALLOC and friends.
    
    
2013-06-24 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Add bindings for extensible migration APIs
    The patch implements wrappers for virDomainMigrate3 and
    virDomainMigrateToURI3.
    
    
2013-06-24 Jiri Denemark  <jdenemar@redhat.com>
    
    Extensible migration APIs
    This patch introduces two new APIs virDomainMigrate3 and
    virDomainMigrateToURI3 that may be used in place of their older
    variants. These new APIs take optional migration parameters (such as
    bandwidth, domain XML, ...) in an array of virTypedParameters, which
    makes adding new parameters easier as there's no need to introduce new
    APIs whenever a new migration parameter needs to be added. Both APIs are
    backward compatible and will automatically use older migration calls in
    case the new calls are not supported as long as the typed parameters
    array does not contain any parameter which was not supported by the
    older calls.
    
    
2013-05-28 Eric Blake  <eblake@redhat.com>
    
    syntax: prefer space after semicolon in for loop
    I noticed several unusual spacings in for loops, and decided to
    fix them up.  See the next commit for the syntax check that found
    all of these.
    
    * examples/domsuspend/suspend.c (main): Fix spacing.
    * python/libvirt-override.c: Likewise.
    * src/conf/interface_conf.c: Likewise.
    * src/security/virt-aa-helper.c: Likewise.
    * src/util/virconf.c: Likewise.
    * src/util/virhook.c: Likewise.
    * src/util/virlog.c: Likewise.
    * src/util/virsocketaddr.c: Likewise.
    * src/util/virsysinfo.c: Likewise.
    * src/util/viruuid.c: Likewise.
    * src/vbox/vbox_tmpl.c: Likewise.
    * src/xen/xen_hypervisor.c: Likewise.
    * tools/virsh-domain-monitor.c (vshDomainStateToString): Drop
    default case, to let compiler check us.
    * tools/virsh-domain.c (vshDomainVcpuStateToString): Likewise.
    
    
    
2013-05-21 Osier Yang  <jyang@redhat.com>
    
    python: Remove the whitespace before ";"
    
    
2013-05-20 Eric Blake  <eblake@redhat.com>
    
    maint: use LGPL correctly
    Several files called out COPYING or COPYING.LIB instead of using
    the normal boilerplate.  It's especially important that we don't
    call out COPYING from an LGPL file, since COPYING is traditionally
    used for the GPL.  A few files were lacking copyright altogether.
    
    * src/rpc/gendispatch.pl: Add missing copyright.
    * Makefile.nonreentrant: Likewise.
    * src/check-symfile.pl: Likewise.
    * src/check-symsorting.pl: Likewise.
    * src/driver.h: Likewise.
    * src/internal.h: Likewise.
    * tools/libvirt-guests.sh.in: Likewise.
    * tools/virt-pki-validate.in: Mention copyright in comment, not just code.
    * tools/virt-sanlock-cleanup.in: Likewise.
    * src/rpc/genprotocol.pl: Spell out license terms.
    * src/xen/xend_internal.h: Likewise.
    * src/xen/xend_internal.c: Likewise.
    * Makefile.am: Likewise.
    * daemon/Makefile.am: Likewise.
    * docs/Makefile.am: Likewise.
    * docs/schemas/Makefile.am: Likewise.
    * examples/apparmor/Makefile.am: Likewise.
    * examples/domain-events/events-c/Makefile.am: Likewise.
    * examples/dominfo/Makefile.am: Likewise.
    * examples/domsuspend/Makefile.am: Likewise.
    * examples/hellolibvirt/Makefile.am: Likewise.
    * examples/openauth/Makefile.am: Likewise.
    * examples/python/Makefile.am: Likewise.
    * examples/systemtap/Makefile.am: Likewise.
    * examples/xml/nwfilter/Makefile.am: Likewise.
    * gnulib/lib/Makefile.am: Likewise.
    * gnulib/tests/Makefile.am: Likewise.
    * include/Makefile.am: Likewise.
    * include/libvirt/Makefile.am: Likewise.
    * python/Makefile.am: Likewise.
    * python/tests/Makefile.am: Likewise.
    * src/Makefile.am: Likewise.
    * tests/Makefile.am: Likewise.
    * tools/Makefile.am: Likewise.
    * configure.ac: Likewise.
    
    
    
2013-05-09 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix build of python bindings on Python 2.4
    The PyDict_Next method on Python <= 2.4 used 'int' instead
    of "Py_ssize_t" for the 'pos' parameter
    
    
    
2013-05-06 Eric Blake  <eblake@redhat.com>
    
    build: clean up stray files found by 'make distcheck'
    'make distcheck' complained:
    
    ERROR: files left in build directory after distclean:
    ./python/libvirt.pyc
    ./tests/commandhelper.log
    
    Problems introduced in commits f015495 and 25ea8e4 (both v1.0.3).
    
    * tests/commandtest.c (test21): Check (and clean) log file.
    * tests/commanddata/test21.log: New file.
    * python/Makefile.am (CLEANFILES): Clean up compiled python files.
    
    
    
2013-05-02 Eric Blake  <eblake@redhat.com>
    
    build: always include sanitytest in tarball
    The libvirt 1.0.5 tarball is missing a file which renders 'make
    check' broken; first reported on list by Guido Günther.
    
    * python/Makefile.am (EXTRA_DIST): Hoist sanitytest.py out of
    HAVE_PYTHON conditional.
    
    
    
2013-05-02 Michal Privoznik  <mprivozn@redhat.com>
    
    virutil: Move string related functions to virstring.c
    The source code base needs to be adapted as well. Some files
    include virutil.h just for the string related functions (here,
    the include is substituted to match the new file), some include
    virutil.h without any need (here, the include is removed), and
    some require both.
    
    
2013-04-19 Eric Blake  <eblake@redhat.com>
    
    docs: fix usage of 'onto'
    http://www.uhv.edu/ac/newsletters/writing/grammartip2009.07.01.htm
    (and several other sites) give hints that 'onto' is best used if
    you can also add 'up' just before it and still make sense. In many
    cases in the code base, we really want the two-word form, or even
    a simplification to just 'on' or 'to'.
    
    * docs/hacking.html.in: Use correct 'on to'.
    * python/libvirt-override.c: Likewise.
    * src/lxc/lxc_controller.c: Likewise.
    * src/util/virpci.c: Likewise.
    * daemon/THREADS.txt: Use simpler 'on'.
    * docs/formatdomain.html.in: Better usage.
    * docs/internals/rpc.html.in: Likewise.
    * src/conf/domain_event.c: Likewise.
    * src/rpc/virnetclient.c: Likewise.
    * tests/qemumonitortestutils.c: Likewise.
    * HACKING: Regenerate.
    
    
    
2013-04-18 Osier Yang  <jyang@redhat.com>
    
    syntax-check: Only allows to include public headers in external tools
    With this patch, include public headers in "" form is only allowed
    for "internal.h". And only the external tools (examples|tools|python
    |include/libvirt) can include the public headers in <> form.
    
    
2013-03-26 Guannan Ren  <gren@redhat.com>
    
    python: set default value to optional arguments
    When prefixing with string (optional) or optional in the description
    of arguments to libvirt C APIs, in python, these arguments will be
    set as optional arugments, for example:
    
    * virDomainSaveFlags:
    * @domain: a domain object
    * @to: path for the output file
    * @dxml: (optional) XML config for adjusting guest xml used on restore
    * @flags: bitwise-OR of virDomainSaveRestoreFlags
    
    the corresponding python APIs is
    restoreFlags(self, frm, dxml=None, flags=0)
    
    The following python APIs are changed to:
    blockCommit(self, disk, base, top, bandwidth=0, flags=0)
    blockPull(self, disk, bandwidth=0, flags=0)
    blockRebase(self, disk, base, bandwidth=0, flags=0)
    migrate(self, dconn, flags=0, dname=None, uri=None, bandwidth=0)
    migrate2(self, dconn, dxml=None, flags=0, dname=None, uri=None, bandwidth=0)
    migrateToURI(self, duri, flags=0, dname=None, bandwidth=0)
    migrateToURI2(self, dconnuri=None, miguri=None, dxml=None, flags=0, \
    dname=None, bandwidth=0)
    saveFlags(self, to, dxml=None, flags=0)
    migrate(self, domain, flags=0, dname=None, uri=None, bandwidth=0)
    migrate2(self, domain, dxml=None, flags=0, dname=None, uri=None, bandwidth=0)
    restoreFlags(self, frm, dxml=None, flags=0)
    
    
2013-03-22 Guannan Ren  <gren@redhat.com>
    
    python:remove semicolon in python code
    This breaked "make syntax-check" testing
    
    Pushed under trivial rule
    
    
2013-03-22 Guannan Ren  <gren@redhat.com>
    
    make: regenerate bindings when <classname>.py changes
    
    
2013-03-22 Guannan Ren  <gren@redhat.com>
    
    python: treat flags as default argument with value 0
    The following four functions have not changed because default arguments
    have to come after positional arguments. Changing them will break the
    the binding APIs.
    
    migrate(self, dconn, flags, dname, uri, bandwidth):
    migrate2(self, dconn, dxml, flags, dname, uri, bandwidth):
    migrateToURI(self, duri, flags, dname, bandwidth):
    migrateToURI2(self, dconnuri, miguri, dxml, flags, dname, bandwidth):
    
    
2013-03-21 Peter Krempa  <pkrempa@redhat.com>
    
    python: Fix emulatorpin API bindings
    The addition of emulator pinning APIs didn't think of doing the right
    job with python APIs for them. The default generator produced unusable
    code for this.
    
    This patch switches to proper code as in the case of domain Vcpu pining.
    This change can be classified as a python API-breaker but in the state
    the code was before I doubt anyone was able to use it successfully.
    
    
2013-03-21 Guannan Ren  <gren@redhat.com>
    
    python: fix bindings that don't raise an exception
    For example:
    >>> dom.memoryStats()
    libvir: QEMU Driver error : Requested operation is not valid:\
    domain is not running
    
    There are six such python API functions like so.
    The root reason is that generator.py script checks the type of return
    value of a python stub function defined in libvirt-api.xml or
    libvirt-override-api.xml to see whether to add the raise clause or not
    in python wrapper code in libvirt.py.
    
    The type of return value is supposed to be C types.
    For those stub functions which return python non-integer data type like
    string, list, tuple, dictionary, the existing type in functions varies
    from each other which leads problem like this.
    
    Currently, in generator.py, it maintains a buggy whitelist for stub functions
    returning a list type. I think it is easy to forget adding new function name
    in the whitelist.
    
    This patch makes the value of type consistent with C type "char *"
    in libvirt-override-api.xml. For python, any of types could be printed
    as string, so I choose "char *" in this case. And the comment in xml
    could explain it when adding new function definition.
    
    <function name='virNodeGetCPUStats' file='python'>
    ...
    -      <return type='virNodeCPUStats' info='...'/>
    +      <return type='char *' info='...'/>
    ...
    </function>
    
    
2013-03-13 Daniel P. Berrange  <berrange@redhat.com>
    
    Apply security label when entering LXC namespaces
    Add a new virDomainLxcEnterSecurityLabel() function as a
    counterpart to virDomainLxcEnterNamespaces(), which can
    change the current calling process to have a new security
    context. This call runs client side, not in libvirtd
    so we can't use the security driver infrastructure.
    
    When entering a namespace, the process spawned from virsh
    will default to running with the security label of virsh.
    The actual desired behaviour is to run with the security
    label of the container most of the time. So this changes
    virsh lxc-enter-namespace command to invoke the
    virDomainLxcEnterSecurityLabel method.
    
    The current behaviour is:
    
    LABEL                             PID TTY          TIME CMD
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 1 pts/0 00:00:00 systemd
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 3 pts/1 00:00:00 sh
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 24 ? 00:00:00 systemd-journal
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 29 ? 00:00:00 dhclient
    staff_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 47 ? 00:00:00 ps
    
    Note the ps command is running as unconfined_t,  After this patch,
    
    The new behaviour is this:
    
    virsh -c lxc:/// lxc-enter-namespace dan -- /bin/ps -eZ
    LABEL                             PID TTY          TIME CMD
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 1 pts/0 00:00:00 systemd
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 3 pts/1 00:00:00 sh
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 24 ? 00:00:00 systemd-journal
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 32 ? 00:00:00 dhclient
    system_u:system_r:svirt_lxc_net_t:s0:c0.c1023 38 ? 00:00:00 ps
    
    The '--noseclabel' flag can be used to skip security labelling.
    
    
    
2013-03-01 Guannan Ren  <gren@redhat.com>
    
    python: fix fd leak in generator.py
    
    
2013-03-01 Guannan Ren  <gren@redhat.com>
    
    python: fix typoes and repeated global vars references
    
    
2013-02-22 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Implement virDomainMigrateGetCompressionCache wrapper
    
    
2013-02-22 Jiri Denemark  <jdenemar@redhat.com>
    
    Introduce virDomainMigrate*CompressionCache APIs
    Introduce virDomainMigrateGetCompressionCache and
    virDomainMigrateSetCompressionCache APIs.
    
    
2013-02-22 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Implement virDomainGetJobStats wrapper
    
    
2013-02-22 Jiri Denemark  <jdenemar@redhat.com>
    
    Introduce virDomainGetJobStats API
    This is an extensible version of virDomainGetJobInfo.
    
    
2013-02-11 Guido Günther  <agx@sigxcpu.org>
    
    Check if classes are derived from object
    This makes sure we don't regress to old style classes
    
    
2013-02-07 Guido Günther  <agx@sigxcpu.org>
    
    Remove more trailing semicolons in Python files
    
    
2013-02-07 Guido Günther  <agx@sigxcpu.org>
    
    Cosmetics: Remove semicolons
    It's Python, not C
    
    
2013-02-05 Jiri Denemark  <jdenemar@redhat.com>
    
    sanitytest.py: Do not rely on system libvirt
    When running sanitytest.py we should not rely on libvirt library
    installed on the system. And since we generate a nice wrapper called
    "run" that sets both PYTHON_PATH and LD_LIBRARY_PATH, we should just use
    it rather than trying to duplicate it in the Makefile.
    
    
2013-02-05 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix missing error constants in libvirt python module
    The previous change to the generator, changed too much - only
    the functions are in 'virerror.c', the constants remained in
    'virerror.h' which could not be renamed for API compat reasons.
    
    Add a test case to sanity check the generated python bindings
    
    
    
2013-01-31 Serge Hallyn  <serge.hallyn@canonical.com>
    
    complete virterror->virerror name change
    Without these two string changes in generator.py, the
    virGetLastError wrapper does not get created in
    /usr/share/pyshared/libvirt.py.  Noticed when running
    tests with virt-install.
    
    
    
2013-01-24 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Fix bindings for virDomainSnapshotGet{Domain,Connect}
    https://bugzilla.redhat.com/show_bug.cgi?id=895882
    
    virDomainSnapshot.getDomain() and virDomainSnapshot.getConnect()
    wrappers around virDomainSnapshotGet{Domain,Connect} were not supposed
    to be ever implemented. The class should contain proper domain() and
    connect() accessors that fetch python objects stored internally within
    the class. While domain() was already provided, connect() was missing.
    
    This patch adds connect() method to virDomainSnapshot class and
    reimplements getDomain() and getConnect() methods as aliases to domain()
    and connect() for backward compatibility.
    
    
2013-01-24 Daniel P. Berrange  <berrange@redhat.com>
    
    Make python objects inherit from 'object' base class
    As of python >= 2.2, it is recommended that all objects inherit
    from the 'object' base class. We already require python >= 2.3
    for libvirt for thread macro support, so we should follow this
    best practice.
    
    See also
    
    http://stackoverflow.com/questions/4015417/python-class-inherits-object
    
    
    
2013-01-18 Jiri Denemark  <jdenemar@redhat.com>
    
    Introduce virTypedParamsClear public API
    The function is just a renamed public version of former
    virTypedParameterArrayClear.
    
    
2013-01-18 Jiri Denemark  <jdenemar@redhat.com>
    
    Add virTypedParams* APIs
    Working with virTypedParameters in clients written in C is ugly and
    requires all clients to duplicate the same code. This set of APIs makes
    this code for manipulating with virTypedParameters integral part of
    libvirt so that all clients may benefit from it.
    
    
2013-01-17 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Avoid freeing uninitialized new_params pointer
    
    
2013-01-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix build due to previous LXC patch
    Mark virDomainLxcEnterNamespace as skipped in python binding
    and remove reference to lxcDomainOpenNamespace which doesn't
    arrive until a later patch
    
    
2013-01-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Introduce an LXC specific public API & library
    This patch introduces support for LXC specific public APIs. In
    common with what was done for QEMU, this creates a libvirt_lxc.so
    library and libvirt/libvirt-lxc.h header file.
    
    The actual APIs are
    
    int virDomainLxcOpenNamespace(virDomainPtr domain,
    int **fdlist,
    unsigned int flags);
    
    int virDomainLxcEnterNamespace(virDomainPtr domain,
    unsigned int nfdlist,
    int *fdlist,
    unsigned int *noldfdlist,
    int **oldfdlist,
    unsigned int flags);
    
    which provide a way to use the setns() system call to move the
    calling process into the container's namespace. It is not
    practical to write in a generically applicable manner. The
    nearest that we could get to such an API would be an API which
    allows to pass a command + argv to be executed inside a
    container. Even if we had such a generic API, this LXC specific
    API is still useful, because it allows the caller to maintain
    the current process context, in particular any I/O streams they
    have open.
    
    NB the virDomainLxcEnterNamespace() API is special in that it
    runs client side, so does not involve the internal driver API.
    
    
    
2012-12-28 Michal Privoznik  <mprivozn@redhat.com>
    
    python: Adapt to virevent rename
    With our recent renames under src/util/* we forgot to adapt
    python wrapper code generator. This results in some methods being
    not exposed:
    
    $ python examples/domain-events/events-python/event-test.py
    Using uri:qemu:///system
    Traceback (most recent call last):
    File "examples/domain-events/events-python/event-test.py", line 585, in <module>
    main()
    File "examples/domain-events/events-python/event-test.py", line 543, in main
    virEventLoopPureStart()
    File "examples/domain-events/events-python/event-test.py", line 416, in virEventLoopPureStart
    virEventLoopPureRegister()
    File "examples/domain-events/events-python/event-test.py", line 397, in virEventLoopPureRegister
    libvirt.virEventRegisterImpl(virEventAddHandleImpl,
    AttributeError: 'module' object has no attribute 'virEventRegisterImpl'
    
    
2012-12-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Rename util.{c,h} to virutil.{c,h}
    
    
2012-12-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Rename memory.{c,h} to viralloc.{c,h}
    
    
2012-12-04 Osier Yang  <jyang@redhat.com>
    
    Fix the indention
    Introduced by commit 1465876a, pushed under build-breaker &&
    trivial rule.
    
    
2012-12-04 Daniel P. Berrange  <berrange@redhat.com>
    
    Bind connection close callback APIs to python binding
    Add code in the python binding to cope with the new APIs
    virConnectRegisterCloseCallback and
    virConnectUnregisterCloseCallback. Also demonstrate their
    use in the python domain events demo
    
    
    
2012-11-15 Viktor Mihajlovski  <mihajlov@linux.vnet.ibm.com>
    
    python: Use virNodeGetCPUMap where possible
    Modified the places where virNodeGetInfo was used for the purpose
    of obtaining the maximum node CPU number. Transparently falling
    back to virNodeGetInfo in case of failure.
    Wrote a utility function getPyNodeCPUCount for that purpose.
    
    
    
2012-11-02 Daniel P. Berrange  <berrange@redhat.com>
    
    Remove spurious whitespace between function name & open brackets
    The libvirt coding standard is to use 'function(...args...)'
    instead of 'function (...args...)'. A non-trivial number of
    places did not follow this rule and are fixed in this patch.
    
    
    
2012-10-25 Eric Blake  <eblake@redhat.com>
    
    maint: consistent whitespace after 'if'
    Noticed during the review of the previous patch.
    
    * python/libvirt-override.c: Use space between 'if ('.
    
    
2012-10-25 Viktor Mihajlovski  <mihajlov@linux.vnet.ibm.com>
    
    virNodeGetCPUMap: Add python binding
    Added a method getCPUMap to virConnect.
    It can be used as follows:
    
    import libvirt
    import sys
    import os
    
    conn = libvirt.openReadOnly(None)
    if conn == None:
    print 'Failed to open connection to the hypervisor'
    sys.exit(1)
    
    try:
    (cpus, cpumap, online) = conn.getCPUMap(0)
    except:
    print 'Failed to extract the node cpu map information'
    sys.exit(1)
    
    print 'CPUs total %d, online %d' % (cpus, online)
    print 'CPU map %s' % str(cpumap)
    
    del conn
    print "OK"
    
    sys.exit(0)
    
    
    
2012-10-24 Viktor Mihajlovski  <mihajlov@linux.vnet.ibm.com>
    
    virNodeGetCPUMap: Define public API.
    Adding a new API to obtain information about the
    host node's present, online and offline CPUs.
    
    int virNodeGetCPUMap(virConnectPtr conn,
    unsigned char **cpumap,
    unsigned int *online,
    unsigned int flags);
    
    The function will return the number of CPUs present on the host
    or -1 on failure;
    If cpumap is non-NULL virNodeGetCPUMap will allocate an array
    containing a bit map representation of the online CPUs. It's
    the callers responsibility to deallocate cpumap using free().
    If online is non-NULL, the variable pointed to will contain
    the number of online host node CPUs.
    The variable flags has been added to support future extensions
    and must be set to 0.
    
    Extend the driver structure by nodeGetCPUMap entry in support of the
    new API virNodeGetCPUMap.
    Added implementation of virNodeGetCPUMap to libvirt.c
    
    
    
2012-10-15 Martin Kletzander  <mkletzan@redhat.com>
    
    Add support for SUSPEND_DISK event
    This patch adds support for SUSPEND_DISK event; both lifecycle and
    separated.  The support is added for QEMU, machines are changed to
    PMSUSPENDED, but as QEMU sends SHUTDOWN afterwards, the state changes
    to shut-off.  This and much more needs to be done in order for libvirt
    to work with transient devices, wake-ups etc.  This patch is not
    aiming for that functionality.
    
    
2012-10-13 Guido Günther  <agx@sigxcpu.org>
    
    Properly parse (unsigned) long long
    This fixes problems on platforms where sizeof(long) != sizeof(long long)
    like ia32.
    
    
2012-10-08 Guannan Ren  <gren@redhat.com>
    
    python: keep consistent handling of Python integer conversion
    libvirt_ulonglongUnwrap requires the integer type of python obj.
    But libvirt_longlongUnwrap still could handle python obj of
    Pyfloat_type which causes the float value to be rounded up
    to an integer.
    
    For example
    >>> dom.setSchedulerParameters({'vcpu_quota': 0.88})
    0
    libvirt_longlongUnwrap treats 0.88 as a valid value 0
    
    However
    >>> dom.setSchedulerParameters({'cpu_shares': 1000.22})
    libvirt_ulonglongUnwrap will throw out an error
    "TypeError: an integer is required"
    
    The patch make this consistent.
    
    
2012-10-08 Guannan Ren  <gren@redhat.com>
    
    python: cleanup vcpu related binding APIs
    libvirt_virDomainGetVcpus: add error handling, return -1 instead of None
    libvirt_virDomainPinVcpu and libvirt_virDomainPinVcpuFlags:
    check the type of argument
    make use of libvirt_boolUnwrap
    
    Set bitmap according to these values which are contained in given
    argument of vcpu tuple and turn off these bit corresponding to
    missing vcpus in argument tuple
    
    The original way ignored the error info from PyTuple_GetItem
    if index is out of range.
    "IndexError: tuple index out of range"
    The error message will only be raised on next command in interactive mode.
    
    
2012-09-28 Guannan Ren  <gren@redhat.com>
    
    python: return error if PyObject obj is NULL for unwrapper helper functions
    The result is indeterminate for NULL argument to python
    functions as follows. It's better to return negative value in
    these situations.
    
    PyObject_IsTrue will segfault if the argument is NULL
    PyFloat_AsDouble(NULL) is -1.000000
    PyLong_AsUnsignedLongLong(NULL) is 0.000000
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    node_memory: Expose the APIs to Python bindings
    * python/libvirt-override-api.xml: (Add document to describe
    the APIs).
    * python/libvirt-override.c: (Implement the API wrappers manually)
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    node_memory: Define the APIs to get/set memory parameters
    * include/libvirt/libvirt.h.in: (Add macros for the param fields,
    declare the APIs).
    * src/driver.h: (New methods for the driver struct)
    * src/libvirt.c: (Implement the public APIs)
    * src/libvirt_public.syms: (Export the public symbols)
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Expose virConnectListAllSecrets to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virConnect.py: Implementation for listAllSecrets.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virConnectListAllSecrets
    This is to list the secret objects. Supports to filter the secrets
    by its storage location, and whether it's private or not.
    
    include/libvirt/libvirt.h.in: Declare enum virConnectListAllSecretFlags
    and virConnectListAllSecrets.
    python/generator.py: Skip auto-generating
    src/driver.h: (virDrvConnectListAllSecrets)
    src/libvirt.c: Implement the public API
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Expose virConnectListAllNWFilters to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virConnect.py:
    * Implementation for listAllNWFilters.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virConnectListAllNWFilters
    This is to list the network filter objects. No flags are supported
    
    include/libvirt/libvirt.h.in: Declare enum virConnectListAllNWFilterFlags
    and virConnectListAllNWFilters.
    python/generator.py: Skip auto-generating
    src/driver.h: (virDrvConnectListAllNWFilters)
    src/libvirt.c: Implement the public API
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Expose virConnectListAllNodeDevices to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virConnect.py:
    * Implementation for listAllNodeDevices.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-17 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virConnectListAllNodeDevices
    This is to list the node device objects, supports to filter the results
    by capability types.
    
    include/libvirt/libvirt.h.in: Declare enum virConnectListAllNodeDeviceFlags
    and virConnectListAllNodeDevices.
    python/generator.py: Skip auto-generating
    src/driver.h: (virDrvConnectListAllNodeDevices)
    src/libvirt.c: Implement the public API
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-12 Osier Yang  <jyang@redhat.com>
    
    list: Expose virConnectListAllInterfaces to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virConnect.py:
    * New file, includes implementation of listAllInterfaces.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-12 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virConnectListAllInterfaces
    This is to list the interface objects, supported filtering flags
    are: active|inactive.
    
    include/libvirt/libvirt.h.in: Declare enum virConnectListAllInterfaceFlags
    and virConnectListAllInterfaces.
    python/generator.py: Skip auto-generating
    src/driver.h: (virDrvConnectListAllInterfaces)
    src/libvirt.c: Implement the public API
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-11 Federico Simoncelli  <fsimonce@redhat.com>
    
    python: Initialize new_params in virDomainSetSchedulerParameters
    The new_params variable must be initialized in case the
    virDomainGetSchedulerParameters call fails and we hit the cleanup
    section before actually allocating the new parameters.
    
    
    
2012-09-11 Daniel P. Berrange  <berrange@redhat.com>
    
    Check against python None type when filling in auth parameters
    When deciding whether to provide an auth function callback
    in openAuth(), credcb was checked against NULL, when it
    really needs to be checked against Py_None
    
    
    
2012-09-11 Daniel P. Berrange  <berrange@redhat.com>
    
    Print any exception that occurs in authentication callback
    If an exception occurs in the python callback for openAuth()
    the stack trace isn't seen by the apps, since this code is
    called from libvirt context. To aid diagnostics, print the
    error to stderr at least
    
    
    
2012-09-11 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix crash passing an empty list to python openAuth() API
    If passing a 'credtype' parameter which was an empty list
    to the python openAuth() API, the 'credtype' field in
    the virConnectAuth struct would not be initialized. This
    lead to a crash when later trying to free that field.
    
    
    
2012-09-11 Osier Yang  <jyang@redhat.com>
    
    list: Expose virConnectListAllNetworks to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virConnect.py: Implement listAllNetworks.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-11 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virConnectListAllNetworks
    This is to list the network objects, supported filtering flags
    are: active|inactive, persistent|transient, autostart|no-autostart.
    
    include/libvirt/libvirt.h.in: Declare enum virConnectListAllNetworkFlags
    and virConnectListAllNetworks.
    python/generator.py: Skip auto-generating
    src/driver.h: (virDrvConnectListAllNetworks)
    src/libvirt.c: Implement the public API
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-10 Osier Yang  <jyang@redhat.com>
    
    list: Expose virStoragePoolListAllVolumes to Python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    
    python/libvirt-override-virStoragePool.py:
    * New file, includes implementation of listAllVolumes.
    
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-10 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virStoragePoolListAllVolumes
    Simply returns the storage volume objects. No supported filter
    flags.
    
    include/libvirt/libvirt.h.in: Declare the API
    python/generator.py: Skip the function for generating. virStoragePool.py
    will be added in later patch.
    src/driver.h: virDrvStoragePoolListVolumesFlags
    src/libvirt.c: Implementation for the API.
    src/libvirt_public.syms: Export the symbol to public
    
    
2012-09-07 Jiri Denemark  <jdenemar@redhat.com>
    
    Fix PMSuspend and PMWakeup events
    The unused reason parameter of PM{Suspend,Wakeup} event callbacks was
    completely ignored in lot of places and those events were not actually
    working at all.
    
    
2012-09-06 Osier Yang  <jyang@redhat.com>
    
    python: Expose virStorageListAllStoragePools to python binding
    The implementation is done manually as the generator does not support
    wrapping lists of C pointers into Python objects.
    
    python/libvirt-override-api.xml: Document
    python/libvirt-override-virConnect.py: Add listAllStoragePools
    python/libvirt-override.c: Implementation for the wrapper.
    
    
2012-09-06 Osier Yang  <jyang@redhat.com>
    
    list: Define new API virStorageListAllStoragePools
    This introduces a new API to list the storage pool objects,
    4 groups of flags are provided to filter the returned pools:
    
    * Active or not
    
    * Autostarting or not
    
    * Persistent or not
    
    * And the pool type.
    
    include/libvirt/libvirt.h.in: New enum virConnectListAllStoragePoolFlags;
    Declare the API.
    python/generator.py: Skip the generating
    src/driver.h: (virDrvConnectListAllStoragePools)
    src/libvirt.c: Implementation for the API.
    src/libvirt_public.syms: Export the symbol.
    
    
2012-08-31 Eric Blake  <eblake@redhat.com>
    
    python: don't mask libvirt errors
    A user reported this crash when using python bindings:
    
    File "/home/nox/workspace/NOX/src/NOX/hooks.py", line 134, in trigger
    hook.trigger(event)
    File "/home/nox/workspace/NOX/src/NOX/hooks.py", line 33, in trigger
    self.handlers[event]()
    File "/home/nox/workspace/NOX/hooks/volatility.py", line 81, in memory_dump
    for block in Memory(self.ctx):
    File "/home/see/workspace/NOX/src/NOX/lib/libtools.py", line 179, in next
    libvirt.VIR_MEMORY_PHYSICAL)
    File "/usr/lib/python2.7/dist-packages/libvirt.py", line 1759, in memoryPeek
    ret = libvirtmod.virDomainMemoryPeek(self._o, start, size, flags)
    SystemError: error return without exception set
    
    In the python bindings, returning NULL makes python think an
    exception was thrown, while returning the None object lets the
    wrappers know that a libvirt error exists.
    
    Reported by Nox DaFox, fix suggested by Dan Berrange.
    
    * python/libvirt-override.c (libvirt_virDomainBlockPeek)
    (libvirt_virDomainMemoryPeek): Return python's None object, so
    wrapper knows to check libvirt error.
    
    
2012-08-23 MATSUDA Daiki  <matsudadik@intellilink.co.jp>
    
    agent: add python module support
    Add virDomainQemuAgentCommand() support function to python module.
    
    
    
2012-08-23 MATSUDA Daiki  <matsudadik@intellilink.co.jp>
    
    agent: add virDrvDomainQemuAgentCommand prototype for drivers.
    Add virDrvDomainQemuAgentCommand prototype for drivers.
    Add virDomainQemuAgentCommand() for virDrvDomainQemuAgentCommand.
    
    
    
2012-08-20 Marcelo Cerri  <mhcerri@linux.vnet.ibm.com>
    
    Update the remote API
    This patch updates libvirt's API to allow applications to inspect the
    full list of security labels of a domain.
    
    
    
2012-07-30 Peter Krempa  <pkrempa@redhat.com>
    
    python: Don't generate bodies for close callback functions
    Commit 6ed5a1b9bd6240b8f2736790e48dd1c284c2e0e1 adds close callback
    functions to the public API but doesn't add python implementation. This
    patch sets the function to be written manually (to fix the build), but
    doesn't implement them yet.
    
    
2012-07-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Define public API for receiving guest memory balloon events
    When the guest changes its memory balloon applications may want
    to know what the new value is, without having to periodically
    poll on XML / domain info. Introduce a "balloon change" event
    to let apps see this
    
    * include/libvirt/libvirt.h.in: Define the
    virConnectDomainEventBalloonChangeCallback callback
    and VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE constant
    * python/libvirt-override-virConnect.py,
    python/libvirt-override.c: Wire up helpers for new event
    * daemon/remote.c: Helper for serializing balloon event
    * examples/domain-events/events-c/event-test.c,
    examples/domain-events/events-python/event-test.py: Add
    example of balloon event usage
    * src/conf/domain_event.c, src/conf/domain_event.h: Handling
    of balloon events
    * src/remote/remote_driver.c: Add handler of balloon events
    * src/remote/remote_protocol.x: Define wire protocol for
    balloon events
    * src/remote_protocol-structs: Likewise.
    
    
2012-06-19 Eric Blake  <eblake@redhat.com>
    
    list: provide python bindings for snapshots
    This adds support for the new virDomainListAllSnapshots (a domain
    function) and virDomainSnapshotListAllChildren (a snapshot function)
    to the libvirt-python bindings.  The implementation is done manually
    as the generator does not support wrapping lists of C pointers into
    python objects.
    
    * python/libvirt-override.c (libvirt_virDomainListAllSnapshots)
    (libvirt_virDomainSnapshotListAllChildren): New functions.
    * python/libvirt-override-api.xml: Document them.
    * python/libvirt-override-virDomain.py (listAllSnapshots): New
    file.
    * python/libvirt-override-virDomainSnapshot.py (listAllChildren):
    Likewise.
    * python/Makefile.am (CLASSES_EXTRA): Ship them.
    
    
2012-06-19 Eric Blake  <eblake@redhat.com>
    
    list: add virDomainListAllSnapshots API
    There was an inherent race between virDomainSnapshotNum() and
    virDomainSnapshotListNames(), where an additional snapshot could
    be created in the meantime, or where a snapshot could be deleted
    before converting the name back to a virDomainSnapshotPtr.  It
    was also an awkward name: the function operates on domains, not
    domain snapshots.  virDomainSnapshotListChildrenNames() suffered
    from the same inherent race, although its naming was nicer.
    
    This patch makes things nicer by grabbing a snapshot list
    atomically, in the format most useful to the user.
    
    * include/libvirt/libvirt.h.in (virDomainListAllSnapshots)
    (virDomainSnapshotListAllChildren): New declarations.
    * src/libvirt.c (virDomainSnapshotListNames)
    (virDomainSnapshotListChildrenNames): Add cross-references.
    (virDomainListAllSnapshots, virDomainSnapshotListAllChildren):
    New functions.
    * src/libvirt_public.syms (LIBVIRT_0.9.13): Export them.
    * src/driver.h (virDrvDomainListAllSnapshots)
    (virDrvDomainSnapshotListAllChildren): New callbacks.
    * python/generator.py (skip_function): Prepare for later
    hand-written versions.
    
    
2012-06-18 Peter Krempa  <pkrempa@redhat.com>
    
    python: add API exports for virConnectListAllDomains()
    This patch adds export of the new API function
    virConnectListAllDomains() to the libvirt-python bindings. The
    virConnect object now has method "listAllDomains" that takes only the
    flags parameter and returns a python list of virDomain object
    corresponding to virDomainPtrs returned by the underlying api.
    
    The implementation is done manually as the generator does not support
    wrapping list of virDomainPtrs into virDomain objects.
    
    
2012-06-18 Peter Krempa  <pkrempa@redhat.com>
    
    lib: Add public api to enable atomic listing of guest
    This patch adds a new public api that lists domains. The new approach is
    different from those used before. There are key points to this:
    
    1) The list is acquired atomically and contains both active and inactive
    domains (guests). This eliminates the need to call two different list
    APIs, where the state might change in between the calls.
    
    2) The returned list consists of virDomainPtrs instead of names or ID's
    that have to be converted to virDomainPtrs anyways using separate calls
    for each one of them. This is more convenient and saves hypervisor calls.
    
    3) The returned list is auto-allocated. This saves a lot of hassle for
    the users.
    
    4) Built in support for filtering. The API call supports various
    filtering flags that modify the output list according to user needs.
    
    Available filter groups:
    Domain status:
    VIR_CONNECT_LIST_DOMAINS_ACTIVE, VIR_CONNECT_LIST_DOMAINS_INACTIVE
    
    Domain persistence:
    VIR_CONNECT_LIST_DOMAINS_PERSISTENT,
    VIR_CONNECT_LIST_DOMAINS_TRANSIENT
    
    Domain state:
    VIR_CONNECT_LIST_DOMAINS_RUNNING, VIR_CONNECT_LIST_DOMAINS_PAUSED,
    VIR_CONNECT_LIST_DOMAINS_SHUTOFF, VIR_CONNECT_LIST_DOMAINS_OTHER
    
    Existence of managed save image:
    VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE,
    VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE
    
    Auto-start option:
    VIR_CONNECT_LIST_DOMAINS_AUTOSTART,
    VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART
    
    Existence of snapshot:
    VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT,
    VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT
    
    5) The python binding returns a list of domain objects that is very neat
    to work with.
    
    The only problem with this approach is no support from code generators
    so both RPC code and python bindings had to be written manually.
    
    *include/libvirt/libvirt.h.in: - add API prototype
    - clean up whitespace mistakes nearby
    *python/generator.py: - inhibit generation of the bindings for the new
    api
    *src/driver.h: - add driver prototype
    - clean up some whitespace mistakes nearby
    *src/libvirt.c: - add public implementation
    *src/libvirt_public.syms: - export the new symbol
    
    
2012-06-12 Eric Blake  <eblake@redhat.com>
    
    python: fix snapshot listing bugs
    Python exceptions are different than libvirt errors, and we had
    some corner case bugs on OOM situations.
    
    * python/libvirt-override.c (libvirt_virDomainSnapshotListNames)
    (libvirt_virDomainSnapshotListChildrenNames): Use correct error
    returns, avoid segv on OOM, and avoid memory leaks on error.
    
    
2012-06-12 Eric Blake  <eblake@redhat.com>
    
    python: use simpler methods
    * python/libvirt-override.c (libvirt_virDomainGetVcpus)
    (libvirt_virDomainGetVcpuPinInfo): Use Py_XDECREF instead of
    open-coding it.
    
    
2012-05-04 Osier Yang  <jyang@redhat.com>
    
    Coverity: Fix the forward_null error in Python binding codes
    Related coverity log:
    
    Error: FORWARD_NULL:
    /builddir/build/BUILD/libvirt-0.9.10/python/libvirt-override.c:355:
    assign_zero: Assigning: "params" = 0.
    /builddir/build/BUILD/libvirt-0.9.10/python/libvirt-override.c:458:
    var_deref_model: Passing null variable "params" to function
    "getPyVirTypedParameter", which dereferences it. (The dereference is assumed on
    the basis of the 'nonnull' parameter attribute.)
    
    
2012-04-27 Cole Robinson  <crobinso@redhat.com>
    
    python: Fix doc directory name for stable releases
    We were using the libvirt release version (like 0.9.11) and not
    the configure version (which for stable releases is 0.9.11.X)
    
    Most other places got this right so hopefully that's all the fallout
    from the version format change :)
    
    
    
2012-04-10 Stefan Berger  <stefanb@linux.vnet.ibm.com>
    
    Fix compilation error on 32bit
    Below code failed to compile on a 32 bit machine with error
    
    typewrappers.c: In function 'libvirt_intUnwrap':
    typewrappers.c:135:5: error: logical 'and' of mutually exclusive tests is always false [-Werror=logical-op]
    cc1: all warnings being treated as errors
    
    The patch fixes this error.
    
    
    
2012-03-31 Eric Blake  <eblake@redhat.com>
    
    python: improve conversion validation
    Laszlo Ersek pointed out that in trying to convert a long to an
    unsigned int, we used:
    
    long long_val = ...;
    if ((unsigned int)long_val == long_val)
    
    According to C99 integer promotion rules, the if statement is
    equivalent to:
    
    (unsigned long)(unsigned int)long_val == (unsigned long)long_val
    
    since you get an unsigned comparison if at least one side is
    unsigned, using the largest rank of the two sides; but on 32-bit
    platforms, where unsigned long and unsigned int are the same size,
    this comparison is always true and ends up converting negative
    long_val into posigive unsigned int values, rather than rejecting
    the negative value as we had originally intended (python longs
    are unbounded size, and we don't want to do silent modulo
    arithmetic when converting to C code).
    
    Fix this by using direct comparisons, rather than casting.
    
    * python/typewrappers.c (libvirt_intUnwrap, libvirt_uintUnwrap)
    (libvirt_ulongUnwrap, libvirt_ulonglongUnwrap): Fix conversion
    checks.
    
    
2012-03-28 Guannan Ren  <gren@redhat.com>
    
    python: make python APIs use these helper functions
    *setPyVirTypedParameter
    *libvirt_virDomainGetCPUStats
    
    
2012-03-28 Guannan Ren  <gren@redhat.com>
    
    python: Add new helper functions for python to C integral conversion
    int libvirt_intUnwrap(PyObject *obj, int *val);
    int libvirt_uintUnwrap(PyObject *obj, unsigned int *val);
    int libvirt_longUnwrap(PyObject *obj, long *val);
    int libvirt_ulongUnwrap(PyObject *obj, unsigned long *val);
    int libvirt_longlongUnwrap(PyObject *obj, long long *val);
    int libvirt_ulonglongUnwrap(PyObject *obj, unsigned long long *val);
    int libvirt_doubleUnwrap(PyObject *obj, double *val);
    int libvirt_boolUnwrap(PyObject *obj, bool *val);
    
    
2012-03-26 Martin Kletzander  <mkletzan@redhat.com>
    
    Cleanup for a return statement in source files
    Return statements with parameter enclosed in parentheses were modified
    and parentheses were removed. The whole change was scripted, here is how:
    
    List of files was obtained using this command:
    git grep -l -e '\<return\s*([^()]*\(([^()]*)[^()]*\)*)\s*;' |             \
    grep -e '\.[ch]$' -e '\.py$'
    
    Found files were modified with this command:
    sed -i -e                                                                 \
    's_^\(.*\<return\)\s*(\(\([^()]*([^()]*)[^()]*\)*\))\s*\(;.*$\)_\1 \2\4_' \
    -e 's_^\(.*\<return\)\s*(\([^()]*\))\s*\(;.*$\)_\1 \2\3_'
    
    Then checked for nonsense.
    
    The whole command looks like this:
    git grep -l -e '\<return\s*([^()]*\(([^()]*)[^()]*\)*)\s*;' |             \
    grep -e '\.[ch]$' -e '\.py$' | xargs sed -i -e                            \
    's_^\(.*\<return\)\s*(\(\([^()]*([^()]*)[^()]*\)*\))\s*\(;.*$\)_\1 \2\4_' \
    -e 's_^\(.*\<return\)\s*(\([^()]*\))\s*\(;.*$\)_\1 \2\3_'
    
    
2012-03-23 Osier Yang  <jyang@redhat.com>
    
    Add support for the suspend event
    This patch introduces a new event type for the QMP event
    SUSPEND:
    
    VIR_DOMAIN_EVENT_ID_PMSUSPEND
    
    The event doesn't take any data, but considering there might
    be reason for wakeup in future, the callback definition is:
    
    typedef void
    (*virConnectDomainEventSuspendCallback)(virConnectPtr conn,
    virDomainPtr dom,
    int reason,
    void *opaque);
    
    "reason" is unused currently, always passes "0".
    
    
2012-03-23 Osier Yang  <jyang@redhat.com>
    
    Add support for the wakeup event
    This patch introduces a new event type for the QMP event
    WAKEUP:
    
    VIR_DOMAIN_EVENT_ID_PMWAKEUP
    
    The event doesn't take any data, but considering there might
    be reason for wakeup in future, the callback definition is:
    
    typedef void
    (*virConnectDomainEventWakeupCallback)(virConnectPtr conn,
    virDomainPtr dom,
    int reason,
    void *opaque);
    
    "reason" is unused currently, always passes "0".
    
    
2012-03-23 Osier Yang  <jyang@redhat.com>
    
    Add support for event tray moved of removable disks
    This patch introduces a new event type for the QMP event
    DEVICE_TRAY_MOVED, which occurs when the tray of a removable
    disk is moved (i.e opened or closed):
    
    VIR_DOMAIN_EVENT_ID_TRAY_CHANGE
    
    The event's data includes the device alias and the reason
    for tray status' changing, which indicates why the tray
    status was changed. Thus the callback definition for the event
    is:
    
    enum {
    VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN = 0,
    VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE,
    
    \#ifdef VIR_ENUM_SENTINELS
    VIR_DOMAIN_EVENT_TRAY_CHANGE_LAST
    \#endif
    } virDomainEventTrayChangeReason;
    
    typedef void
    (*virConnectDomainEventTrayChangeCallback)(virConnectPtr conn,
    virDomainPtr dom,
    const char *devAlias,
    int reason,
    void *opaque);
    
    
2012-03-22 Guannan Ren  <gren@redhat.com>
    
    python: add virDomainGetCPUStats python binding API
    dom.getCPUStats(True, 0)
    [{'cpu_time': 24699446159L, 'system_time': 10870000000L, 'user_time': 950000000L}]
    dom.getCPUStats(False, 0)
    [{'cpu_time': 8535292289L}, {'cpu_time': 1005395355L}, {'cpu_time': 9351766377L}, {'cpu_time': 5813545649L}]
    
    *generator.py Add a new naming rule
    *libvirt-override-api.xml The API function description
    *libvirt-override.c Implement it.
    
    
2012-03-22 Alex Jia  <ajia@redhat.com>
    
    python: Avoid memory leaks on libvirt_virNodeGetCPUStats
    Detected by valgrind. Leaks are introduced in commit 4955602.
    
    * python/libvirt-override.c (libvirt_virNodeGetCPUStats): fix memory leaks
    and improve codes return value.
    
    For details, please see the following link:
    RHBZ: https://bugzilla.redhat.com/show_bug.cgi?id=770943
    
    
    
2012-03-21 Alex Jia  <ajia@redhat.com>
    
    python: Avoid memory leaks on libvirt_virNodeGetMemoryStats
    Detected by valgrind. Leaks are introduced in commit 17c7795.
    
    * python/libvirt-override.c (libvirt_virNodeGetMemoryStats): fix memory leaks
    and improve codes return value.
    
    For details, please see the following link:
    RHBZ: https://bugzilla.redhat.com/show_bug.cgi?id=770944
    
    
    
2012-03-20 Eric Blake  <eblake@redhat.com>
    
    python: always include config.h first
    On RHEL 5.7, I got this compilation failure:
    
    In file included from /usr/include/python2.4/pyport.h:98,
    from /usr/include/python2.4/Python.h:55,
    from libvirt.c:3:
    ../gnulib/lib/time.h:468: error: expected ';', ',' or ')' before '__timer'
    
    Turns out that our '#define restrict __restrict' from config.h wasn't
    being picked up.  Gnulib _requires_ that all .c files include <config.h>
    first, otherwise the gnulib header overrides tend to misbehave.
    
    Problem introduced by patch c700613b8.
    
    * python/generator.py (buildStubs): Include <config.h> first.
    
    
2012-02-16 Alex Jia  <ajia@redhat.com>
    
    python: Expose virDomain{G,S}etInterfaceParameters APIs in python binding
    The v4 patch corrects indentation issues.
    
    The v3 patch follows latest python binding codes and change 'size'
    type from int to Py_ssize_t.
    
    An simple example to show how to use it:
    
    #!/usr/bin/env python
    
    import libvirt
    
    conn = libvirt.open(None)
    dom = conn.lookupByName('foo')
    
    print dom.interfaceParameters('vnet0', 0)
    
    params = {'outbound.peak': 10,
    'inbound.peak': 10,
    'inbound.burst': 20,
    'inbound.average': 20,
    'outbound.average': 30,
    'outbound.burst': 30}
    
    print dom.setInterfaceParameters('vnet0', params, 0)
    print dom.interfaceParameters('vnet0', 0)
    
    
    
2012-02-11 Guannan Ren  <gren@redhat.com>
    
    python: make other APIs share common {get, set}PyVirTypedParameter
    *libvirt_virDomainBlockStatsFlags
    *libvirt_virDomainGetSchedulerParameters
    *libvirt_virDomainGetSchedulerParametersFlags
    *libvirt_virDomainSetSchedulerParameters
    *libvirt_virDomainSetSchedulerParametersFlags
    *libvirt_virDomainSetBlkioParameters
    *libvirt_virDomainGetBlkioParameters
    *libvirt_virDomainSetMemoryParameters
    *libvirt_virDomainGetMemoryParameters
    *libvirt_virDomainSetBlockIoTune
    *libvirt_virDomainGetBlockIoTune
    
    
2012-02-09 Guannan Ren  <gren@redhat.com>
    
    python: refactoring virTypedParameter conversion for NUMA tuning APIs
    *getPyVirTypedParameter
    *setPyVirTypedParameter
    *virDomainSetNumaParameters
    *virDomainGetNumaParameters
    
    
    
2012-02-09 Osier Yang  <jyang@redhat.com>
    
    python: Correct arguments number for migrateSetMaxSpeed
    The API definition accepts "flags" argument, however, the
    implementation ignores it, though "flags" is unused currently,
    we should expose it instead of hard coding, the API
    implementation inside hypervisor driver is responsible to check
    if the passed "flags" is valid.
    
    
2012-02-08 Eric Blake  <eblake@redhat.com>
    
    python: drop unused function
    Gcc warned about an unused static function.
    
    * python/libvirt-qemu-override.c (py_str): Delete.
    
    
2012-02-07 Michal Privoznik  <mprivozn@redhat.com>
    
    pyhton: Don't link against libvirt_util.la
    As we already link with libvirt.la which contains libvirt_utils.la.
    Double linking causes global symbols to be presented twice and
    thus confusion. This partially reverts c700613b8d463212d142c97108b7a2352e23e559
    
    
2012-02-03 Eric Blake  <eblake@redhat.com>
    
    maint: consolidate several .gitignore files
    Unlike .cvsignore under CVS, git allows for ignoring nested
    names.  We weren't very consistent where new tests were
    being ignored (some in .gitignore, some in tests/.gitignore),
    and I found it easier to just consolidate everything.
    
    * .gitignore: Subsume entries from subdirectories.
    * daemon/.gitignore: Delete.
    * docs/.gitignore: Likewise.
    * docs/devhelp/.gitignore: Likewise.
    * docs/html/.gitignore: Likewise.
    * examples/dominfo/.gitignore: Likewise.
    * examples/domsuspend/.gitignore: Likewise.
    * examples/hellolibvirt/.gitignore: Likewise.
    * examples/openauth/.gitignore: Likewise.
    * examples/domain-events/events-c/.gitignore: Likewise.
    * include/libvirt/.gitignore: Likewise.
    * src/.gitignore: Likewise.
    * src/esx/.gitignore: Likewise.
    * tests/.gitignore: Likewise.
    * tools/.gitignore: Likewise.
    
    
2012-02-03 Martin Kletzander  <mkletzan@redhat.com>
    
    Added missing memory reporting into python bindings
    Two types of memory stats were not reported by python bindings. This
    patch fixes both of them.
    
    
2012-02-03 Eric Blake  <eblake@redhat.com>
    
    python: use libvirt_util to avoid raw free
    This patch starts the process of elevating the python binding code
    to be on the same level as the rest of libvirt when it comes to
    requiring good coding styles.  Statically linking against the
    libvirt_util library makes it much easier to write good code,
    rather than having to open-code and reinvent things locally.
    
    Done by global search and replace of s/free(/VIR_FREE(/, followed
    by hand-inspection of remaining malloc and redundant memset.
    
    * cfg.mk (exclude_file_name_regexp--sc_prohibit_raw_allocation):
    Remove python from exemption.
    * python/Makefile.am (INCLUDES): Add gnulib and src/util.  Drop
    $(top_builddir)/$(subdir), as automake already guarantees that.
    (mylibs, myqemulibs): Pull in libvirt_util and gnulib.
    (libvirtmod_la_CFLAGS): Catch compiler warnings if configured to
    use -Werror.
    * python/typewrappers.c (libvirt_charPtrSizeWrap)
    (libvirt_charPtrWrap): Convert free to VIR_FREE.
    * python/generator.py (print_function_wrapper): Likewise.
    * python/libvirt-override.c: Likewise.
    
    
2012-02-03 Eric Blake  <eblake@redhat.com>
    
    python: drop redundant function
    I noticed some redundant code while preparing my next patch.
    
    * python/generator.py (py_types): Fix 'const char *' mapping.
    * python/typewrappers.h (libvirt_charPtrConstWrap): Drop.
    * python/typewrappers.c (libvirt_charPtrConstWrap): Delete, since
    it is identical to libvirt_constcharPtrWrap.
    
    
2012-02-03 Eric Blake  <eblake@redhat.com>
    
    build: clean up CPPFLAGS/INCLUDES usage
    Our syntax checker missed all-lower-case variables (this will
    be fixed by the next .gnulib update).  Additionally, anywhere
    that we mix in-tree files with generated files, automake recommends
    listing builddir prior to srcdir for VPATH builds.
    
    * src/Makefile.am (*_la_CFLAGS): Favor $(top_srcdir).
    (INCLUDES): Likewise, and follow automake recommendations on
    builddir before srcdir.
    * python/Makefile.am (INCLUDES): Swap directory order.
    * tests/Makefile.am (INCLUDES): Likewise.
    * tools/Makefile.am (INCLUDES): Likewise.
    * daemon/Makefile.am (INCLUDES): Likewise.
    (libvirtd.init, libvirtd.service): Favor $().
    * examples/hellolibvirt/Makefile.am (hellolibvirt_LDADD):
    Likewise.
    * examples/openauth/Makefile.am (openauth_LDADD): Likewise.
    * examples/dominfo/Makefile.am (INCLUDES): Drop dead include.
    * examples/domsuspend/Makefile.am (INCLUDES): Likewise.
    
    
2012-02-01 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Add binding for virDomainGetDiskErrors
    
    
2012-02-01 Jiri Denemark  <jdenemar@redhat.com>
    
    virDomainGetDiskErrors public API
    We already provide ways to detect when a domain has been paused as a
    result of I/O error, but there was no way of getting the exact error or
    even the device that experienced it.  This new API may be used for both.
    
    
2012-02-01 Alex Jia  <ajia@redhat.com>
    
    python: correct a copy-paste error
    * python/libvirt-override-virStream.py: fix a copy-paste error in sendAll().
    
    
    
2012-01-28 KAMEZAWA Hiroyuki  <kamezawa.hiroyu@jp.fujitsu.com>
    
    Add new public API virDomainGetCPUStats()
    add new API virDomainGetCPUStats() for getting cpu accounting information
    per real cpus which is used by a domain.  The API is designed to allow
    future extensions for additional statistics.
    
    based on ideas by Lai Jiangshan and Eric Blake.
    
    * src/libvirt_public.syms: add API for LIBVIRT_0.9.10
    * src/libvirt.c: define virDomainGetCPUStats()
    * include/libvirt/libvirt.h.in: add virDomainGetCPUStats() header
    * src/driver.h: add driver API
    * python/generator.py: add python API (as not implemented)
    
    
    
2012-01-28 Zeeshan Ali (Khattak)  <zeeshanak@gnome.org>
    
    resize: add virStorageVolResize() API
    Add a new function to allow changing of capacity of storage volumes.
    Plan out several flags, even if not all of them will be implemented
    up front.
    
    Expose the new command via 'virsh vol-resize'.
    
    
    
2012-01-20 Eric Blake  <eblake@redhat.com>
    
    API: make declaration of _LAST enum values conditional
    Although this is a public API break, it only affects users that
    were compiling against *_LAST values, and can be trivially
    worked around without impacting compilation against older
    headers, by the user defining VIR_ENUM_SENTINELS before using
    libvirt.h.  It is not an ABI break, since enum values do not
    appear as .so entry points.  Meanwhile, it prevents users from
    using non-stable enum values without explicitly acknowledging
    the risk of doing so.
    
    See this list discussion:
    https://www.redhat.com/archives/libvir-list/2012-January/msg00804.html
    
    * include/libvirt/libvirt.h.in: Hide all sentinels behind
    LIBVIRT_ENUM_SENTINELS, and add missing sentinels.
    * src/internal.h (VIR_DEPRECATED): Allow inclusion after
    libvirt.h.
    (LIBVIRT_ENUM_SENTINELS): Expose sentinels internally.
    * daemon/libvirtd.h: Use the sentinels.
    * src/remote/remote_protocol.x (includes): Don't expose sentinels.
    * python/generator.py (enum): Likewise.
    * tests/cputest.c (cpuTestCompResStr): Silence compiler warning.
    * tools/virsh.c (vshDomainStateReasonToString)
    (vshDomainControlStateToString): Likewise.
    
    
2011-12-29 Hu Tao  <hutao@cn.fujitsu.com>
    
    domiftune: Add API virDomain{S,G}etInterfaceParameters
    The APIs are used to set/get domain's network interface's parameters.
    Currently supported parameters are bandwidth settings.
    
    * include/libvirt/libvirt.h.in: new API and parameters definition
    * python/generator.py: skip the Python API generation
    * src/driver.h: add new entry to the driver structure
    * src/libvirt_public.syms: export symbols
    
    
2011-12-29 Daniel Veillard  <veillard@redhat.com>
    
    remove a static limit on max domains in python bindings
    * python/libvirt-override.c: remove the predefined array in the
    virConnectListDomainsID binding and call virConnectNumOfDomains
    to do a proper allocation
    
    
2011-12-29 Alex Jia  <ajia@redhat.com>
    
    python: Fix problems of virDomain{Set, Get}BlockIoTune bindings
    The parameter 'params' is useless for virDomainGetBlockIoTune API,
    and the return value type should be a virTypedParameterPtr but not
    integer. And "PyArg_ParseTuple" in functions
    libvirt_virDomain{Set,Get}BlockIoTune misses format unit for "format"
    argument.
    
    * libvirt-override-api.xml: Remove useless the parameter 'params'
    from virDomainGetBlockIoTune API, and change return value type from
    integer to virTypedParameterPtr.
    
    * python/libvirt-override.c: Add the missed format units.
    
    RHBZ: https://bugzilla.redhat.com/show_bug.cgi?id=770683
    
    
    
2011-12-20 Hu Tao  <hutao@cn.fujitsu.com>
    
    add new API virDomain{G, S}etNumaParameters
    Set up the types for the numa functions and insert them into the
    virDriver structure definition.
    
    
2011-12-19 Alex Jia  <ajia@redhat.com>
    
    python: plug memory leak on libvirt_virConnectOpenAuth
    * Detected by valgrind. Leak introduced in commit 5ab109f.
    
    * python/libvirt-override.c: avoid memory leak on libvirt_virConnectOpenAuth.
    
    * How to reproduce?
    
    % valgrind -v --leak-check=full virt-clone --print-xml
    Note: it can hit the issue although options are incomplete.
    
    * Actual valgrind result:
    
    ==1801== 12 bytes in 1 blocks are definitely lost in loss record 25 of 3,270
    ==1801==    at 0x4A05FDE: malloc (vg_replace_malloc.c:236)
    ==1801==    by 0xCF1F60E: libvirt_virConnectOpenAuth (libvirt-override.c:1507)
    ==1801==    by 0x3AFEEDE7F3: PyEval_EvalFrameEx (ceval.c:3794)
    ==1801==    by 0x3AFEEDF99E: PyEval_EvalFrameEx (ceval.c:3880)
    ==1801==    by 0x3AFEEDF99E: PyEval_EvalFrameEx (ceval.c:3880)
    ==1801==    by 0x3AFEEDF99E: PyEval_EvalFrameEx (ceval.c:3880)
    ==1801==    by 0x3AFEEDF99E: PyEval_EvalFrameEx (ceval.c:3880)
    ==1801==    by 0x3AFEEE0466: PyEval_EvalCodeEx (ceval.c:3044)
    ==1801==    by 0x3AFEEE0541: PyEval_EvalCode (ceval.c:545)
    ==1801==    by 0x3AFEEFB88B: run_mod (pythonrun.c:1351)
    ==1801==    by 0x3AFEEFB95F: PyRun_FileExFlags (pythonrun.c:1337)
    ==1801==    by 0x3AFEEFCE4B: PyRun_SimpleFileExFlags (pythonrun.c:941)
    
    
    
2011-12-15 Osier Yang  <jyang@redhat.com>
    
    python: Expose blockPeek and memoryPeek in Python binding
    A simple example to show how to use it:
    
    \#! /usr/bin/python
    
    import os
    import sys
    import libvirt
    
    disk = "/var/lib/libvirt/images/test.img"
    
    conn = libvirt.open(None)
    dom = conn.lookupByName('test')
    
    mem_contents = dom.memoryPeek(0, 32, libvirt.VIR_MEMORY_VIRTUAL);
    sys.stdout.write(mem_contents)
    
    % python test.py | hexdump
    0000000 1660 0209 0000 0000 0000 0000 0000 0000
    0000010 0000 0000 0000 0000 d3a0 01d0 0000 0000
    0000020
    
    
2011-12-13 Peter Krempa  <pkrempa@redhat.com>
    
    python: Fix export of virDomainSnapshotListChildrenNames
    Commit f2013c9dd1ce468b8620ee35c232a93ef7026fb0 added implementation of
    virDomainSnapshotListChildrenNames override export, but registration of
    the newly exported function was not added.
    
    *python/libvirt-override.c: - register export of function
    
    
2011-12-05 Peter Krempa  <pkrempa@redhat.com>
    
    python: Expose binding for virNodeGetMemoryStats()
    This patch adds binding for virNodeGetMemoryStats method of libvirtd.
    Return value is represented as a python dictionary mapping field
    names to values.
    
    
2011-12-05 Peter Krempa  <pkrempa@redhat.com>
    
    python: Expose binding for virNodeGetCPUStats()
    This patch adds binding for virNodeGetCPUStats method of libvirtd.
    Return value is represented as a python dictionary mapping field names
    to values.
    
    
2011-11-30 Lei Li  <lilei@linux.vnet.ibm.com>
    
    Support virDomain{Set, Get}BlockIoTune in the python API
    Python support for both setting and getting block I/O throttle.
    
    
    
2011-11-30 Lei Li  <lilei@linux.vnet.ibm.com>
    
    Add new API virDomain{Set, Get}BlockIoTune
    This patch add new pulic API virDomainSetBlockIoTune and
    virDomainGetBlockIoTune.
    
    
    
2011-10-31 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    python: Fix documentation of virStream recv
    This was fixed in be757a3f7baf93b for libvirt.c.
    
    
2011-10-25 Michal Privoznik  <mprivozn@redhat.com>
    
    startupPolicy: Emit event on disk source dropping
    If a disk source gets dropped because it is not accessible,
    mgmt application might want to be informed about this. Therefore
    we need to emit an event. The event presented in this patch
    is however a bit superset of what written above. The reason is simple:
    an intention to be easily expanded, e.g. on 'user ejected disk
    in guest' events. Therefore, callback gets source string and disk alias
    (which should be unique among a domain) and reason (an integer);
    
    
2011-10-17 Philipp Hahn  <hahn@univention.de>
    
    Fix two comments related to error handling
    
    
2011-10-10 Eric Blake  <eblake@redhat.com>
    
    snapshot: new virDomainSnapshotListChildrenNames API
    The previous API addition allowed traversal up the hierarchy;
    this one makes it easier to traverse down the hierarchy.
    
    In the python bindings, virDomainSnapshotNumChildren can be
    generated, but virDomainSnapshotListChildrenNames had to copy
    from the hand-written example of virDomainSnapshotListNames.
    
    * include/libvirt/libvirt.h.in (virDomainSnapshotNumChildren)
    (virDomainSnapshotListChildrenNames): New prototypes.
    (VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS): New flag alias.
    * src/libvirt.c (virDomainSnapshotNumChildren)
    (virDomainSnapshotListChildrenNames): New functions.
    * src/libvirt_public.syms: Export them.
    * src/driver.h (virDrvDomainSnapshotNumChildren)
    (virDrvDomainSnapshotListChildrenNames): New callbacks.
    * python/generator.py (skip_impl, nameFixup): Update lists.
    * python/libvirt-override-api.xml: Likewise.
    * python/libvirt-override.c
    (libvirt_virDomainSnapshotListChildrenNames): New wrapper function.
    
    
2011-10-10 Eric Blake  <eblake@redhat.com>
    
    maint: typo fixes
    I noticed a couple typos in recent commits, and fixed the remaining
    instances of them.
    
    * docs/internals/command.html.in: Fix spelling errors.
    * include/libvirt/libvirt.h.in (virConnectDomainEventCallback):
    Likewise.
    * python/libvirt-override.py (virEventAddHandle): Likewise.
    * src/lxc/lxc_container.c (lxcContainerChild): Likewise.
    * src/util/hash.c (virHashCreateFull): Likewise.
    * src/storage/storage_backend_logical.c
    (virStorageBackendLogicalMakeVol): Likewise.
    * src/esx/esx_driver.c (esxFormatVMXFileName): Likewise.
    * src/vbox/vbox_tmpl.c (vboxIIDIsEqual_v3_x): Likewise.
    
    
2011-09-16 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Fix bindings generated in VPATH build
    
    
2011-09-15 Cole Robinson  <crobinso@redhat.com>
    
    python: Fix libvirt.py generation to include virterror info
    Recent generator refactoring broke libvirt.py. With this patch, libvirt.py
    is generated exactly the same as before offending commit 9eba0d25.
    
    
2011-09-14 Osier Yang  <jyang@redhat.com>
    
    qemu_api: Update Makefile to generate libvirtmod_qemu lib
    
    
2011-09-14 Osier Yang  <jyang@redhat.com>
    
    qemu_api: Update Py binding generator to generate files for QEMU APIs
    It will generate:
    libvirt-qemu.py
    libvirt-qemu.h
    libvirt-qemu.c
    libvirt-qemu-export.c
    
    
2011-09-14 Osier Yang  <jyang@redhat.com>
    
    qemu_api: Add override XML and C files for QEMU APIs
    There is only one function (virDomainQemuMonitorCommand) need to
    be hand-craft.
    
    
2011-09-06 Osier Yang  <jyang@redhat.com>
    
    latency: Expose the new API for Python binding
    
    
2011-09-01 Jim Fehlig  <jfehlig@novell.com>
    
    Add public API for getting migration speed
    Includes impl of python binding since the generator was not
    able to cope.
    
    Note: Requires gendispatch.pl patch from Matthias Bolte
    
    https://www.redhat.com/archives/libvir-list/2011-August/msg01367.html
    
    
2011-08-02 Eric Blake  <eblake@redhat.com>
    
    python: avoid unlikely sign extension bug
    Detected by Coverity; same analysis as for commit f73198df.
    
    * python/libvirt-override.c (libvirt_virDomainGetVcpuPinInfo): Use
    correct type.
    
    
2011-07-29 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    freebsd: Fix build problem due to picking up the wrong libvirt.h
    Gettext annoyingly modifies CPPFLAGS in-place, putting
    -I/usr/local/include into the search patch if libintl headers
    must be used from that location.  But since we must support
    automake 1.9.6 which lacks AM_CPPFLAGS, and since CPPFLAGS is used
    prior to INCLUDES, this means that the build picks up the _old_
    installed libvirt.h in priority to the in-tree version, leading
    to all sorts of weird build failures on FreeBSD.
    
    Fix this by teaching configure to undo gettext's actions, but
    to keep any changes required by gettext at the end of INCLUDES
    after all in-tree locations are used first.  Also requires
    adding a wrapper Makefile.am and making gnulib-tool create
    just gnulib.mk files during the bootstrap process.
    
    
    
2011-07-28 Eric Blake  <eblake@redhat.com>
    
    maint: add missing copyright notices
    I went with the shorter license notice used by src/libvirt.c,
    rather than spelling out the full LGPLv2+ clause into each of
    these files.
    
    * configure.ac: Declare copyright.
    * all Makefile.am: Likewise.
    
    
2011-07-28 Hu Tao  <hutao@cn.fujitsu.com>
    
    python: add python binding for virDomainSetMemoryParameters
    
    
2011-07-28 Hu Tao  <hutao@cn.fujitsu.com>
    
    python: add python binding for virDomainGetMemoryParameters
    
    
2011-07-28 Hu Tao  <hutao@cn.fujitsu.com>
    
    python: add python binding for virDomainSetBlkioParameters
    
    
2011-07-28 Hu Tao  <hutao@cn.fujitsu.com>
    
    python: add python binding for virDomainGetBlkioParameters
    
    
2011-07-27 Lai Jiangshan  <laijs@cn.fujitsu.com>
    
    send-key: Implement Python API
    
    
2011-07-26 Cole Robinson  <crobinso@redhat.com>
    
    python: Properly report errors if virStreamRecv fails
    We only want to raise the special value -2. -1 should return None
    which tells the bindings to throw an exception.
    
    
2011-07-25 Cole Robinson  <crobinso@redhat.com>
    
    python: Handle embedded NUL in stream.send data
    Otherwise things like volume upload are only useful with text data.
    
    
2011-07-25 Taku Izumi  <izumi.taku@jp.fujitsu.com>
    
    python: add Python binding for virDomainGetVcpuPinInfo API
    This patch adds the Python bindings for virDomainGetVcpuPinInfo API.
    * python/generator.py: add it to generator skip list
    * python/libvirt-override-api.xml: provide an override description
    * python/libvirt-override.c: provide an override binding implementation
    
    
2011-07-25 Taku Izumi  <izumi.taku@jp.fujitsu.com>
    
    python: add Python binding for virDomainPinVcpusFlags API
    This patch adds the Python bindings for virDomainPinVcpuFlags API.
    * python/generator.py: add it to the generator skip list
    * python/libvirt-override-api.xml: provide override description
    * python/libvirt-override.c: provide override bindings implementation
    
    
2011-07-25 Taku Izumi  <izumi.taku@jp.fujitsu.com>
    
    python: add Python binding for virDomainGetSchedulerParametersFlags API
    This patch adds the Python bindings for
    virDomainGetSchedulerParametersFlags API.
    
    
2011-07-25 Taku Izumi  <izumi.taku@jp.fujitsu.com>
    
    python: add Python binding for virDomainGetSchedulerParametersFlags API
    This patch adds the Python bindings for
    virDomainGetSchedulerParametersFlags API.
    * python/libvirt-override-api.xml: provide and override description
    * python/libvirt-override.c: implement the bindings
    
    
2011-07-22 Adam Litke  <agl@us.ibm.com>
    
    Asynchronous event for BlockJob completion
    When an operation started by virDomainBlockPull completes (either with
    success or with failure), raise an event to indicate the final status.
    This API allow users to avoid polling on virDomainGetBlockJobInfo if
    they would prefer to use an event mechanism.
    
    * daemon/remote.c: Dispatch events to client
    * include/libvirt/libvirt.h.in: Define event ID and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle the new event
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for block_stream completion and emit a libvirt block pull event
    * src/remote/remote_driver.c: Receive and dispatch events to application
    * src/remote/remote_protocol.x: Wire protocol definition for the event
    * src/remote_protocol-structs: structure definitions for protocol verification
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for BLOCK_STREAM_COMPLETED event
    from QEMU monitor
    
    
2011-07-22 Adam Litke  <agl@us.ibm.com>
    
    Enable virDomainBlockPull in the python API
    virDomainGetBlockJobInfo requires manual override since it returns a
    custom type.
    
    * python/generator.py: reenable bindings for this entry point
    * python/libvirt-override-api.xml python/libvirt-override.c:
    manual overrides
    
    
2011-07-22 Adam Litke  <agl@us.ibm.com>
    
    Add new API virDomainBlockPull* to headers
    Set up the types for the block pull functions and insert them into the
    virDriver structure definition.  Symbols are exported in this patch to
    prevent
    documentation compile failures.
    
    * include/libvirt/libvirt.h.in: new API
    * src/driver.h: add the new entry to the driver structure
    * python/generator.py: fix compiler errors, the actual python bindings
    * are
    implemented later
    * src/libvirt_public.syms: export symbols
    * docs/apibuild.py: Extend 'unsigned long' parameter exception to this
    * API
    
    
2011-07-21 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    python: Fix makefile rule for code generation
    Commit 8665f85523f0451c changed generated.stamp to $(GENERATE).stamp,
    but missed one instance in the CLEANFILES list. This can break the
    build in case the generated code is deleted but the .stamp file stays
    around and therefore the code isn't regenerated.
    
    
2011-07-19 Daniel P. Berrange  <berrange@redhat.com>
    
    Quieten build & ensure API build scripts exit with non-zero status
    The current API build scripts will continue and exit with a zero
    status even if they find problems. This has been the cause of many
    build problems, or hidden build errors, in the past. Change the
    scripts so they always exit with a non-zero status for any problems
    they do not understand. Also turn off all debug output by default
    so they respect $(AM_V_GEN)
    
    * docs/Makefile.am: Use $(AM_V_GEN) for API/HTML scripts
    * docs/apibuild.py, python/generator.py: Exit with non-zero status
    if problems are found. Also be silent, not outputting any debug
    messages.
    * src/Makefile.am: Use $(AM_V_GEN) for ESX generator
    * python/Makefile.am: Tweak rule
    
    
2011-07-13 Eric Blake  <eblake@redhat.com>
    
    python: prefer unsigned flags
    * python/libvirt-override.c (libvirt_virConnectOpenAuth)
    (libvirt_virDomainSnapshotListNames)
    (libvirt_virDomainRevertToSnapshot): Change flags type.
    
    
2011-07-07 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    python: Fix bogus label placement
    
    
2011-07-01 Eric Blake  <eblake@redhat.com>
    
    build: consistently use CFLAGS
    According to the automake manual, CPPFLAGS (aka INCLUDES, as spelled
    in automake 1.9.6) should only include -I, -D, and -U directives; more
    generic directives like -Wall belong in CFLAGS since they affect more
    phases of the build process.  Therefore, we should be sticking CFLAGS
    additions into a CFLAGS container, not a CPPFLAGS container.
    
    * src/Makefile.am (libvirt_driver_vmware_la_CFLAGS): Use AM_CFLAGS.
    (INCLUDES): Move CFLAGS items...
    (AM_CFLAGS): ...to their proper location.
    * python/Makefile.am (INCLUDES, AM_CFLAGS): Likewise.
    * tests/Makefile.am (INCLUDES, AM_CFLAGS): Likewise.
    (commandtest_CFLAGS, commandhelper_CFLAGS)
    (virnetmessagetest_CFLAGS, virnetsockettest_CFLAGS): Use AM_CFLAGS.
    
    
2011-06-24 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    python: Don't declare Py_ssize_t for Python 2.6
    Commit cd48c3f4e95597 added a Py_ssize_t typedef for Python < 2.7.
    But Py_ssize_t was added in Python 2.5. This makes the build fail
    for Python 2.6.
    
    Adjust the check to match Python < 2.5 to fix this.
    
    
2011-06-24 Eric Blake  <eblake@redhat.com>
    
    Revert "Add new API virDomainBlockPull* to headers"
    This reverts commit 7d56a16d036d9aa7292e10e884c129742036f8a7.
    
    Conflicts:
    
    python/generator.py
    src/libvirt_public.syms
    
    
2011-06-24 Eric Blake  <eblake@redhat.com>
    
    Revert "Enable virDomainBlockPull in the python API."
    This reverts commit d74b86f5d6ecae3d18a391f90a918fcac75914db.
    
    Conflicts:
    
    python/generator.py
    
    
2011-06-24 Eric Blake  <eblake@redhat.com>
    
    Revert "Asynchronous event for BlockPull completion"
    This reverts commit 12cd77a0c58a80179182f7d09e8e73f9f66b4677.
    
    Conflicts:
    
    python/libvirt-override-virConnect.py
    python/libvirt-override.c
    src/remote/remote_protocol.x
    
    
2011-06-24 Eric Blake  <eblake@redhat.com>
    
    build: avoid python 2.4 build failure
    I'm not sure when Py_ssize_t was introduced; but Fedora 14 Python 2.7
    has it, while RHEL 5 Python 2.4 lacks it.  It should be easy enough
    to adjust if someone runs into problems.
    
    * python/typewrappers.h (Py_ssize_t): Define for older python.
    
    
2011-06-24 Eric Blake  <eblake@redhat.com>
    
    build: avoid python 2.4 build failure
    On RHEL 5, I got:
    
    /usr/bin/python ./generator.py /usr/bin/python
    File "./generator.py", line 427
    "virStreamFree", # Needed in custom virStream __del__, but free shouldn't
    ^
    SyntaxError: invalid syntax
    
    * python/generator.py (function_skip_python_impl): Use same syntax
    as other skip lists.
    
    
2011-06-23 Cole Robinson  <crobinso@redhat.com>
    
    python: Generate virStreamFree but don't expose in bindings
    Turns out I was right in removing this the first time :) This is
    needed in our custom __del__ function, but the C code wasn't
    being generated. Add new infrastructure to do what we want
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    python: Mark event callback wrappers as private
    These functions aren't intended to be called directly by users, so mark
    them as private.
    
    While we're at it, remove unneeded exception handling, and break some
    long lines.
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    python: events: Fix C->Python handle callback prototype
    If registering our own event loop implementation written in python,
    any handles or timeouts callbacks registered by libvirt C code must
    be wrapped in a python function. There is some argument trickery that
    makes this all work, by wrapping the user passed opaque value in
    a tuple, along with the callback function.
    
    Problem is, the current setup requires the user's event loop to know
    about this trickery, rather than just treating the opaque value
    as truly opaque.
    
    Fix this in a backwards compatible manner, and adjust the example
    python event loop to do things the proper way.
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    python: Add bindings for virEvent*Handle/Timeout
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    Promote virEvent*Handle/Timeout to public API
    Since we virEventRegisterDefaultImpl is now a public API, callers need
    a way to invoke the default registered Handle and Timeout functions. We
    already have general functions for these internally, so promote
    them to the public API.
    
    v2:
    Actually add APIs to libvirt.h
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    python: Implement virStreamSend/RecvAll helpers
    Pure python implementation. The handler callbacks have been altered
    a bit compared to the C API: RecvAll doesn't pass length of the data read
    since that can be trivially obtained from python string objects, and SendAll
    requires the handler to return the string data to send rather than
    store the data in a string pointer.
    
    
2011-06-21 Cole Robinson  <crobinso@redhat.com>
    
    python: Implement virStreamSend/Recv
    The return values for the python version are different that the C version
    of virStreamSend: on success we return a string, an error raises an exception,
    and if the stream would block we return int(-2). We need to do this
    since strings aren't passed by reference in python.
    
    
2011-06-20 Cole Robinson  <crobinso@redhat.com>
    
    python: Implement bindings for virStreamEventAddCallback
    v2:
    Don't generate virStreamFree
    
    
2011-06-20 Cole Robinson  <crobinso@redhat.com>
    
    python: generator: Don't print warning if nothing to warn about
    
    
2011-06-20 Cole Robinson  <crobinso@redhat.com>
    
    python: libvirt-override: use simpler debug
    In a couple instances we have to mark a debug variable as ATTRIBUTE_UNUSED
    to avoid warnings.
    
    v2:
    Use #if 0 to comment out debug define
    
    
2011-06-16 Jiri Denemark  <jdenemar@redhat.com>
    
    Introduce virDomainGetControlInfo API
    The API can be used to query current state of an interface to VMM used
    to control a domain. In QEMU world this translates into monitor
    connection.
    
    
2011-06-15 Adam Litke  <agl@us.ibm.com>
    
    Asynchronous event for BlockPull completion
    When an operation started by virDomainBlockPullAll completes (either with
    success or with failure), raise an event to indicate the final status.  This
    allows an API user to avoid polling on virDomainBlockPullInfo if they would
    prefer to use the event mechanism.
    
    * daemon/remote.c: Dispatch events to client
    * include/libvirt/libvirt.h.in: Define event ID and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle the new event
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for block_stream completion and emit a libvirt block pull event
    * src/remote/remote_driver.c: Receive and dispatch events to application
    * src/remote/remote_protocol.x: Wire protocol definition for the event
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for BLOCK_STREAM_COMPLETED event
    from QEMU monitor
    
    
    
2011-06-15 Adam Litke  <agl@us.ibm.com>
    
    Enable virDomainBlockPull in the python API.
    virDomainBlockPullAll and virDomainBlockPullAbort are handled automatically.
    virDomainBlockPull and virDomainBlockPullInfo require manual overrides since
    they return a custom type.
    
    * python/generator.py: reenable bindings for this entry point
    * python/libvirt-override-api.xml python/libvirt-override.c:
    manual overrides
    
    Acked-by: Daniel P. Berrange <berrange@redhat.com>
    
    
2011-06-15 Adam Litke  <agl@us.ibm.com>
    
    Add new API virDomainBlockPull* to headers
    Set up the types for the block pull functions and insert them into the
    virDriver structure definition.  Symbols are exported in this patch to prevent
    documentation compile failures.
    
    * include/libvirt/libvirt.h.in: new API
    * src/driver.h: add the new entry to the driver structure
    * python/generator.py: fix compiler errors, the actual python bindings are
    implemented later
    * src/libvirt_public.syms: export symbols
    
    
    
2011-06-14 Minoru Usui  <usui@mxm.nes.nec.co.jp>
    
    virNodeGetMemoryStats: Expose new API
    
    
2011-06-14 Minoru Usui  <usui@mxm.nes.nec.co.jp>
    
    virNodeGetCPUStats: Expose new API
    
    
2011-06-14 Lai Jiangshan  <laijs@cn.fujitsu.com>
    
    send-key: Defining the public API
    Add public virDomainSendKey() and enum libvirt_keycode_set
    for the @codeset.
    
    Python version of virDomainSendKey() has not been implemented yet,
    it will be done soon.
    
    
    
2011-06-13 Hu Tao  <hutao@cn.fujitsu.com>
    
    Deprecate several CURRENT/LIVE/CONFIG enums
    This patch deprecates following enums:
    
    VIR_DOMAIN_MEM_CURRENT
    VIR_DOMAIN_MEM_LIVE
    VIR_DOMAIN_MEM_CONFIG
    
    VIR_DOMAIN_VCPU_LIVE
    VIR_DOMAIN_VCPU_CONFIG
    
    VIR_DOMAIN_DEVICE_MODIFY_CURRENT
    VIR_DOMAIN_DEVICE_MODIFY_LIVE
    VIR_DOMAIN_DEVICE_MODIFY_CONFIG
    
    And modify internal codes to use virDomainModificationImpact.
    
    
2011-06-08 Eric Blake  <eblake@redhat.com>
    
    python: avoid unlikely sign extension bug
    Detected by Coverity.  cpumap was allocated with a value of
    (unsigned short)*(int), which is an int computation, and then
    promotes to size_t.  On a 64-bit platform, this fails if bit
    32 of the product is set (because of sign extension giving
    a HUGE value to malloc), even though a naive programmer would
    assume that since the first value is unsigned, the product
    is also unsigned and at most 4GB would be allocated.
    
    Won't bite in practice (the product should never be that large),
    but worth using the right types to begin with, so that we are
    now computing (unsigned short)*(size_t).
    
    * python/libvirt-override.c (libvirt_virDomainGetVcpus): Use
    correct type.
    
    
2011-05-29 Daniel P. Berrange  <berrange@redhat.com>
    
    Introduce a new event emitted when a virtualization failure occurs
    This introduces a new domain
    
    VIR_DOMAIN_EVENT_ID_CONTROL_ERROR
    
    Which uses the existing generic callback
    
    typedef void (*virConnectDomainEventGenericCallback)(virConnectPtr conn,
    virDomainPtr dom,
    void *opaque);
    
    This event is intended to be emitted when there is a failure in
    some part of the domain virtualization system. Whether the domain
    continues to run/exist after the failure is an implementation
    detail specific to the hypervisor.
    
    The idea is that with some types of failure, hypervisors may
    prefer to leave the domain running in a "degraded" mode of
    operation. For example, if something goes wrong with the QEMU
    monitor, it is possible to leave the guest OS running quite
    happily. The mgmt app will simply loose the ability todo various
    tasks. The mgmt app can then choose how/when to deal with the
    failure that occured.
    * daemon/remote.c: Dispatch of new event
    * examples/domain-events/events-c/event-test.c: Demo catch
    of event
    * include/libvirt/libvirt.h.in: Define event ID and callback
    * src/conf/domain_event.c, src/conf/domain_event.h: Internal
    event handling
    * src/remote/remote_driver.c: Receipt of new event from daemon
    * src/remote/remote_protocol.x: Wire protocol for new event
    * src/remote_protocol-structs: add new event for checks
    
    
2011-05-29 Eric Blake  <eblake@redhat.com>
    
    sched: introduce virDomainGetSchedulerParametersFlags
    If we can choose live or config when setting, then we need to
    be able to choose which one we are querying.
    
    Also, make the documentation clear that set must use a non-empty
    subset (some of the hypervisors fail if params is NULL).
    
    * include/libvirt/libvirt.h.in
    (virDomainGetSchedulerParametersFlags): New prototype.
    * src/libvirt.c (virDomainGetSchedulerParametersFlags): Implement
    it.
    * src/libvirt_public.syms: Export it.
    * python/generator.py (skip_impl): Don't auto-generate.
    * src/driver.h (virDrvDomainGetSchedulerParametersFlags): New
    callback.
    
    
2011-05-29 Eric Blake  <eblake@redhat.com>
    
    libvirt.h: avoid regression, and document preferred name
    Commit 824dcaff was a regression (thankfully unreleased) for any
    client code that used 'struct _virSchedParameter' directly rather
    than the preferred virSchedParameter typedef.  Adding a #define
    avoids even that API change, while rearranging the file makes it
    clear what the old vs. new API is.
    
    * include/libvirt/libvirt.h.in: Rearrange older names to the
    bottom and improve documentation on preferred names.
    (virDomainGetSchedulerParameters, virDomainSetSchedulerParameters)
    (virDomainSetSchedulerParametersFlags)
    (virDomainSetBlkioParameters, virDomainGetBlkioParameters)
    (virDomainSetMemoryParameters, virDomainGetMemoryParameters):
    Use newer type names.
    * python/libvirt-override.c: Adjust code generation to cope.
    Suggested by Daniel P. Berrange.
    
    
2011-05-24 Michal Privoznik  <mprivozn@redhat.com>
    
    python: Don't free must-not-free variables
    py_str() function call PyString_AsString(). As written in documentation,
    the caller must not free the returned value, because it points to some
    internal structures.
    
    
2011-05-23 Michal Privoznik  <mprivozn@redhat.com>
    
    python: Fix typo in bindings
    This typo caused a bug in which we wanted to free() invalid pointer.
    
    
2011-05-18 Eric Blake  <eblake@redhat.com>
    
    libvirt.h: consolidate typed parameter handling
    The new type is identical to the three old types that it replaces,
    and by creating a common type, this allows future patches to share
    common code that manipulates typed parameters.
    
    This change is backwards-compatible in API (recompilation works
    without any edits) and ABI (an older client that has not been
    recompiled uses the same layout) for code using only public
    names; only code using private names (those beginning with _)
    will have to adapt.
    
    * include/libvirt/libvirt.h.in (virTypedParameterType)
    (VIR_TYPED_PARAM_FIELD_LENGTH, _virTypedParameter): New enum,
    macro, and type.
    (virSchedParameter, virBlkioParameter, virMemoryParameter):
    Rewrite in terms of a common type, while keeping all old public
    names for backwards compatibility.
    (struct _virSchedParameter, struct _virBlkioParameter)
    (struct _virMemoryParameter): Delete - these are private names.
    * python/generator.py (enum): Cope with the refactoring.
    
    
2011-05-17 Hu Tao  <hutao@cn.fujitsu.com>
    
    introduce virDomainSetSchedulerParametersFlags
    This new function allows aditional flags to be passed into from
    the virsh command line.
    
    
2011-05-16 Jiri Denemark  <jdenemar@redhat.com>
    
    virDomainGetState public API
    This API is supposed to replace virDomainGetInfo when the only purpose
    of calling it is getting current domain status.
    
    
2011-03-14 Jiri Denemark  <jdenemar@redhat.com>
    
    python: Use hardcoded python path in libvirt.py
    This partially reverts (and fixes that part in a different way) commit
    e4384459c93e3e786aa483c7f077d1d22148f689, which replaced
    ``/usr/bin/python'' with ``/usr/bin/env python'' in all examples or
    scripts used during build to generate other files.
    
    However, python bindings module is compiled and linked against a
    specific python discovered or explicitly provided in configure phase.
    Thus libvirt.py, which is generated and installed into the system,
    should use the same python binary for which the module has been built.
    
    The hunk in Makefile.am replaces $(srcdir) with $(PYTHON), which might
    seem wrong but it is not. generator.py didn't use any of its command
    line arguments so passing $(srcdir) to it was redundant.
    
    
2011-03-11 Gui Jianfeng  <guijianfeng@cn.fujitsu.com>
    
    libvirt: add virDomain{Get,Set}BlkioParameters
    Add virDomainSetBlkioParameters virDomainGetBlkioParameters
    
    
    
2011-02-21 Eric Blake  <eblake@redhat.com>
    
    maint: fix grammar in error message
    * python/tests/create.py: Use correct wording.
    
    
2011-02-18 Jiri Denemark  <jdenemar@redhat.com>
    
    maint: Expand tabs in python code
    Also cfg.mk is tweaked to force this for all future changes to *.py
    files.
    
    
2011-01-10 Cole Robinson  <crobinso@redhat.com>
    
    python: Use PyCapsule API if available
    On Fedore 14, virt-manager spews a bunch of warnings to the console:
    
    /usr/lib64/python2.7/site-packages/libvirt.py:1781: PendingDeprecationWarning: The CObject type is marked Pending Deprecation in Python 2.7.  Please use capsule objects instead.
    
    Have libvirt use the capsule API if available. I've verified this compiles
    fine on older python (2.6 in RHEL6 which doesn't have capsules), and
    virt-manager seems to function fine.
    
    
2010-11-14 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    Use python discovered through env instead of hardcoding a path
    This is more flexible regarding the location of the python binary
    but doesn't allow to pass the -u flag. The -i flag can be passed
    from inside the script using the PYTHONINSPECT env variable.
    
    This fixes a problem with the esx_vi_generator.py on FreeBSD.
    
    
2010-10-12 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    Fix several minor problems introduced by the memtune series
    Add proper documentation to the new VIR_DOMAIN_MEMORY_* macros in
    libvirt.h.in to placate apibuild.py.
    
    Mark args as unused in for libvirt_virDomain{Get,Set}MemoryParameters
    in the Python bindings and add both to the libvirtMethods array.
    
    Update remote_protocol-structs to placate make syntax-check.
    
    Undo unintended modifications in vboxDomainGetInfo.
    
    Update the function table of the VirtualBox and XenAPI drivers.
    
    
2010-10-12 Nikunj A. Dadhania  <nikunj@linux.vnet.ibm.com>
    
    Adding structure and defines for virDomainSet/GetMemoryParameters
    This patch adds a structure virMemoryParameter, it contains the name of
    the
    parameter and the type of the parameter along with a union.
    
    dv:
    + rename enums to VIR_DOMAIN_MEMORY_PARAM_*
    + remove some extraneous tabs
    
    v4:
    + Add unsigned int flags to the public api for future extensions
    
    v3:
    + Protoype for virDomainGetMemoryParameters and dummy python binding.
    
    v2:
    + Includes dummy python bindings for the library to build cleanly.
    + Define string constants like "hard_limit", etc.
    + re-order this patch.
    
    
2010-09-27 Dan Kenigsberg  <danken@redhat.com>
    
    python: drop unnecessary conn assignment
    Since 554d82a200289938d5639a782a9f12e3e2e968f0, conn is unused. Let's
    drop it - but keep the signature of the constructor for backward
    compatibility.
    
    
2010-07-23 Philipp Hahn  <hahn@univention.de>
    
    Fix SEGV on exit after domainEventDeregister()
    When the last callback is removed using domainEventDeregister(), the
    events dispatcher is deregistered from the C-library, but
    domainEventsCallbacks is still an empty list.
    On shutdown __del__() deregisters the dispatacher again, which SEGVs
    
    # You need the event-loop implementation from the Python examples;
    # give the file a name which is importable by Python.
    ln examples/domain-events/events-python/event-test.py eloop.py
    python -c 'from eloop import *
    import sys
    
    def dump(*args): print " ".join(map(str, args))
    
    virEventLoopPureStart()
    c = libvirt.open("xen:///")
    c.domainEventRegister(dump, None)
    c.domainEventDeregister(dump)
    sys.exit(0)'
    
    domainEventDeregister() needs to delete domainEventCallbacks so subsequent
    calls to __del__() and domainEventRegister() choose the right code paths.
    Setting it to None is not enough, since calling domainEventRegiser() again
    would trigger an TypeError.
    
    
    
2010-07-14 Cole Robinson  <crobinso@redhat.com>
    
    python: Fix IOErrorReasonCallback bindings
    A copy and paste error was causing us to dispatch the incorrect
    routine. Spotted by Dan Kenigsberg.
    
    
2010-07-12 Daniel P. Berrange  <berrange@redhat.com>
    
    Ensure we return the callback ID in python events binding
    A missing return statement in the python binding meant that
    the callers could not get the callback ID, and thus not be
    able to unregister event callbacks
    
    * python/libvirt-override-virConnect.py: Add missing return
    statement
    
    
2010-06-25 Daniel P. Berrange  <berrange@redhat.com>
    
    Add missing parameter in python Disk IO error callback
    The IO error callback was forgetting to pass the action
    parameter, causing a stack trace when IO errors arrive
    
    * python/libvirt-override-virConnect.py: Add missing action
    parameter in IO error callback
    
    
2010-06-18 Philipp Hahn  <hahn@univention.de>
    
    Fix description of virStorageVolGetInfo()
    Probably a copy-paste-bug in python/libvirt-override-api.xml:
    virStorageVolGetInfo() extracts information about a "storage volume",
    not the "storage pool" as virStoragePoolGetInfo() does.
    
    
    
2010-06-15 Eric Blake  <eblake@redhat.com>
    
    maint: simplify some ignore files
    * .hgignore: Delete, no longer used.
    * examples/python/.gitignore: Delete, covered globally.
    * include/.gitignore: Likewise.
    * python/tests/.gitignore: Likewise.
    * docs/schemas/.gitignore: Likewise.
    * tests/xml2sexprdata/.gitignore: Likewise.
    * tests/sexpr2xmldata/.gitignore: Likewise.
    * tests/confdata/.gitignore: Likewise.
    * tests/xencapsdata/.gitignore: Likewise.
    * tests/xmconfigdata/.gitignore: Likewise.
    * tests/xml2sexprdata/.gitignore: Likewise.
    
    
2010-05-20 Chris Lalancette  <clalance@redhat.com>
    
    Fix up the python bindings for snapshotting.
    This involved a few fixes.  To start with,
    an virDomainSnapshot object is really tied to a
    domain, not a connection, so we have to generate
    a slightly different object so that we can get
    at self._dom for the object.
    
    Next, we had to "dummy" up an override piece of
    XML with a bogus argument that the function doesn't
    actually take.  That's so that the generator places
    virDomainRevertToSnapshot underneath the correct
    class (namely, the virDomain class).
    
    Finally, we had to hand-implement the
    virDomainRevertToSnapshot implementation, ignoring the
    bogus pointer we are being passed.
    
    With all of this in place, I was able to successfully
    take a snapshot and revert to it using only the
    Python bindings.
    
    
    
2010-05-18 Jim Meyering  <meyering@redhat.com>
    
    python: don't ignore virInitialize failure in module initialization
    * python/libvirt-override.c (initlibvirtmod): Upon virInitialize
    failure, skip the Py_InitModule call.
    
    
2010-04-30 Daniel P. Berrange  <berrange@redhat.com>
    
    Add support for another explicit IO error event
    This introduces a new event type
    
    VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON
    
    This event is the same as the previous VIR_DOMAIN_ID_IO_ERROR
    event, but also includes a string describing the cause of
    the event.
    
    Thus there is a new callback definition for this event type
    
    typedef void (*virConnectDomainEventIOErrorReasonCallback)(virConnectPtr conn,
    virDomainPtr dom,
    const char *srcPath,
    const char *devAlias,
    int action,
    const char *reason,
    void *opaque);
    
    This is currently wired up to the QEMU block IO error events
    
    * daemon/remote.c: Dispatch IO error events to client
    * examples/domain-events/events-c/event-test.c: Watch for
    IO error events
    * include/libvirt/libvirt.h.in: Define new IO error event ID
    and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle IO error events
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for block IO errors and emit a libvirt IO error event
    * src/remote/remote_driver.c: Receive and dispatch IO error
    events to application
    * src/remote/remote_protocol.x: Wire protocol definition for
    IO error events
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for BLOCK_IO_ERROR event
    from QEMU monitor
    
    
2010-04-29 Daniel P. Berrange  <berrange@redhat.com>
    
    Implement python binding for virDomainGetBlockInfo
    This binds the virDomainGetBlockInfo API to python's blockInfo
    method on the domain object
    
    >>> c = libvirt.openReadOnly('qemu:///session')
    >>> d = c.lookupByName('demo')
    >>> f = d.blockInfo("/dev/loop0", 0)
    >>> print f
    [1048576000L, 104857600L, 104857600L]
    
    * python/libvirt-override-api.xml: Define override signature
    * python/generator.py: Skip C impl generator for virDomainGetBlockInfo
    * python/libvirt-override.c: Manual impl of virDomainGetBlockInfo
    
    
2010-04-29 Stefan Berger  <stefanb@us.ibm.com>
    
    nwfilter: python bindings for nwfilter
    I have primarily followed the pattern of the 'secret' driver to provide
    support for the missing python bindings for the network filter API.
    
    
2010-04-20 Philipp Hahn  <hahn@univention.de>
    
    Don't ship generated python/libvirt.? files.
    libvirt.c and libvirt.h are auto-generated files. Mentioning their names
    in *_SOURCES includes them in the distribution. During an out-of-tree
    build these shipped files are included instead of the auto-generated
    version, potentially breaking the build (as it happend in 0.8.0, because
    the shipped libvirt.h was missing the declaration for
    'libvirt_virDomainUpdateDeviceFlags')
    
    Use the nodist_*_SOURCES automake variable instead.
    
    
    
2010-04-20 Daniel P. Berrange  <berrange@redhat.com>
    
    Fixup python binding for virDomainSnapshot APIs
    The generator code was totally wrong for the virDomainSnapshot
    APIs, not generating the wrapper class, and giving methods the
    wrong names
    
    * generator.py: Set metadata for virDomainSnapshot type & APIs
    * libvirt-override-api.xml, libvirt-override.c: Hand-code the
    virDomainSnapshotListNames glue layer
    
    
2010-04-09 Daniel P. Berrange  <berrange@redhat.com>
    
    More event callback fixes
    In a couple of cases typos meant we were firing the wrong type
    of event. In the python code my previous commit accidentally
    missed some chunks of the code.
    
    * python/libvirt-override-virConnect.py: Add missing python glue
    accidentally left out of previous commit
    * src/conf/domain_event.c, src/qemu/qemu_monitor_json.c: Fix typos
    in event name / method name to invoke
    
    
2010-04-08 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix up python bindings for new event callbacks
    The generator was disabled for the new event callbacks, since they
    need to be hand written. This patch  adds the C and python glue to
    expose the new APIs in the python binding. The python example
    program is extended to demonstrate of the code
    
    * python/libvirt-override.c: Registration and dispatch of events
    at the C layer
    * python/libvirt-override-virConnect.py: Python glue for events
    * examples/domain-events/events-python/event-test.py: Demo use
    of new event callbacks
    
    
2010-04-05 Chris Lalancette  <clalance@redhat.com>
    
    Snapshot API framework.
    
    
2010-03-26 Stefan Berger  <stefanb@us.ibm.com>
    
    Core driver implementation with ebtables support
    This patch implements the core driver and provides
    - management functionality for managing the filter XMLs
    - compiling the internal filter representation into ebtables rules
    - applying ebtables rules on a network (tap,macvtap) interface
    - tearing down ebtables rules that were applied on behalf of an
    interface
    - updating of filters while VMs are running and causing the firewalls to
    be rebuilt
    - other bits and pieces
    
    
    
2010-03-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Add domain events for graphics network clients
    This introduces a new event type
    
    VIR_DOMAIN_EVENT_ID_GRAPHICS
    
    The same event can be emitted in 3 scenarios
    
    typedef enum {
    VIR_DOMAIN_EVENT_GRAPHICS_CONNECT = 0,
    VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE,
    VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT,
    } virDomainEventGraphicsPhase;
    
    Connect/disconnect are triggered at socket accept/close.
    The initialize phase is immediately after the protocol
    setup and authentication has completed. ie when the
    client is authorized and about to start interacting with
    the graphical desktop
    
    This event comes with *a lot* of potential information
    
    - IP address, port & address family of client
    - IP address, port & address family of server
    - Authentication scheme (arbitrary string)
    - Authenticated subject identity. A subject may have
    multiple identities with some authentication schemes.
    For example, vencrypt+sasl results in a x509dname
    and saslUsername identities.
    
    This results in a very complicated callback :-(
    
    typedef enum {
    VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4,
    VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6,
    } virDomainEventGraphicsAddressType;
    
    struct _virDomainEventGraphicsAddress {
    int family;
    const char *node;
    const char *service;
    };
    typedef struct _virDomainEventGraphicsAddress virDomainEventGraphicsAddress;
    typedef virDomainEventGraphicsAddress *virDomainEventGraphicsAddressPtr;
    
    struct _virDomainEventGraphicsSubject {
    int nidentity;
    struct {
    const char *type;
    const char *name;
    } *identities;
    };
    typedef struct _virDomainEventGraphicsSubject virDomainEventGraphicsSubject;
    typedef virDomainEventGraphicsSubject *virDomainEventGraphicsSubjectPtr;
    
    typedef void (*virConnectDomainEventGraphicsCallback)(virConnectPtr conn,
    virDomainPtr dom,
    int phase,
    virDomainEventGraphicsAddressPtr local,
    virDomainEventGraphicsAddressPtr remote,
    const char *authScheme,
    virDomainEventGraphicsSubjectPtr subject,
    void *opaque);
    
    The wire protocol is similarly complex
    
    struct remote_domain_event_graphics_address {
    int family;
    remote_nonnull_string node;
    remote_nonnull_string service;
    };
    
    const REMOTE_DOMAIN_EVENT_GRAPHICS_IDENTITY_MAX = 20;
    
    struct remote_domain_event_graphics_identity {
    remote_nonnull_string type;
    remote_nonnull_string name;
    };
    
    struct remote_domain_event_graphics_msg {
    remote_nonnull_domain dom;
    int phase;
    remote_domain_event_graphics_address local;
    remote_domain_event_graphics_address remote;
    remote_nonnull_string authScheme;
    remote_domain_event_graphics_identity subject<REMOTE_DOMAIN_EVENT_GRAPHICS_IDENTITY_MAX>;
    };
    
    This is currently implemented in QEMU for the VNC graphics
    protocol, but designed to be usable with SPICE graphics in
    the future too.
    
    * daemon/remote.c: Dispatch graphics events to client
    * examples/domain-events/events-c/event-test.c: Watch for
    graphics events
    * include/libvirt/libvirt.h.in: Define new graphics event ID
    and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle graphics events
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for VNC events and emit a libvirt graphics event
    * src/remote/remote_driver.c: Receive and dispatch graphics
    events to application
    * src/remote/remote_protocol.x: Wire protocol definition for
    graphics events
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for VNC_CONNECTED,
    VNC_INITIALIZED & VNC_DISCONNETED events from QEMU monitor
    
    
2010-03-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Add support for an explicit IO error event
    This introduces a new event type
    
    VIR_DOMAIN_EVENT_ID_IO_ERROR
    
    This event includes the action that is about to be taken
    as a result of the watchdog triggering
    
    typedef enum {
    VIR_DOMAIN_EVENT_IO_ERROR_NONE = 0,
    VIR_DOMAIN_EVENT_IO_ERROR_PAUSE,
    VIR_DOMAIN_EVENT_IO_ERROR_REPORT,
    } virDomainEventIOErrorAction;
    
    In addition it has the source path of the disk that had the
    error and its unique device alias. It does not include the
    target device name (/dev/sda), since this would preclude
    triggering IO errors from other file backed devices (eg
    serial ports connected to a file)
    
    Thus there is a new callback definition for this event type
    
    typedef void (*virConnectDomainEventIOErrorCallback)(virConnectPtr conn,
    virDomainPtr dom,
    const char *srcPath,
    const char *devAlias,
    int action,
    void *opaque);
    
    This is currently wired up to the QEMU block IO error events
    
    * daemon/remote.c: Dispatch IO error events to client
    * examples/domain-events/events-c/event-test.c: Watch for
    IO error events
    * include/libvirt/libvirt.h.in: Define new IO error event ID
    and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle IO error events
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for block IO errors and emit a libvirt IO error event
    * src/remote/remote_driver.c: Receive and dispatch IO error
    events to application
    * src/remote/remote_protocol.x: Wire protocol definition for
    IO error events
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for BLOCK_IO_ERROR event
    from QEMU monitor
    
    
2010-03-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Add support for an explicit watchdog event
    This introduces a new event type
    
    VIR_DOMAIN_EVENT_ID_WATCHDOG
    
    This event includes the action that is about to be taken
    as a result of the watchdog triggering
    
    typedef enum {
    VIR_DOMAIN_EVENT_WATCHDOG_NONE = 0,
    VIR_DOMAIN_EVENT_WATCHDOG_PAUSE,
    VIR_DOMAIN_EVENT_WATCHDOG_RESET,
    VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF,
    VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN,
    VIR_DOMAIN_EVENT_WATCHDOG_DEBUG,
    } virDomainEventWatchdogAction;
    
    Thus there is a new callback definition for this event type
    
    typedef void (*virConnectDomainEventWatchdogCallback)(virConnectPtr conn,
    virDomainPtr dom,
    int action,
    void *opaque);
    
    * daemon/remote.c: Dispatch watchdog events to client
    * examples/domain-events/events-c/event-test.c: Watch for
    watchdog events
    * include/libvirt/libvirt.h.in: Define new watchdg event ID
    and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle watchdog events
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for watchdogs and emit a libvirt watchdog event
    * src/remote/remote_driver.c: Receive and dispatch watchdog
    events to application
    * src/remote/remote_protocol.x: Wire protocol definition for
    watchdog events
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for WATCHDOG event
    from QEMU monitor
    
    
2010-03-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Add support for an explicit  RTC change event
    This introduces a new event type
    
    VIR_DOMAIN_EVENT_ID_RTC_CHANGE
    
    This event includes the new UTC offset measured in seconds.
    Thus there is a new callback definition for this event type
    
    typedef void (*virConnectDomainEventRTCChangeCallback)(virConnectPtr conn,
    virDomainPtr dom,
    long long utcoffset,
    void *opaque);
    
    If the guest XML configuration for the <clock> is set to
    offset='variable', then the XML will automatically be
    updated with the new UTC offset value. This ensures that
    during migration/save/restore the new offset is preserved.
    
    * daemon/remote.c: Dispatch RTC change events to client
    * examples/domain-events/events-c/event-test.c: Watch for
    RTC change events
    * include/libvirt/libvirt.h.in: Define new RTC change event ID
    and callback signature
    * src/conf/domain_event.c, src/conf/domain_event.h,
    src/libvirt_private.syms: Extend API to handle RTC change events
    * src/qemu/qemu_driver.c: Connect to the QEMU monitor event
    for RTC changes and emit a libvirt RTC change event
    * src/remote/remote_driver.c: Receive and dispatch RTC change
    events to application
    * src/remote/remote_protocol.x: Wire protocol definition for
    RTC change events
    * src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
    src/qemu/qemu_monitor_json.c: Watch for RTC_CHANGE event
    from QEMU monitor
    
    
2010-03-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Introduce a new public API for domain events
    The current API for domain events has a number of problems
    
    - Only allows for domain lifecycle change events
    - Does not allow the same callback to be registered multiple times
    - Does not allow filtering of events to a specific domain
    
    This introduces a new more general purpose domain events API
    
    typedef enum {
    VIR_DOMAIN_EVENT_ID_LIFECYCLE = 0,       /* virConnectDomainEventCallback */
    ...more events later..
    }
    
    int virConnectDomainEventRegisterAny(virConnectPtr conn,
    virDomainPtr dom, /* Optional, to filter */
    int eventID,
    virConnectDomainEventGenericCallback cb,
    void *opaque,
    virFreeCallback freecb);
    
    int virConnectDomainEventDeregisterAny(virConnectPtr conn,
    int callbackID);
    
    Since different event types can received different data in the callback,
    the API is defined with a generic callback. Specific events will each
    have a custom signature for their callback. Thus when registering an
    event it is neccessary to cast the callback to the generic signature
    
    eg
    
    int myDomainEventCallback(virConnectPtr conn,
    virDomainPtr dom,
    int event,
    int detail,
    void *opaque)
    {
    ...
    }
    
    virConnectDomainEventRegisterAny(conn, NULL,
    VIR_DOMAIN_EVENT_ID_LIFECYCLE,
    VIR_DOMAIN_EVENT_CALLBACK(myDomainEventCallback)
    NULL, NULL);
    
    The VIR_DOMAIN_EVENT_CALLBACK() macro simply does a "bad" cast
    to the generic signature
    
    * include/libvirt/libvirt.h.in: Define new APIs for registering
    domain events
    * src/driver.h: Internal driver entry points for new events APIs
    * src/libvirt.c: Wire up public API to driver API for events APIs
    * src/libvirt_public.syms: Export new APIs
    * src/esx/esx_driver.c, src/lxc/lxc_driver.c, src/opennebula/one_driver.c,
    src/openvz/openvz_driver.c, src/phyp/phyp_driver.c,
    src/qemu/qemu_driver.c, src/remote/remote_driver.c,
    src/test/test_driver.c, src/uml/uml_driver.c,
    src/vbox/vbox_tmpl.c, src/xen/xen_driver.c,
    src/xenapi/xenapi_driver.c: Stub out new API entries
    
    
2010-03-17 Philip Hahn  <hahn@univention.de>
    
    python: Fix networkLookupByUUID
    According to:
    
    http://libvirt.org/html/libvirt-libvirt.html#virNetworkLookupByUUID
    
    virNetworkLookupByUUID() expects a virConnectPtr as its first argument,
    thus making it a method of the virConnect Python class.
    
    Currently it's a method of libvirt.virNetwork.
    
    @@ -805,13 +805,6 @@ class virNetwork:
    if ret == -1: raise libvirtError ('virNetworkGetAutostart() failed', net=self)
    return ret
    
    -    def networkLookupByUUID(self, uuid):
    -        """Try to lookup a network on the given hypervisor based on its UUID. """
    -        ret = libvirtmod.virNetworkLookupByUUID(self._o, uuid)
    -        if ret is None:raise libvirtError('virNetworkLookupByUUID() failed', net=self)
    -        __tmp = virNetwork(self, _obj=ret)
    -        return __tmp
    -
    class virInterface:
    def __init__(self, conn, _obj=None):
    self._conn = conn
    @@ -1689,6 +1682,13 @@ class virConnect:
    __tmp = virDomain(self,_obj=ret)
    return __tmp
    
    +    def networkLookupByUUID(self, uuid):
    +        """Try to lookup a network on the given hypervisor based on its UUID. """
    +        ret = libvirtmod.virNetworkLookupByUUID(self._o, uuid)
    +        if ret is None:raise libvirtError('virNetworkLookupByUUID() failed', conn=self)
    +        __tmp = virNetwork(self, _obj=ret)
    +        return __tmp
    +
    
    
2010-03-09 Eric Blake  <eblake@redhat.com>
    
    build: consistently indent preprocessor directives
    * global: patch created by running:
    for f in $(git ls-files '*.[ch]') ; do
    cppi $f > $f.t && mv $f.t $f
    done
    
    
2010-03-02 Daniel P. Berrange  <berrange@redhat.com>
    
    Introduce public API for domain async job handling
    Introduce a new public API that provides a way to get progress
    info on currently running jobs on a virDomainpPtr. APIs that
    are initially within scope of this idea are
    
    virDomainMigrate
    virDomainMigrateToURI
    virDomainSave
    virDomainRestore
    virDomainCoreDump
    
    These all take a potentially long time and benefit from monitoring.
    The virDomainJobInfo struct allows for various pieces of information
    to be reported
    
    - Percentage completion
    - Time
    - Overall data
    - Guest memory data
    - Guest disk/file data
    
    * include/libvirt/libvirt.h.in: Add virDomainGetJobInfo
    * python/generator.py, python/libvirt-override-api.xml,
    python/libvirt-override.c: Override for virDomainGetJobInfo API
    * python/typewrappers.c, python/typewrappers.h: Introduce wrapper
    for unsigned long long type
    
    
2010-02-17 Cole Robinson  <crobinso@redhat.com>
    
    python: Actually add virConnectGetVersion to generated bindings
    The recent commit to implement a python version of this function
    didn't drop an explicit 'ignore' check in the generator, so this
    never ended up in the bindings.
    
    
2010-02-16 Jim Meyering  <meyering@redhat.com>
    
    libvirt-override.c: avoid a leak upon call with invalid argument
    * python/libvirt-override.c (libvirt_virConnectBaselineCPU): Don't leak
    the xmlcpus buffer upon encountering a non-string list element.
    
    
2010-02-12 Jiri Denemark  <jdenemar@redhat.com>
    
    virConnectBaselineCPU public API
    
    
2010-01-22 Taizo ITO  <taizo.ito@hde.co.jp>
    
    Add virConnectGetVersion Python API
    adds a new python API call for retrieving the running
    hypervisor version used by a connection: virConnectGetVersion
    
    * python/generator.py: skip virConnectGetVersion from autogenerated
    * python/libvirt-override-api.xml python/libvirt-override.c: define
    direct native bindings
    
    
2010-01-18 Jim Meyering  <meyering@redhat.com>
    
    gnulib added a new syntax-check test: use $(VAR), not @VAR@
    The latter is not officially "wrong", but *is* terribly anachronistic.
    I think automake documentation or comments call that syntax obsolescent.
    * cfg.mk (_makefile_at_at_check_exceptions): Exempt @SCHEMADIR@
    and @SYSCONFDIR@ uses -- there are no Makefile variables for those.
    * docs/Makefile.am: Use $(INSTALL), not @INSTALL@.
    * examples/dominfo/Makefile.am: Similar.
    * examples/domsuspend/Makefile.am: Similar.
    * proxy/Makefile.am: Similar.
    * python/Makefile.am: Similar.
    * python/tests/Makefile.am: Similar.
    * src/Makefile.am: Similar.
    * tests/Makefile.am: Similar.
    
    
2010-01-06 Diego Elio Pettenò  <flameeyes@gmail.com>
    
    Disable building of static Python module
    * python/Makefile.am: python modules are loaded at runtime so the static
    version is not needed, avoid building it
    
    
2009-12-20 Adam Litke  <agl@us.ibm.com>
    
    python: Add python bindings for virDomainMemoryStats
    Enable virDomainMemoryStats in the python API.  dom.memoryStats() will return a
    dictionary containing the supported statistics.  A dictionary is required
    because the meaining of each quantity cannot be inferred from its index in a
    list.
    
    * python/generator.py: reenable bindings for this entry point
    * python/libvirt-override-api.xml python/libvirt-override.c: the
    generator can't handle this new function, add the new binding,
    and the XML description
    
    
2009-12-20 Adam Litke  <agl@us.ibm.com>
    
    Add new API virDomainMemoryStats to header and drivers
    Set up the types for the domainMemoryStats function and insert it into the
    virDriver structure definition.  Because of static initializers, update
    every driver and set the new field to NULL.
    
    * include/libvirt/libvirt.h.in: new API
    * src/driver.h src/*/*_driver.c src/vbox/vbox_tmpl.c: add the new
    entry to the driver structure
    * python/generator.py: fix compiler errors, the actual python binding is
    implemented later
    
    
2009-12-14 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    Fix install location for Python bindings
    Commit 66137344feb488ea87b0d92f3c03844d9a7a7786 changed the Python detection
    mechanism in configure to use AM_PATH_PYTHON. This results in a changed
    install location for the Python bindings, at least on Fedora 12 64bit systems.
    
    Before this commit libvirt.py and libvirtmod.so were installed to
    
    /usr/lib64/python2.6/site-packages
    
    After this commit they are installed to
    
    /usr/lib/python2.6/site-packages
    
    Mixed Python packages (containing *.py and *.so files) should be installed to
    the pyexecdir directory detected by AM_PATH_PYTHON.
    
    This restores the install location from before the AM_PATH_PYTHON commit.
    
    * configure.in: remove unnecessary pythondir export
    * python/Makefile.am: switch from pythondir to pyexecdir
    
    
2009-12-08 Matthias Bolte  <matthias.bolte@googlemail.com>
    
    Use AM_PATH_PYTHON and python-config to detect Python configuration
    Using AM_PATH_PYTHON solves the site-packages directory problem. At least
    in Ubuntu with Python 2.6 and later site-packages is renamed to dist-packages
    and site-packages is not part of sys.path anymore. So installing the libvirt
    Python bindings to site-packages renders them unusable, because they can be
    imported from there without manually including site-packages into sys.path.
    
    AM_PATH_PYTHON detects the correct site-packages/dist-packages directory.
    
    python-config --includes gives the correct include path for the Python header
    files. The old probing code stays there as fallback mechanism.
    
    * configure.in: use AM_PATH_PYTHON and python-config
    * python/Makefile.am: remove -I because PYTHON_INCLUDES contains it now
    
    
2009-11-26 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix threading problems in python bindings
    * libvirt-override.c: Add many missing calls to allow threading
    when entering C code, otherwise python blocks & then deadlocks
    when we have an async event to dispatch back into python code.
    Fix return value check for virDomainPinVcpu binding.
    
    
2009-11-20 Cole Robinson  <crobinso@redhat.com>
    
    python: Actually implement list*Interfaces bindings
    * python/generator.py python/libvirt-override-api.xml
    python/libvirt-override.c: implement the bindings for
    virConnectListInterfaces() and virConnectListDefinedInterfaces()
    
    
2009-11-12 Cole Robinson  <crobinso@redhat.com>
    
    Add virConnectGetLibvirtVersion API
    There is currently no way to determine the libvirt version of a remote
    libvirtd we are connected to. This is a useful piece of data to enable
    feature detection.
    
    
2009-11-03 Dan Kenigsberg  <danken@redhat.com>
    
    give up python interpreter lock before calling cb
    suggested by danpb on irc, patch by danken fixed for proper C syntax
    
    * python/libvirt-override.c: on event callback release the python
    interpreter lock and take it again when coming back so that the
    callback can reinvoke libvirt.
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Add a newline after custom classes
    In the generated bindings, custom classes are squashed against the following
    class, which hurts readability.
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Fix generated virInterface method names
    A mistake in the generator was causing virInterface methods to be generated
    with unpredicatable names ('ceUndefine', instead of just 'undefine'). This
    fixes the method names to match existing convention.
    
    Does anyone care if we are breaking API compat? My guess is that no one is
    using the python interface bindings yet.
    
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Use a pure python implementation of 'vir*GetConnect'
    The API docs explictly warn that we shouldn't use the C vir*GetConnect calls
    in bindings: doing so can close the internal connection pointer and cause
    things to get screwy. Implement these calls in python.
    
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Don't generate bindings for vir*Ref
    They are only for use in implementing the bindings, so shouldn't be
    exposed to regular API users.
    
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Don't generate conflicting conn.createXML functions.
    A special case in the generator wasn't doing its job, and duplicate
    conn.createXML functions were being generated. The bindings diff is:
    
    @@ -1079,14 +1079,6 @@ class virConnect:
    return __tmp
    
    def createXML(self, xmlDesc, flags):
    -        """Create a new device on the VM host machine, for example,
    -           virtual HBAs created using vport_create. """
    -        ret = libvirtmod.virNodeDeviceCreateXML(self._o, xmlDesc, flags)
    -        if ret is None:raise libvirtError('virNodeDeviceCreateXML() failed', conn=self)
    -        __tmp = virNodeDevice(self, _obj=ret)
    -        return __tmp
    -
    -    def createXML(self, xmlDesc, flags):
    """Launch a new guest domain, based on an XML description
    similar to the one returned by virDomainGetXMLDesc() This
    function may requires privileged access to the hypervisor.
    @@ -1327,6 +1319,14 @@ class virConnect:
    __tmp = virNetwork(self, _obj=ret)
    return __tmp
    
    +    def nodeDeviceCreateXML(self, xmlDesc, flags):
    +        """Create a new device on the VM host machine, for example,
    +           virtual HBAs created using vport_create. """
    +        ret = libvirtmod.virNodeDeviceCreateXML(self._o, xmlDesc, flags)
    +        if ret is None:raise libvirtError('virNodeDeviceCreateXML() failed', conn=self)
    +        __tmp = virNodeDevice(self, _obj=ret)
    +        return __tmp
    +
    def nodeDeviceLookupByName(self, name):
    """Lookup a node device by its name. """
    ret = libvirtmod.virNodeDeviceLookupByName(self._o, name)
    
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Remove use of xmllib in generator.py
    xmllib has been deprecated since python 2.0, and running the generator throws
    a warning. Move to using xml.sax
    
    
    
2009-10-05 Cole Robinson  <crobinso@redhat.com>
    
    python: Remove FastParser from generator.
    FastParser uses sgmlop, a non-standard python module meant as a replacement
    for xmllib (which is deprecated since python 2.0). Fedora doesn't even carry
    this module, and the generator doesn't have high performance requirements, so
    just rip the code out.
    
    
    
2009-09-29 Daniel P. Berrange  <berrange@redhat.com>
    
    Add public API definition for data stream handling
    * include/libvirt/libvirt.h.in: Public API contract for
    virStreamPtr object
    * src/libvirt_public.syms: Export data stream APIs
    * src/libvirt_private.syms: Export internal helper APIs
    * src/libvirt.c: Data stream API driver dispatch
    * src/datatypes.h, src/datatypes.c: Internal helpers for virStreamPtr
    object
    * src/driver.h: Define internal driver API for streams
    * .x-sc_avoid_write: Ignore src/libvirt.c because it trips
    up on comments including write()
    * python/Makefile.am: Add libvirt-override-virStream.py
    * python/generator.py: Add rules for virStreamPtr class
    * python/typewrappers.h, python/typewrappers.c: Wrapper
    for virStreamPtr
    * docs/libvirt-api.xml, docs/libvirt-refs.xml: Regenerate
    with new APIs
    
    
2009-09-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix API doc extractor to stop munging comment formatting
    The python method help docs are copied across from the C
    funtion comments, but in the process all line breaks and
    indentation was being lost. This made the resulting text
    and code examples completely unreadable. Both the API
    doc extractor and the python generator were destroying
    whitespace & this fixes them to preserve it exactly.
    
    * docs/apibuild.py: Preserve all whitespace when extracting
    function comments. Print function comment inside a <![CDATA[
    section to fully preserve all whitespace. Look for the
    word 'returns' to describe return values, instead of 'return'
    to avoid getting confused with code examples including the
    C 'return' statement.
    * python/generator.py: Preserve all whitespace when printing
    function help docs
    * src/libvirt.c: Change any return parameter indicated by
    'return' to be 'returns', to avoid confusing the API extractor
    * docs/libvirt-api.xml: Re-build for fixed descriptions
    
    
2009-09-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Misc syntax-check fixes
    
    
2009-09-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Re-arrange python generator to make it clear what's auto-generated
    * README: New file describing what each file is used for
    * livvirt-override.c, libvirt-override.py, libvirt-override-api.xml,
    libvirt-override-virConnect.py: Manually written code overriding
    the generator
    * typewrappers.c, typewrappers.h: Data type wrappers
    * generator.py: Automatically pre-prend contents of libvirt-override.py
    to generated libvirt.py. Output into libvirt.py directly instead of
    libvirtclass.py. Don't generate libvirtclass.txt at all. Write C
    files into libvirt.c/.h directly
    * Makefile.am: Remove rule for creating libvirt.py from libvirt-override.py
    and libvirtclass.py, since generator.py does it directly
    
    
2009-09-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Add usage type/id as a public API property of virSecret
    * include/libvirt/libvirt.h, include/libvirt/libvirt.h.in: Add
    virSecretGetUsageType, virSecretGetUsageID and virLookupSecretByUsage
    * python/generator.py: Mark virSecretGetUsageType, virSecretGetUsageID
    as not throwing exceptions
    * qemud/remote.c: Implement dispatch for virLookupSecretByUsage
    * qemud/remote_protocol.x: Add usage type & ID as attributes of
    remote_nonnull_secret. Add RPC calls for new public APIs
    * qemud/remote_dispatch_args.h, qemud/remote_dispatch_prototypes.h,
    qemud/remote_dispatch_ret.h, qemud/remote_dispatch_table.h,
    qemud/remote_protocol.c, qemud/remote_protocol.h: Re-generate
    * src/datatypes.c, src/datatypes.h: Add usageType and usageID as
    properties of virSecretPtr
    * src/driver.h: Add virLookupSecretByUsage driver entry point
    * src/libvirt.c: Implement virSecretGetUsageType, virSecretGetUsageID
    and virLookupSecretByUsage
    * src/libvirt_public.syms: Export virSecretGetUsageType, virSecretGetUsageID
    and virLookupSecretByUsage
    * src/remote_internal.c: Implement virLookupSecretByUsage entry
    * src/secret_conf.c, src/secret_conf.h: Remove the
    virSecretUsageType enum, now in public API. Make volume
    path mandatory when parsing XML
    * src/secret_driver.c: Enforce usage uniqueness when defining secrets.
    Implement virSecretLookupByUsage api method
    * src/virsh.c: Include usage for secret-list command
    
    
2009-09-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix UUID handling in secrets/storage encryption APIs
    Convert all the secret/storage encryption APIs / wire format to
    handle UUIDs in raw format instead of non-canonical printable
    format. Guarentees data format correctness.
    
    * docs/schemas/storageencryption.rng: Make UUID mandatory for a secret
    and validate fully
    * docs/schemas/secret.rng: Fully validate UUID
    * include/libvirt/libvirt.h, include/libvirt/libvirt.h.in, Add
    virSecretLookupByUUID and virSecretGetUUID. Make
    virSecretGetUUIDString follow normal API design pattern
    * python/generator.py: Skip generation of virSecretGetUUID,
    virSecretGetUUIDString and virSecretLookupByUUID
    * python/libvir.c, python/libvirt-python-api.xml: Manual impl
    of virSecretGetUUID,virSecretGetUUIDString and virSecretLookupByUUID
    * qemud/remote.c: s/virSecretLookupByUUIDString/virSecretLookupByUUID/
    Fix get_nonnull_secret/make_nonnull_secret to use unsigned char
    * qemud/remote_protocol.x: Fix remote_nonnull_secret to use a
    remote_uuid instead of remote_nonnull_string for UUID field.
    Rename REMOTE_PROC_SECRET_LOOKUP_BY_UUID_STRING to
    REMOTE_PROC_SECRET_LOOKUP_BY_UUID_STRING and make it take an
    remote_uuid  value
    * qemud/remote_dispatch_args.h, qemud/remote_dispatch_prototypes.h,
    qemud/remote_dispatch_ret.h, qemud/remote_dispatch_table.h,
    qemud/remote_protocol.c, qemud/remote_protocol.h: Re-generate
    * src/datatypes.h, src/datatypes.c: Store UUID in raw format instead
    of printable. Change virGetSecret to use raw format UUID
    * src/driver.h: Rename virDrvSecretLookupByUUIDString to
    virDrvSecretLookupByUUID and use raw format UUID
    * src/libvirt.c: Add virSecretLookupByUUID and virSecretGetUUID
    and re-implement virSecretLookupByUUIDString and
    virSecretGetUUIDString in terms of those
    * src/libvirt_public.syms: Add virSecretLookupByUUID and
    virSecretGetUUID
    * src/remote_internal.c: Rename remoteSecretLookupByUUIDString
    to remoteSecretLookupByUUID. Fix typo in args for
    remoteSecretDefineXML impl. Use raw UUID format for
    get_nonnull_secret and make_nonnull_secret
    * src/storage_encryption_conf.c, src/storage_encryption_conf.h:
    Storage UUID in raw format, and require it to be present in
    XML. Use UUID parser to validate.
    * secret_conf.h, secret_conf.c: Generate a UUID if none is provided.
    Storage UUID in raw format.
    * src/secret_driver.c: Adjust to deal with raw UUIDs. Save secrets
    in a filed with printable UUID, instead of base64 UUID.
    * src/virsh.c: Adjust for changed public API contract of
    virSecretGetUUIDString.
    * src/storage_Backend.c: DOn't undefine secret we just generated
    upon successful volume creation. Fix to handle raw UUIDs. Generate
    a non-clashing UUID
    * src/qemu_driver.c: Change to use lookupByUUID instead of
    lookupByUUIDString
    
    
2009-09-03 Jim Meyering  <meyering@redhat.com>
    
    python: let libvirt_virConnectDomainEventCallback indicate success
    * python/libvir.c (libvirt_virConnectDomainEventCallback): Return 0
    when successful, rather than always returning -1.
    clang flagged this function for its dead-store of "ret=0".
    Once "ret" was set to 0, it was never used, and
    the function would always return -1.
    
    
2009-09-01 Miloslav Trmač  <mitr@redhat.com>
    
    Secret manipulation API docs refresh & wire up python generator
    Sample session:
    
    >>> import libvirt
    >>> c = libvirt.open('qemu:///session')
    
    >>> c.listSecrets()
    ['12247729-47d2-a783-88ce-b329d4781cd3', 'reee', 'abc']
    
    >>> s = c.secretDefineXML("<secret ephemeral='no' private='no'>\n<description>Something for use</description>\n<volume>/foo/bar</volume>\n</secret>\n")
    
    >>> s.UUIDString()
    '340c2dfb-811b-eda8-da9e-25ccd7bfd650'
    
    >>> s.XMLDesc()
    "<secret ephemeral='no' private='no'>\n  <uuid>340c2dfb-811b-eda8-da9e-25ccd7bfd650</uuid>\n  <description>Something for use</description>\n  <volume>/foo/bar</volume>\n</secret>\n"
    
    >>> s.setValue('abc\0xx\xffx')
    0
    
    >>> s.value()
    'abc\x00xx\xffx'
    
    >>> s.undefine()
    0
    
    * python/generator.py: Add rules for virSecret APIs
    * python/libvir.c, python/libvirt-python-api.xml: Manual impl of
    virSecretSetValue, virSecretGetValue$ and virConnectListSecrets APIs
    * python/libvirt_wrap.h, python/types.c: Wrapper for virSecret objects
    * docs/libvirt-api.xml, docs/libvirt-refs.xml,
    docs/html/libvirt-virterror.html, docs/html/libvirt-libvirt.html,
    docs/devhelp/libvirt-virterror.html, docs/devhelp/libvirt-libvirt.html:
    Re-generate with 'make api'
    
    
2009-07-26 Cole Robinson  <crobinso@redhat.com>
    
    python: Raise exceptions if virDomain*Stats fail.
    The generator couldn't tell that the stats return values were pointers.
    Stick a white list in the function which tries to make this distinction.
    
    
2009-07-16 Jim Meyering  <meyering@redhat.com>
    
    remove all trailing blank lines
    by running this command:
    git ls-files -z | xargs -0 perl -pi -0777 -e 's/\n\n+$/\n/'
    This is in preparation for a more strict make syntax-check
    rule that will detect trailing blank lines.
    
    
2009-07-08 Jim Meyering  <meyering@redhat.com>
    
    remove all .cvsignore files
    
    
2009-07-06 Dan Kenigsberg  <danken@redhat.com>
    
    Fix python examples to use read-write conn
    * docs/examples/python/domstart.py python/tests/create.py:
    The two example were broken as they needed full-access connection
    but only opened read-only connections
    
    
2009-05-28 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix python domain events example & binding
    
    
2009-05-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Add virInterface  APIs to python code generator
    
    
2009-05-19 Cole Robinson  <crobinso@redhat.com>
    
    Better error reporting if 'import libvirtmod' fails
    Don't squash a possibly legitimate libvirtmod error (e.g. some from
    clashing libvirt.so versions) with 'Cannot import cygvirtmod'
    
    
2009-04-01 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix crash after calling virConnectClose
    
    
2009-04-01 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix generation of networkCreateXML and storagePoolCreateXML
    
    
2009-03-03 Jim Meyering  <meyering@redhat.com>
    
    update .gitignore and .hgignore files
    
    
2009-03-03 Daniel P. Berrange  <berrange@redhat.com>
    
    Internal driver API for sVirt support (James Morris & Dan Walsh)
    
    
2009-03-02 Daniel P. Berrange  <berrange@redhat.com>
    
    Ignore some generated autotools files in example app
    
    
2009-02-26 Daniel Veillard  <veillard@redhat.com>
    
    * python/Makefile.am: avoid a parallel make issue #472702   provided by Michael Marineau Daniel
    
    
2009-02-16 Cole Robinson  <crobinso@redhat.com>
    
    Fix building python bindings: Skip bindings for virSaveLastError and virFreeError
    
    
2009-01-20 Daniel P. Berrange  <berrange@redhat.com>
    
    Use global thread-local error for all python error reporting
    
    
2008-12-18 Daniel P. Berrange  <berrange@redhat.com>
    
    Replace __FUNCTION__ with __func__ for better portability (John Levon)
    
    
2008-12-18 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix gcc-ism in python build (John Levon)
    
    
2008-12-15 Jim Meyering  <meyering@redhat.com>
    
    syntax-check: enforce the no-cvs-keywords prohibition
    * Makefile.maint (sc_prohibit_cvs_keyword): New rule.
    Suggested by Daniel Veillard.
    The new test exposed two uses of $Date$.
    * docs/Goals: Don't use $Date$.
    * python/TODO: Likewise.
    
    
2008-11-25 Daniel P. Berrange  <berrange@redhat.com>
    
    Support domain lifecycle events for Xen (Ben Guthro & Daniel Berrange)
    
    
2008-11-24 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix python bindings events code (David Lively)
    
    
2008-11-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Python binding for node device APIs (David Lively)
    
    
2008-11-19 Daniel P. Berrange  <berrange@redhat.com>
    
    Add a virFreeCallback to event loop APIs
    
    
2008-11-19 Daniel P. Berrange  <berrange@redhat.com>
    
    Change public API for virEventAddHandle to allow multiple registrations per FD
    
    
2008-11-19 Daniel P. Berrange  <berrange@redhat.com>
    
    Add a virFreeCallback to virDomainEventRegister (from David Lively)
    
    
2008-11-17 Daniel P. Berrange  <berrange@redhat.com>
    
    Add domain events detail information
    
    
2008-11-17 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix domain events python thread safety & incorrect enum generation
    
    
2008-10-31 Daniel Veillard  <veillard@redhat.com>
    
    * python/virConnect.py: needed for events from the python bindings   by Ben Guthro daniel
    
    
2008-10-31 Daniel Veillard  <veillard@redhat.com>
    
    * python/Makefile.am python/generator.py python/libvir.c   python/libvir.py python/libvirt_wrap.h python/types.c:   adds support for events from the python bindings, also   improves the generator allowing to embbed per function   definition files, patch by Ben Guthro * examples/domain-events/events-python/event-test.py: also   adds a programming example Daniel
    
    
2008-10-23 Daniel Veillard  <veillard@redhat.com>
    
    Massive patch adding event APIs by Ben Guthro * include/libvirt/libvirt.h include/libvirt/libvirt.h.in   src/libvirt.c src/libvirt_sym.version: new libvirt event entry   points, big patch provided by Ben Guthro * Makefile.am configure.in src/driver.h src/event.c src/event.h   src/internal.h src/libvirt.c src/libvirt_sym.version src/lxc_driver.c   src/openvz_driver.c src/qemu_conf.h src/qemu_driver.c   src/remote_internal.c src/storage_backend_fs.c src/test.c   qemud/event.c qemud/event.h qemud/mdns.c qemud/qemud.c   qemud/qemud.h qemud/remote.c qemud/remote_dispatch_localvars.h   qemud/remote_dispatch_proc_switch.h qemud/remote_dispatch_prototypes.h   qemud/remote_protocol.c qemud/remote_protocol.h   qemud/remote_protocol.x proxy/Makefile.am python/generator.py:   Not much is left untouched by the patch adding the events support * docs/libvirt-api.xml docs/libvirt-refs.xml   docs/html/libvirt-libvirt.html: regenerated the docs * examples/domain-events/events-c/Makefile.am   examples/domain-events/events-c/event-test.c: a test example * AUTHORS: added Ben Guthro daniel
    
    
2008-10-17 Jim Meyering  <meyering@redhat.com>
    
    generate .gitignore files from .cvsignore ones
    * Makefile.maint (sync-vcs-ignore-files): New target.
    Prompted by a patch from James Morris.
    http://thread.gmane.org/gmane.comp.emulators.libvirt/8619/focus=8773
    Add all (now-generated) .gitignore files.
    * .gitignore: New file.
    * build-aux/.gitignore: New file.
    * docs/.gitignore: New file.
    * docs/devhelp/.gitignore: New file.
    * docs/examples/.gitignore: New file.
    * docs/examples/python/.gitignore: New file.
    * gnulib/lib/.gitignore: New file.
    * gnulib/lib/arpa/.gitignore: New file.
    * gnulib/lib/netinet/.gitignore: New file.
    * gnulib/lib/sys/.gitignore: New file.
    * gnulib/tests/.gitignore: New file.
    * include/.gitignore: New file.
    * include/libvirt/.gitignore: New file.
    * po/.gitignore: New file.
    * proxy/.gitignore: New file.
    * python/.gitignore: New file.
    * python/tests/.gitignore: New file.
    * qemud/.gitignore: New file.
    * src/.gitignore: New file.
    * tests/.gitignore: New file.
    * tests/confdata/.gitignore: New file.
    * tests/sexpr2xmldata/.gitignore: New file.
    * tests/virshdata/.gitignore: New file.
    * tests/xencapsdata/.gitignore: New file.
    * tests/xmconfigdata/.gitignore: New file.
    * tests/xml2sexprdata/.gitignore: New file.
    
    
2008-10-01 Daniel Veillard  <veillard@redhat.com>
    
    Xen interface order and fix python parallel build * src/xend_internal.c: fix ordering when parsing multiple Xen   interfaces, patch by Jim Fehlig * python/Makefile.am: fix parallel build Daniel
    
    
2008-08-22 Daniel P. Berrange  <berrange@redhat.com>
    
    Use libvirt error message for python exceptions
    
    
2008-08-12 Daniel Veillard  <veillard@redhat.com>
    
    Fix connection lookup in python storage instances * python/generator.py: patch from Cole Robinson trying to fix   problem of connection lookup when creating storage instances Daniel
    
    
2008-07-25 Daniel Veillard  <veillard@redhat.com>
    
    Skip python bindings for virDomainBlockPeek and virDomainMemoryPeek * python/generator.py: skip generation for virDomainBlockPeek and   virDomainMemoryPeek as they break the build Daniel
    
    
2008-07-09 Daniel P. Berrange  <berrange@redhat.com>
    
    Ignore JIT'd python files
    
    
2008-06-25 Daniel Veillard  <veillard@redhat.com>
    
    * python/types.c: patch from Ryan Scott to remove misplaced verbosity   when compiling in debug mode. Daniel
    
    
2008-06-11 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.py python/libvirt-python-api.xml: more python   cleanups by Cole Robinson Daniel
    
    
2008-06-10 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py python/libvir.c python/libvirt-python-api.xml:   Apply patch from Cole Robinson fixing UUIDString for python Daniel
    
    
2008-05-29 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix python code generation for storage APIs
    
    
2008-05-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Don't free C object after destroy method in python
    
    
2008-04-18 Daniel P. Berrange  <berrange@redhat.com>
    
    Python header workaround
    
    
2008-04-18 Jim Meyering  <meyering@redhat.com>
    
    Work around Python.h name-space pollution.
    * python/libvir.c (HAVE_PTHREAD_H): #undef.
    Without this, we'd get a redefinition warning.
    
    
2008-04-10 Jim Meyering  <meyering@redhat.com>
    
    convert TAB-based indentation in C sources to use only spaces
    Done using this command (also includes .c.in and .h.in files):
    for i in $(g ls-files|grep -E '\.[ch](\.in)?$'|grep -v gnulib); do
    expand -i $i > j && mv j $i;done
    
    
2008-04-10 Jim Meyering  <meyering@redhat.com>
    
    remove Vim and Emacs variable settings from C source files
    Done with these commands:
    git grep -l Local.variab|xargs \
    perl -0x3b -pi -e 's,\n+/\*\n \* vim:(.|\n)*,\n,'
    
    git grep -l Local.variab|xargs \
    perl -0x3b -pi -e 's,\n+/\*\n \* Local variables:\n(.|\n)*,\n,'
    
    
2008-04-08 Daniel Veillard  <veillard@redhat.com>
    
    Fix potential infinite loop in python generator * python/generator.py: fix an infinite loop bug Daniel
    
    
2008-03-14 Richard W.M. Jones  <rjones@redhat.com>
    
    Fix typo "informations" -> "information" (Atsushi SAKAI and Saori FUKUTA).
    
    
2008-02-29 Richard W.M. Jones  <rjones@redhat.com>
    
    Many typos fixed (Atsushi SAKAI).
    
    
2008-02-20 Daniel P. Berrange  <berrange@redhat.com>
    
    Added python binding for storage APIs
    
    
2008-02-07 Daniel Veillard  <veillard@redhat.com>
    
    Python bindings return values fixes * python/libvir.c: apply patch from Cole Robinson to provide   return values for manulally written python bindings. Daniel
    
    
2008-02-05 Jim Meyering  <meyering@redhat.com>
    
    Remove all trailing blanks; turn on the rule to detect them.
    * Makefile.cfg (local-checks-to-skip): Remove sc_trailing_blank.
    * .x-sc_trailing_blank: New file, to exempt the few binary files.
    
    
2008-01-29 Jim Meyering  <meyering@redhat.com>
    
    Enable the <config.h>-requiring test; fix violations
    Use <config.h>, not "config.h", per autoconf documentation.
    * Makefile.cfg (local-checks-to-skip) [sc_require_config_h]: Enable.
    * .x-sc_require_config_h: New file, to list exempted files.
    * Makefile.am (EXTRA_DIST): Add .x-sc_require_config_h.
    
    
2008-01-29 Jim Meyering  <meyering@redhat.com>
    
    Given code like if (foo) free (foo); remove the useless "if (foo) " part.
    Likewise, given if (foo != NULL) free (foo); remove the useless "if" test.
    
    * proxy/libvirt_proxy.c: Remove unnecessary "if" test before free.
    * python/generator.py: Likewise.
    * qemud/qemud.c: Likewise.
    * src/buf.c: Likewise.
    * src/conf.c: Likewise.
    * src/hash.c: Likewise.
    * src/iptables.c: Likewise.
    * src/libvirt.c: Likewise.
    * src/openvz_conf.c: Likewise.
    * src/qemu_conf.c: Likewise.
    * src/qemu_driver.c: Likewise.
    * src/remote_internal.c: Likewise.
    * src/test.c: Likewise.
    * src/virsh.c: Likewise.
    * src/virterror.c: Likewise.
    * src/xen_internal.c: Likewise.
    * src/xen_unified.c: Likewise.
    * src/xend_internal.c: Likewise.
    * src/xm_internal.c: Likewise.
    * src/xml.c: Likewise.
    * src/xmlrpc.c: Likewise.
    * src/xs_internal.c: Likewise.
    * tests/testutils.c: Likewise.
    * tests/xencapstest.c: Likewise.
    * tests/xmconfigtest.c: Likewise.
    
    
2008-01-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Make python generator fail build on any missing APIs
    
    
2008-01-21 Daniel P. Berrange  <berrange@redhat.com>
    
    Add missing vcpu/schedular APIs to python binding
    
    
2008-01-17 Jim Meyering  <meyering@redhat.com>
    
    Handle PyTuple_New's malloc failure.
    * python/libvir.c (libvirt_virDomainBlockStats): Handle a NULL
    return from PyTuple_New.
    (libvirt_virDomainInterfaceStats, libvirt_virGetLastError): Likewise.
    (libvirt_virConnGetLastError): Likewise.
    
    
2008-01-17 Jim Meyering  <meyering@redhat.com>
    
    Factor out some duplication.
    * python/libvir.c (VIR_PY_NONE): New macro, to encapsulate
    a common two-statement sequence.
    Replace all such 2-stmt sequences.
    
    
2007-12-11 Jim Meyering  <meyering@redhat.com>
    
    Use a variable name as sizeof argument, not a type name.
    Given code like: T *var = calloc (n, sizeof (T));
    Convert to this: T *var = calloc (n, sizeof (*var));
    This first-cut change adjusts all malloc, calloc, and
    realloc statements.
    
    The only binary differences are in remote_internal.c
    (due to the bug fix) and in xmlrpc.c (due to factorization).
    
    * python/libvir.c: As above.
    * qemud/event.c: Likewise.
    * qemud/mdns.c: Likewise.
    * qemud/qemud.c: Likewise.
    * qemud/remote.c: Likewise.
    * src/bridge.c: Likewise.
    * src/buf.c: Likewise.
    * src/conf.c: Likewise.
    * src/hash.c: Likewise.
    * src/iptables.c: Likewise.
    * src/openvz_conf.c: Likewise.
    * src/qemu_conf.c: Likewise.
    * src/qemu_driver.c: Likewise.
    * src/test.c: Likewise.
    * src/xen_internal.c: Likewise.
    * src/xen_unified.c: Likewise.
    * src/xm_internal.c: Likewise.
    * src/xml.c: Likewise.
    * tests/qemuxml2argvtest.c: Likewise.
    * src/xmlrpc.c (xmlRpcValuePtr): Likewise, and minor factorization.
    * src/remote_internal.c (remoteAuthMakeCredentials): Use the right
    type when allocating space for an array of cred _pointers_.
    
    
2007-12-07 Jim Meyering  <meyering@redhat.com>
    
    Include "config.h" in remaining non-generated files.
    * proxy/libvirt_proxy.c: Likewise.
    * python/libvir.c: Likewise.
    * python/types.c: Likewise.
    * src/event.c: Likewise.
    * src/xm_internal.c: Likewise.
    * tests/reconnect.c: Likewise.
    * tests/testutils.c: Likewise.
    
    
2007-12-07 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py python/libvir.c python/libvirt-python-api.xml:   add a python binding for virNodeGetCellsFreeMemory Daniel
    
    
2007-12-05 Daniel P. Berrange  <berrange@redhat.com>
    
    Add manual impl of virConnectOpenAuth python binding
    
    
2007-12-05 Richard W.M. Jones  <rjones@redhat.com>
    
    Wed Dec  5 13:48:00 UTC 2007 Richard W.M. Jones <rjones@redhat.com>
    * python/libvir.c, python/libvirt_wrap.h, qemud/qemud.c,
    qemud/remote.c, src/internal.h, src/openvz_conf.c,
    src/openvz_driver.c, src/proxy_internal.h, src/qemu_conf.c,
    src/qemu_driver.c, src/remote_internal.h, src/test.h, src/util.c,
    src/xen_unified.c, src/xen_unified.h, tests/nodeinfotest.c,
    tests/qemuxml2argvtest.c, tests/qemuxml2xmltest.c, tests/reconnect.c,
    tests/sexpr2xmltest.c, tests/virshtest.c, tests/xencapstest.c,
    tests/xmconfigtest.c, tests/xml2sexprtest.c:
    Change #include <> to #include "" for local includes.
    Removed many includes from src/internal.h and put them in
    the C files which actually use them.
    Removed <ansidecl.h> - unused.
    Added a comment around __func__.
    Removed a clashing redefinition of VERSION symbol.
    All limits (PATH_MAX etc) now done in src/internal.h, so we
    don't need to include those headers in other files.
    
    
2007-11-30 Richard W.M. Jones  <rjones@redhat.com>
    
    Fri Nov 30 11:04:00 GMT 2007 Richard W.M. Jones <rjones@redhat.com>
    * python/libvir.c, python/libvir.py: Make Python aware that
    the C bindings module is called cygvirtmod.dll when compiled
    by CYGWIN.
    * python/Makefile.am: Remove symlink libvirtmod.dll -> cygvirtmod.dll
    no longer necessary because of the above.
    * configure.in: Remove AM_CONDITIONAL(CYGWIN).
    
    
2007-11-29 Richard W.M. Jones  <rjones@redhat.com>
    
    Thu Nov 29 17:40:00 GMT 2007 Richard W.M. Jones <rjones@redhat.com>
    * configure.in: Added CYGWIN_EXTRA_LDFLAGS, CYGWIN_EXTRA_LIBADD,
    CYGWIN_EXTRA_PYTHON_LIBADD, CYGWIN automake conditional.
    * src/Makefile.am: Extra flags required to build DLL of libvirt
    for Cygwin.
    * python/Makefile.am: Extra flags and rule required to build
    Python module for Cygwin.
    
    
2007-11-15 Jim Meyering  <meyering@redhat.com>
    
    Make "make distcheck" work.
    * Makefile.am: Expand some "*" wildcards, and (for now) disable
    the relatively unimportant, distuninstallcheck target.
    Fix a few redirect-directly-to-target bugs.
    Add a few $(srcdir)/ prefixes and add an uninstall-local rule.
    * docs/Makefile.am: More of the same.  Split some long lines.
    * python/Makefile.am: Likewise.
    * python/tests/Makefile.am: Likewise.
    * qemud/Makefile.am: Likewise.
    * tests/Makefile.am: Remove the directories already listed in SUBDIRS.
    * docs/examples/index.py: Adapt to produce the desired changes in
    docs/examples/Makefile.am. Also, sort *.c, so results are reproducible,
    and emit a comment telling emacs and vi that the file is read-only.
    * docs/examples/Makefile.am: Regenerate.
    
    
    Author: Jim Meyering <meyering@redhat.com>
    
    
2007-09-30 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py python/libvir.c python/libvirt-python-api.xml:   provide bindings for block and interface statistics Daniel
    
    
2007-07-24 Daniel Veillard  <veillard@redhat.com>
    
    * libvirt.spec.in NEWS docs/* po/*: preparing release 0.3.1 * src/libvirt.c python/generator.py: some cleanup and warnings   from Richard W.M. Jones Daniel
    
    
2007-06-26 Richard W.M. Jones  <rjones@redhat.com>
    
    Tue Jun 26 14:40:00 BST 2007 Richard W.M. Jones <rjones@redhat.com>
    * src/remote_internal.c, python/Makefile.am: Python bindings
    fixed, and now building virConnect.getHostname and
    virConnect.getURI.  Fixed a problem which stopped
    libvirt.py from being (re-)built.  Rearranged
    python/Makefile.am to make it cleaner and clearer.
    
    
2007-06-25 Richard W.M. Jones  <rjones@redhat.com>
    
    Mon Jun 25 16:55:00 BST 2007 Richard W.M. Jones <rjones@redhat.com>
    * include/libvirt/libvirt.h.in, src/libvirt.c, src/libvirt_sym.version,
    python/generator.py: Added virDomainGetConnect and
    virNetworkGetConnect to allow us to get the "hidden"
    connection associated with each domain or network.
    
    
2007-06-15 Richard W.M. Jones  <rjones@redhat.com>
    
    Fri Jun 15 08:53:00 BST 2007 Richard W.M. Jones <rjones@redhat.com>
    * src/internal.h, src/virsh.c: Replace _N with N_ so that
    Solaris builds work (Mark Johnson).
    * src/virsh.c: Add a couple of missing error messages (Mark
    Johnson).
    * python/types.c: Fix NULL pointer deref on DEBUG build
    (Mark Johnson).
    * src/virsh.c: Spelling fix (Mark Johnson).
    
    
2007-05-29 Richard W.M. Jones  <rjones@redhat.com>
    
    +Tue May 29 15:56:00 BST 2007 Richard W.M. Jones <rjones@redhat.com> + +       * python/generator.py, python/libvir.c, python/libvir.py: +         Wrap the virGetVersion call as Python libvirt.getVersion. + +       * src/libvirt.c: Change virGetVersion so that the driver name +         is case insensitive. +
    
    
2007-04-16 Daniel P. Berrange  <berrange@redhat.com>
    
    Fixed exception reporting for domain/network operations
    
    
2007-04-10 Daniel P. Berrange  <berrange@redhat.com>
    
    Added vir*GetAutostart APIs to python
    
    
2007-03-28 Richard W.M. Jones  <rjones@redhat.com>
    
    * python/generator.py: Python bindings now throw exceptions 	  in almost all cases where an error is encountered in the 	  underlying libvirt code.
    
    
2007-03-16 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py: patch from Tatsuro Enokura to fix   virNetworkDefine binding Daniel
    
    
2007-03-15 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py: fix the python binding generation for   virNetworkLookup...() functions, which were clashing with   equivalent virConnLookup...() equivalents, as reported by   Tatsuro Enokura Daniel
    
    
2007-03-09 Daniel P. Berrange  <berrange@redhat.com>
    
    Added python bindings for networking APIs
    
    
2007-03-06 Daniel P. Berrange  <berrange@redhat.com>
    
    Fixed up numerous compiler warnings
    
    
2007-03-01 Mark McLoughlin  <markmc@redhat.com>
    
    Thu Mar 01 16:17:48 EST 2007 Mark McLoughlin <markmc@redhat.com>
    * acinclude.m4: add LIBVIRT_COMPILE_WARNINGS, copied from
    GNOME but with a few more flags we'd been using.
    
    * configure.in: use that instead of setting CFLAGS
    directly.
    
    * proxy/Makefile.am, python/Makefile.am, qemud/Makefile.am,
    src/Makefile.am, tests/Makefile.am: use $(WARN_CFLAGS)
    
    
2007-02-14 Daniel P. Berrange  <berrange@redhat.com>
    
    Blacklist vshRunConsole from python
    
    
2007-01-23 Mark McLoughlin  <markmc@redhat.com>
    
    Mon Jan 23 14:36:18 IST 2007 Mark McLoughlin <markmc@redhat.com>
    * include/libvirt/libvirt.h.in: add VIR_UUID_BUFLEN and
    VIR_UUID_STRING_BUFLEN
    
    * libvirt/proxy/libvirt_proxy.c, libvirt/src/hash.c,
    libvirt/src/internal.h, libvirt/src/libvirt.c,
    libvirt/src/proxy_internal.c, libvirt/src/test.c,
    libvirt/src/virsh.c, libvirt/src/xend_internal.c,
    libvirt/src/xm_internal.c, libvirt/src/xml.c,
    libvirt/python/libvir.c: use them
    
    
2006-11-16 Daniel P. Berrange  <berrange@redhat.com>
    
    Added binding for virConnectListDefinedDomains api
    
    
2006-11-15 Daniel P. Berrange  <berrange@redhat.com>
    
    Fix unsigned long wraparound in python binding
    
    
2006-11-10 Daniel P. Berrange  <berrange@redhat.com>
    
    Fixed string concatenation in case where there is no lower level error
    
    
2006-11-09 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py: changed the generator to generate a reference   from Domain class instances to the Connect they were issued from   should fix rhbz#204490 * docs//*: rebuilt Daniel
    
    
2006-11-07 Daniel P. Berrange  <berrange@redhat.com>
    
    Propagate libvirt errors back with python exceptions
    
    
2006-10-24 Daniel P. Berrange  <berrange@redhat.com>
    
    Make python bindings threaded, by dropping/acquiring Python GIL where needed
    
    
2006-08-29 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.c: Pete Vetere pointed out a bug in string cast   when handling errors in Python Daniel
    
    
2006-08-04 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py: fix the generator when handling long integers   Dan Berrange reported problems due to this when using   virDomainSetMemory bindings Daniel
    
    
2006-07-05 Mark McLoughlin  <markmc@redhat.com>
    
    unleash the hush puppies
    
    
2006-06-26 Daniel Veillard  <veillard@redhat.com>
    
    * configure.in libvirt.spec.in docs/examples/* include/Makefile.am   include/libvirt/virterror.h python/generator.py python/libvir.c   python/libvirt_wrap.h src/driver.h src/internal.h src/test.h   src/virsh.c src/virterror.c src/xend_internal.c src/xend_internal.h   src/xml.c src/xml.h: moved the includes from include/ to   include/libvirt to reflect the installed include tree. This   avoid using "" in the includes themselves. Daniel
    
    
2006-03-29 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.c: fixed a bug in the new wrapper * python/tests/Makefile.am python/tests/node.py: added a new test for   the new API * python/tests/create.py: remove a debug Daniel
    
    
2006-03-29 Daniel Veillard  <veillard@redhat.com>
    
    * include/libvirt.h[.in] include/virterror.h src/driver.h   src/internal.h src/libvirt_sym.version src/xen_internal.c   src/xs_internal.c: added a new entry point to get node hardware   informations virGetNodeInfo, and associated driver hook. * src/xend_internal.c: implemented the node and version information   hooks for the Xen Daemon * python/libvir.c python/libvirt-python-api.xml python/generator.py:   also added Python bindings for the new call Daniel
    
    
2006-03-28 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.c: call the initialize entry point * src/libvirt_sym.version: add initialize entry point * src/libvirt.c: make sure we always initialize the lib * python/tests/*.py: start updating exemple for exception   handling as pointed by Jim Meyering Daniel
    
    
2006-03-28 Daniel Veillard  <veillard@redhat.com>
    
    * doc/site.xsl doc/libvir.html doc/*: added informations about   the Perl bindings, regenerated * python/libvirt_wrap.h: added a missing include. Daniel
    
    
2006-03-23 Daniel Veillard  <veillard@redhat.com>
    
    * src/xs_internal.c src/xs_internal.h include/virterror.h   src/virterror.c: created a new module related to Xen Store accesses * src/libvirt.c src/xen_internal.[ch] src/xend_internal.[ch]:   nearly completed the separation of the code from the different modules Daniel
    
    
2006-03-22 Daniel Veillard  <veillard@redhat.com>
    
    * python/tests/create.py: add one more image path * src/libvirt.c src/xend_internal.c src/xend_internal.h: more work   on the xend refactoring Daniel
    
    
2006-03-22 Daniel Veillard  <veillard@redhat.com>
    
    * python/tests/create.py: adapt to new naming scheme in FC5 Daniel
    
    
2006-02-28 Daniel Veillard  <veillard@redhat.com>
    
    * NEWS configure.in libvirt.spec.in include/libvirt.h docs/*:   preparing release 0.0.6 Daniel
    
    
2006-02-28 Daniel Veillard  <veillard@redhat.com>
    
    Fixed the test, daniel
    
    
2006-02-28 Daniel Veillard  <veillard@redhat.com>
    
    * TODO: updated * python/Makefile.am python/generator.py python/libvir.c   python/libvir.py: improved python binding, raise exception   when an instance creation or lookup fails, and add support   for the global error handler, per conn handler still needed * python/tests/error.py python/tests/Makefile.am: adding a   regression test Daniel
    
    
2006-02-24 Daniel Veillard  <veillard@redhat.com>
    
    * python/generator.py python/libvir.c python/libvirt-python-api.xml:   UUID strings can contain zeroes, so the autogenerated conversion   functions don't work. Daniel
    
    
2006-02-23 Daniel Veillard  <veillard@redhat.com>
    
    * src/libvirt.c: fixing a bug before the release of 0.0.5 * python/generator.py python/libvir.c python/libvirt-python-api.xml:   also fixing the binding for getting a domain UUID * python/tests/Makefile.am python/tests/uuid.py: added a test   for the new UUID API Daniel
    
    
2006-02-23 Daniel Veillard  <veillard@redhat.com>
    
    * python/tests/Makefile.am: added the create.py in the regression tests Daniel
    
    
2006-02-21 Daniel Veillard  <veillard@redhat.com>
    
    * TODO: updated * python/tests/Makefile.am: fix a small PYTHONPATH bug * docs//*: fixed the xsl a bit for toc names, added doc for   the python bindings, regenerated Daniel
    
    
2006-02-20 Daniel Veillard  <veillard@redhat.com>
    
    * docs/examples/examples.xsl docs/examples/index.html   docs/site.xsl: integates the examples page in the web site * docs//* : fixed generator and rebuilt the docs * python/tests/basic.py python/tests/create.py: couple cleanups Daniel
    
    
2006-02-17 Daniel Veillard  <veillard@redhat.com>
    
    * python/tests/create.py: trying to make test more generic, but it's   difficult since it requires a system image * src/libvirt.c src/xend_internal.c: fixed the shutdown API which   was broken due to a bad reason at the xend level. Daniel
    
    
2006-02-16 Daniel Veillard  <veillard@redhat.com>
    
    * configure.in src/Makefile.am: adding dependency to libxml2 * include/libvirt.h* src/libvirt.c src/xend_internal.[ch]   src/xml.[ch]: added XML parsing for Xen domain descriptions   needed for creates, plugged in a converter to s-exp and   xend call. Modified the virDomainCreateLinux() to reflect   that XML based description. Seems to work. * python/tests/create.py: added a test case which seems to work   not tested much yet * docs/*: regenerated Daniel
    
    
2006-02-15 Daniel Veillard  <veillard@redhat.com>
    
    * configure.in libvirt.spec.in include/libvirt.h.in python/Makefile.am   src/Makefile.am: fix rpm packaging problems whith head, more   LIBVIR -> LIBVIRT changes. Daniel
    
    
2006-02-14 Daniel Veillard  <veillard@redhat.com>
    
    * Makefile.am configure.in python/Makefile.am python/tests/Makefile.am   python/tests/basic.py: added first python test script and   a 'make tests' target Daniel
    
    
2006-02-10 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.c: fixed one more problem prior to 0.0.4 Daniel
    
    
2006-02-09 Daniel Veillard  <veillard@redhat.com>
    
    * //* : renamed the project libvirt , this affects all makefiles,   the specs, the icons, the docs, etc ... * configure.in: prepare for 0.0.3 Daniel
    
    
2006-01-31 Daniel Veillard  <veillard@redhat.com>
    
    * python/*: update of the python bindings, fix names, add   missing features like list of domains and domain info extraction Daniel
    
    
2006-01-28 Daniel Veillard  <veillard@redhat.com>
    
    * python/libvir.c: fix a stupid bug in python bindings (DomainDestroy   is still mishandled though) Daniel
    
    
2006-01-26 Daniel Veillard  <veillard@redhat.com>
    
    * TODO: updated * docs/search.php: use the new web site design * python/generator.py: fix a generation bug on python keyword Daniel
    
    
2005-12-19 Daniel Veillard  <veillard@redhat.com>
    
    * Makefile.am configure.in libvir.spec.in python/*: added a first   version for python bindings, heavilly based on libxml2/libxslt   way of doing things, maybe this need to be revisited. Added packaging   too. * src/hash.h: fixed the Copyright notice. Daniel
    
