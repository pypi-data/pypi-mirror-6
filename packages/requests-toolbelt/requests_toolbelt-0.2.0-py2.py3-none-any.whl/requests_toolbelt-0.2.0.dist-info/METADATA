Metadata-Version: 2.0
Name: requests-toolbelt
Version: 0.2.0
Summary: A utility belt for advanced users of python-requests
Home-page: https://toolbelt.readthedocs.org
Author: Ian Cordasco
Author-email: graffatcolmingov@gmail.com
License: Copyright 2014 Ian Cordasco, Cory Benfield
Requires-Dist: requests (>=2.0.1,<=3.0.0)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Description: requests toolbelt
        =================
        
        This is just a collection of utilities that some users of python-requests
        might need but do not belong in requests proper.
        
        multipart/form-data Encoder
        ---------------------------
        
        The main attraction is a streaming multipart form-data object. Its API looks
        like::
        
            from requests_toolbelt import MultipartEncoder
        
            import requests
        
        
            m = MultipartEncoder(
                fields={'field0': 'value', 'field1': 'value',
                        'field2': ('filename', open('file.py', 'rb'), 'text/plain')}
                )
        
            r = requests.post('http://httpbin.org/post', data=m,
                              headers={'Content-Type': m.content_type})
        
        You can also use it to just plain use ``multipart/form-data`` encoding for
        requests that do not require files::
        
            from requests_toolbelt import MultipartEncoder
        
            import requests
        
        
            m = MultipartEncoder(fields={'field0': 'value', 'field1': 'value'})
        
            r = requests.post('http://httpbin.org/post', data=m,
                              headers={'Content-Type': m.content_type})
        
        
        You can also just use it to create the string to examine the data::
        
            # Assuming `m` is one of the above
        
            m.to_string()  # Always returns unicode
        
        
        User-Agent constructor
        ----------------------
        
        You can easily construct your own requests-style User-Agent string::
        
            from requests_toolbelt import user_agent
        
            headers = {
                'User-Agent': user_agent('my_package', '0.0.1')
                }
        
            r = requests.get('https://api.github.com/users', headers=headers)
        
        
        SSLAdapter
        ----------
        
        The ``SSLAdapter`` is an implementation of the adapter proposed over on
        @Lukasa's blog, `here`_. This adapter allows the user to choose one of the SSL
        protocols made available in Python's ``ssl`` module for outgoing HTTPS
        connections::
        
            from requests_toolbelt import SSLAdapter
        
            import requests
            import ssl
        
            s = requests.Session()
            s.mount('https://', SSLAdapter(ssl.PROTOCOL_TLSv1))
        
        .. _here: https://lukasa.co.uk/2013/01/Choosing_SSL_Version_In_Requests/
        
        
        History
        =======
        
        0.2.0 -- 2014-02-24
        -------------------
        
        - Add ability to tell ``MultipartEncoder`` which encoding to use. By default 
          it uses 'utf-8'.
        
        - Fix #10 - allow users to install with pip
        
        - Fix #9 - Fix ``MultipartEncoder#to_string`` so that it properly handles file 
          objects as fields
        
        0.1.2 -- 2014-01-19
        -------------------
        
        - At some point during development we broke how we handle normal file objects.  
          Thanks to @konomae this is now fixed.
        
        0.1.1 -- 2014-01-19
        -------------------
        
        - Handle ``io.BytesIO``-like objects better
        
        0.1.0 -- 2014-01-18
        -------------------
        
        - Add initial implementation of the streaming ``MultipartEncoder``
        
        - Add initial implementation of the ``user_agent`` function
        
        - Add the ``SSLAdapter``
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: Implementation :: CPython
