.TH ANSIBLE.POSTGRESQL_PRIVS 3 "2013-11-27" "1.4.1" "ANSIBLE MODULES"
.\" generated from library/database/postgresql_privs
.SH NAME
postgresql_privs \- Grant or revoke privileges on PostgreSQL database objects.
.\" ------ DESCRIPTION
.SH DESCRIPTION
.PP
Grant or revoke privileges on PostgreSQL database objects. 
.PP
This module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE \fIprivs\fR ON \fItype\fR \fIobjs\fR TO/FROM \fIroles\fR) 
.\" ------ OPTIONS
.\"
.\"
.SH OPTIONS
   
.IP database
Name of database to connect to.Alias: \fIdb\fR(required)   
.IP grant_option
Whether \fCrole\fR may grant/revoke the specified privileges/group memberships to others.Set to \fCno\fR to revoke GRANT OPTION, leave unspecified to make no changes.\fIgrant_option\fR only has an effect if \fIstate\fR is \fCpresent\fR.Alias: \fIadmin_option\fR
.IR Choices :
yes,no.   
.IP host
Database host address. If unspecified, connect via Unix socket.Alias: \fIlogin_host\fR   
.IP login
The username to authenticate with.Alias: \fIlogin_user\fR (default: postgres)   
.IP objs
Comma separated list of database objects to set privileges on.If \fItype\fR is \fCtable\fR or \fCsequence\fR, the special value \fCALL_IN_SCHEMA\fR can be provided instead to specify all database objects of type \fItype\fR in the schema specified via \fIschema\fR. (This also works with PostgreSQL < 9.0.)If \fItype\fR is \fCdatabase\fR, this parameter can be omitted, in which case privileges are set for the database specified via \fIdatabase\fR.If \fItype\fR is \fIfunction\fR, colons (":") in object names will be replaced with commas (needed to specify function signatures, see examples)Alias: \fIobj\fR   
.IP password
The password to authenticate with.Alias: \fIlogin_password\fR)   
.IP port
Database port to connect to. (default: 5432)   
.IP privs
Comma separated list of privileges to grant/revoke.Alias: \fIpriv\fR   
.IP roles
Comma separated list of role (user/group) names to set permissions for.The special value \fCPUBLIC\fR can be provided instead to set permissions for the implicitly defined PUBLIC group.Alias: \fIrole\fR(required)   
.IP schema
Schema that contains the database objects specified via \fIobjs\fR.May only be provided if \fItype\fR is \fCtable\fR, \fCsequence\fR or \fCfunction\fR. Defaults to  \fCpublic\fR in these cases.   
.IP state
If \fCpresent\fR, the specified privileges are granted, if \fCabsent\fR they are revoked.
.IR Choices :
present,absent. (default: present)   
.IP type
Type of database object to set privileges on.
.IR Choices :
table,sequence,function,database,schema,language,tablespace,group. (default: table).\"
.\"
.\" ------ NOTES
.SH NOTES
.PP
Default authentication assumes that postgresql_privs is run by the \fCpostgres\fR user on the remote host. (Ansible's \fCuser\fR or \fCsudo-user\fR). 
.PP
This module requires Python package \fIpsycopg2\fR to be installed on the remote host. In the default case of the remote host also being the PostgreSQL server, PostgreSQL has to be installed there as well, obviously. For Debian/Ubuntu-based systems, install packages \fIpostgresql\fR and \fIpython-psycopg2\fR. 
.PP
Parameters that accept comma separated lists (\fIprivs\fR, \fIobjs\fR, \fIroles\fR) have singular alias names (\fIpriv\fR, \fIobj\fR, \fIrole\fR). 
.PP
To revoke only \fCGRANT OPTION\fR for a specific object, set \fIstate\fR to \fCpresent\fR and \fIgrant_option\fR to \fCno\fR (see examples). 
.PP
Note that when revoking privileges from a role R, this role  may still have access via privileges granted to any role R is a member of including \fCPUBLIC\fR. 
.PP
Note that when revoking privileges from a role R, you do so as the user specified via \fIlogin\fR. If R has been granted the same privileges by another user also, R can still access database objects via these privileges. 
.PP
When revoking privileges, \fCRESTRICT\fR is assumed (see PostgreSQL docs). 
.\"
.\"
.\" ------ EXAMPLES
.\" ------ PLAINEXAMPLES
.SH EXAMPLES
.nf
# On database "library":
# GRANT SELECT, INSERT, UPDATE ON TABLE public.books, public.authors 
# TO librarian, reader WITH GRANT OPTION
- postgresql_privs: >
    database=library
    state=present
    privs=SELECT,INSERT,UPDATE
    type=table
    objs=books,authors
    schema=public
    roles=librarian,reader
    grant_option=yes

# Same as above leveraging default values:
- postgresql_privs: >
    db=library
    privs=SELECT,INSERT,UPDATE
    objs=books,authors
    roles=librarian,reader
    grant_option=yes

# REVOKE GRANT OPTION FOR INSERT ON TABLE books FROM reader 
# Note that role "reader" will be *granted* INSERT privilege itself if this 
# isn't already the case (since state=present).
- postgresql_privs: >
    db=library
    state=present
    priv=INSERT
    obj=books
    role=reader
    grant_option=no

# REVOKE INSERT, UPDATE ON ALL TABLES IN SCHEMA public FROM reader
# "public" is the default schema. This also works for PostgreSQL 8.x.
- postgresql_privs: >
    db=library
    state=absent
    privs=INSERT,UPDATE
    objs=ALL_IN_SCHEMA
    role=reader

# GRANT ALL PRIVILEGES ON SCHEMA public, math TO librarian
- postgresql_privs: >
    db=library
    privs=ALL
    type=schema
    objs=public,math
    role=librarian

# GRANT ALL PRIVILEGES ON FUNCTION math.add(int, int) TO librarian, reader
# Note the separation of arguments with colons.
- postgresql_privs: >
    db=library
    privs=ALL
    type=function
    obj=add(int:int)
    schema=math
    roles=librarian,reader

# GRANT librarian, reader TO alice, bob WITH ADMIN OPTION
# Note that group role memberships apply cluster-wide and therefore are not
# restricted to database "library" here.
- postgresql_privs: >
    db=library
    type=group
    objs=librarian,reader
    roles=alice,bob
    admin_option=yes

# GRANT ALL PRIVILEGES ON DATABASE library TO librarian
# Note that here "db=postgres" specifies the database to connect to, not the
# database to grant privileges on (which is specified via the "objs" param)
- postgresql_privs: >
    db=postgres
    privs=ALL
    type=database
    obj=library
    role=librarian

# GRANT ALL PRIVILEGES ON DATABASE library TO librarian
# If objs is omitted for type "database", it defaults to the database 
# to which the connection is established
- postgresql_privs: >
    db=library
    privs=ALL
    type=database
    role=librarian

.fi

.\" ------- AUTHOR
.SH AUTHOR
Bernhard Weitzhofer
.SH SEE ALSO
.IR ansible (1),
.I http://ansible.github.com/modules.html#postgresql-privs