.TH ANSIBLE.EC2 3 "2013-12-20" "1.4.3" "ANSIBLE MODULES"
.\" generated from library/cloud/ec2
.SH NAME
ec2 \- create or terminate an instance in ec2, return instanceid
.\" ------ DESCRIPTION
.SH DESCRIPTION
.PP
Creates or terminates ec2 instances. When created optionally waits for it to be 'running'. This module has a dependency on python-boto >= 2.5 
.\" ------ OPTIONS
.\"
.\"
.SH OPTIONS
   
.IP aws_access_key
AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.   
.IP aws_secret_key
AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.   
.IP count
number of instances to launch (default: yes   
.IP ec2_url
Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used   
.IP group
security group (or list of groups) to use with the instance   
.IP group_id
security group id (or list of ids) to use with the instance(Added in Ansible version 1.1.)
   
.IP id
identifier for this instance or set of instances, so that the module will be idempotent with respect to EC2 instances. This identifier is valid for at least 24 hours after the termination of the instance, and should not be reused for another call later on. For details, see the description of client token at \fIhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\fR.   
.IP image
\fIemi\fR (or \fIami\fR) to use for the instance(required)   
.IP instance_ids
list of instance ids, currently only used when state='absent'(Added in Ansible version 1.3.)
   
.IP instance_profile_name
Name of the IAM instance profile to use. Boto library must be 2.5.0+(Added in Ansible version 1.3.)
   
.IP instance_tags
a hash/dictionary of tags to add to the new instance; '{"key":"value"}' and '{"key":"value","key":"value"}'(Added in Ansible version 1.0.)
   
.IP instance_type
instance type to use for the instance(required)   
.IP kernel
kernel \fIeki\fR to use for the instance   
.IP key_name
key pair to use on the instance(required)   
.IP monitoring
enable detailed monitoring (CloudWatch) for instance(Added in Ansible version 1.1.)
   
.IP placement_group
placement group for the instance when using EC2 Clustered Compute(Added in Ansible version 1.3.)
   
.IP private_ip
the private ip address to assign the instance (from the vpc subnet)(Added in Ansible version 1.2.)
   
.IP ramdisk
ramdisk \fIeri\fR to use for the instance   
.IP region
The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used.(Added in Ansible version 1.2.)
   
.IP state
create or terminate instances (default: present)(Added in Ansible version 1.3.)
   
.IP user_data
opaque blob of data which is made available to the ec2 instance(Added in Ansible version 0.9.)
   
.IP vpc_subnet_id
the subnet ID in which to launch the instance (VPC)(Added in Ansible version 1.1.)
   
.IP wait
wait for the instance to be in state 'running' before returning
.IR Choices :
yes,no. (default: no)   
.IP wait_timeout
how long before wait gives up, in seconds (default: 300)   
.IP zone
AWS availability zone in which to launch the instance(Added in Ansible version 1.2.)
.\"
.\"
.\" ------ NOTES
.\"
.\"
.\" ------ EXAMPLES
.\" ------ PLAINEXAMPLES
.SH EXAMPLES
.nf
# Note: None of these examples set aws_access_key, aws_secret_key, or region.
# It is assumed that their matching environment variables are set.

# Basic provisioning example
- local_action:
    module: ec2
    keypair: mykey
    instance_type: c1.medium
    image: emi-40603AD1
    wait: yes
    group: webserver
    count: 3

# Advanced example with tagging and CloudWatch
- local_action:
    module: ec2
    keypair: mykey
    group: databases
    instance_type: m1.large
    image: ami-6e649707
    wait: yes
    wait_timeout: 500
    count: 5
    instance_tags: '{"db":"postgres"}'
    monitoring=yes

# Multiple groups example
local_action:
    module: ec2
    keypair: mykey
    group: ['databases', 'internal-services', 'sshable', 'and-so-forth']
    instance_type: m1.large
    image: ami-6e649707
    wait: yes
    wait_timeout: 500
    count: 5
    instance_tags: '{"db":"postgres"}'
    monitoring=yes

# VPC example
- local_action:
    module: ec2
    keypair: mykey
    group_id: sg-1dc53f72
    instance_type: m1.small
    image: ami-6e649707
    wait: yes
    vpc_subnet_id: subnet-29e63245


# Launch instances, runs some tasks
# and then terminate them


- name: Create a sandbox instance
  hosts: localhost
  gather_facts: False
  vars:
    keypair: my_keypair
    instance_type: m1.small
    security_group: my_securitygroup
    image: my_ami_id
    region: us-east-1
  tasks:
    - name: Launch instance
      local_action: ec2 keypair={{ keypair }} group={{ security_group }} instance_type={{ instance_type }} image={{ image }} wait=true region={{ region }}
      register: ec2
    - name: Add new instance to host group
      local_action: add_host hostname={{ item.public_ip }} groupname=launched
      with_items: ec2.instances
    - name: Wait for SSH to come up
      local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances

- name: Configure instance(s)
  hosts: launched
  sudo: True
  gather_facts: True
  roles:
    - my_awesome_role
    - my_awesome_test

- name: Terminate instances
  hosts: localhost
  connection: local
  tasks:
    - name: Terminate instances that were previously launched
      local_action:
        module: ec2
        state: 'absent'
        instance_ids: {{ec2.instance_ids}}


.fi

.\" ------- AUTHOR
.SH AUTHOR
Seth Vidal, Tim Gerla, Lester Wade
.SH SEE ALSO
.IR ansible (1),
.I http://ansible.github.com/modules.html#ec2