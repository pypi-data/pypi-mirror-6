Metadata-Version: 1.1
Name: munch
Version: 2.0.1
Summary: A dot-accessible dictionary (a la JavaScript objects)
Home-page: http://github.com/Infinidat/munch
Author: Rotem Yaari
Author-email: vmalloc@gmail.com
License: MIT
Description: munch
        ==========
        
        munch is a fork of David Schoonover's **Bunch** package, providing similar functionality. 99% of the work was done by him, and the fork was made mainly for lack of responsiveness for fixes and maintenance on the original code.
        
        Munch is a dictionary that supports attribute-style access, a la JavaScript.
        
        ````py
        >>> b = Munch()
        >>> b.hello = 'world'
        >>> b.hello
        'world'
        >>> b['hello'] += "!"
        >>> b.hello
        'world!'
        >>> b.foo = Munch(lol=True)
        >>> b.foo.lol
        True
        >>> b.foo is b['foo']
        True
        ````
        
        
        Dictionary Methods
        ------------------
        
        A Munch is a subclass of ``dict``; it supports all the methods a ``dict`` does:
        
        ````py
        >>> b.keys()
        ['foo', 'hello']
        ````
        
        Including ``update()``:
        
        ````py
        >>> b.update({ 'ponies': 'are pretty!' }, hello=42)
        >>> print repr(b)
        Munch(foo=Munch(lol=True), hello=42, ponies='are pretty!')
        ````
        
        As well as iteration:
        
        ````py
        >>> [ (k,b[k]) for k in b ]
        [('ponies', 'are pretty!'), ('foo', Munch(lol=True)), ('hello', 42)]
        ````
        
        And "splats":
        
        ````py
        >>> "The {knights} who say {ni}!".format(**Munch(knights='lolcats', ni='can haz'))
        'The lolcats who say can haz!'
        ````
        
        
        Serialization
        -------------
        
        Munches happily and transparently serialize to JSON and YAML.
        
        ````py
        >>> b = Munch(foo=Munch(lol=True), hello=42, ponies='are pretty!')
        >>> import json
        >>> json.dumps(b)
        '{"ponies": "are pretty!", "foo": {"lol": true}, "hello": 42}'
        ````
        
        If JSON support is present (``json`` or ``simplejson``), ``Munch`` will have a ``toJSON()`` method which returns the object as a JSON string.
        
        If you have [PyYAML](http://pyyaml.org/wiki/PyYAML) installed, Munch attempts to register itself with the various YAML Representers so that Munches can be transparently dumped and loaded.
        
        ````py
        >>> b = Munch(foo=Munch(lol=True), hello=42, ponies='are pretty!')
        >>> import yaml
        >>> yaml.dump(b)
        '!munch.Munch\nfoo: !munch.Munch {lol: true}\nhello: 42\nponies: are pretty!\n'
        >>> yaml.safe_dump(b)
        'foo: {lol: true}\nhello: 42\nponies: are pretty!\n'
        ````
        
        In addition, Munch instances will have a ``toYAML()`` method that returns the YAML string using ``yaml.safe_dump()``. This method also replaces ``__str__`` if present, as I find it far more readable. You can revert back to Python's default use of ``__repr__`` with a simple assignment: ``Munch.__str__ = Munch.__repr__``. The Munch class will also have a static method ``Munch.fromYAML()``, which loads a Munch out of a YAML string.
        
        Finally, Munch converts easily and recursively to (``unmunchify()``, ``Munch.toDict()``) and from (``munchify()``, ``Munch.fromDict()``) a normal ``dict``, making it easy to cleanly serialize them in other formats.
        
        
        Miscellaneous
        -------------
        
        * It is safe to ``import *`` from this module. You'll get: ``Munch``, ``munchify``, and ``unmunchify``.
        * Ample Tests. Just run ``make test`` from the project root.
        
        Feedback
        --------
        
        Open a ticket / fork the project on [GitHub](http://github.com/Infinidat/munch).
        
        
Keywords: munch,dict,mapping,container,collection
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: MIT License
