Metadata-Version: 1.1
Name: pingo
Version: 0.1.3
Summary: Generic API to control boards with programmable IO pins.
Home-page: http://github.com/garoa/pingo
Author: Pingo Team @ Garoa Hacker Clube
Author-email: luciano at sign ramalho within the dot org tld
License: MIT
Description: pingo
        =====
        
        Pingo provides a uniform API to program devices like the Raspberry Pi, BeagleBone Black, pcDuino etc. just like the Python DBAPI provides an uniform API for database programming in Python.
        
        The API is object-oriented but easy to use: a board is an instance of a `Board` subclass. Every board has a dictionary called `pins` which lists all GPIO pins on the board. Each pin is an instance of a `Pin` subclass with attributes that you can inspect to learn about its capabilities.
        
        The name Pingo is a tribute to Garoa Hacker Clube, where it started (Portuguese skills needed to understand the link). To our English-speaking friends we like to say that it means "pin, go!" -- the main purpose of this package.
        
        
        -----------
        Basic usage
        -----------
        
        Blink.py on an UDOO board:
        
        .. code-block:: python
        
            import pingo
            from time import sleep
        
            board = pingo.udoo.Udoo()
            led_pin = board.pins[13]
            led_pin.set_mode(pingo.OUTPUT)
        
            while True:
                led_pin.high()
                sleep(1)
                led_pin.low()
                sleep(1)
        
        To do the same on a Arduino Yún, just change the line were the board is instantiated, and the pin numbers as needed:
        
        .. code-block:: python
        
            import pingo
            from time import sleep
        
            board = pingo.arduino.yun.YunBridge()  # <---
            led_pin = board.pins[13]
            led_pin.set_mode(pingo.OUTPUT)
        
            while True:
                led_pin.high()
                sleep(1)
                led_pin.low()
                sleep(1)
        
        
        -------
        Drivers
        -------
        
        In the examples above, ``pingo.udoo`` ``pingo.arduino.yun`` are drivers, and the respective ``Udoo`` and ``YunBridge`` are classes implementing the ``pingo.board.Board`` interface.
        
        The following table lists the drivers currently planned or under development.
        
        ================ ======== =============== =================================================
        Board            Type     Package         Notes
        ================ ======== =============== =================================================
        Arduino Firmata  remote   arduino.firmata requires `firmata library`_ on any Arduino board
        Arduino Yún      on-board arduino.yun     requires `Bridge sketch`_ on the Arduino Yún
        BeagleBone Black on-board beagle
        Fantasma         mock     ghost           not a real board, just a mock for testing clients
        Raspberry Pi     on-board rpi
        pcDuino          on-board pcduino
        UDOO             on-board udoo
        ================ ======== =============== =================================================
        
        .. _Firmata library: http://arduino.cc/en/reference/firmata
        .. _Bridge sketch: http://arduino.cc/en/Reference/YunBridgeLibrary
        
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Environment :: Handhelds/PDA's
Classifier: Environment :: Other Environment
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Manufacturing
Classifier: Intended Audience :: Other Audience
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Telecommunications Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 2 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Education
Classifier: Topic :: Home Automation
Classifier: Topic :: Internet
Classifier: Topic :: Other/Nonlisted Topic
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Embedded Systems
Classifier: Topic :: Software Development :: Libraries :: Python Modules
