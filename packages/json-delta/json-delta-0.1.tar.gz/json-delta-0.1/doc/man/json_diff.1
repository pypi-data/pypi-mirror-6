.TH "JSON_DIFF" "1" "April 15, 2014" "0.1" "JSON-delta"
.SH NAME
json_diff \- generate deltas between JSON-serialized data structures
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.SH SYNOPSIS
.sp
.nf
.ft C
json_diff [\-\-output FILE] [\-\-verbose] [\-\-unified] [left] [right]
json_diff [\-\-version]
json_diff [\-\-help]
.ft P
.fi
.SH DESCRIPTION
.sp
json_delta produces deltas between JSON\-serialized data structures.
If no arguments are specified, stdin will be expected to be a JSON
array \fB[left, right]\fP, and the output will be written to stdout.
.sp
The default output is itself a JSON data structure, specifically an
array of arrays of the form \fB[<keypath>]\fP or \fB[<keypath>,
<replacement>]\fP. The companion program \fIjson_patch(1)\fP can
be used to apply such a diff.
.sp
A keypath is an array of string or integer tokens specifying a
path to a terminal node in the data structure.  For example, in the
structure \fB[{}, {"foo": "bar"}]\fP, the string \fB"bar"\fP appears at
the node addressed by the key sequence \fB[1, \(aqfoo\(aq]\fP, and the empty
object \fB{}\fP appears at key sequence \fB[0]\fP.
.sp
If a diff stanza is an array of length 1, consisting only of a key
sequence, \fIjson_patch(1)\fP interprets it as an instruction to
delete the node the key sequence points to.  If a stanza is of length
2, the node is replaced by the last element of the stanza.
.sp
An alternative output format for is accessed using the
\fI\-\-unified\fP / \fI\-u\fP option.  This is designed to be
more legible to the human eye, inspired by unified diffs as output by
\fIdiff(1)\fP. \fIjson_patch(1)\fP can read
either format, and, since there is enough information in the format,
can apply \fI\-\-unified\fP patches in reverse.
.SH OPTIONS
.INDENT 0.0
.TP
.BI \-\-output \ FILE, \ \-o \ FILE
Write output to FILE instead of stdout.
.TP
.B \-\-unified,  \-u
Write diffs in a more legible format,
inspired by the output of \fBdiff \-u\fP
.TP
.B \-\-verbose
Print compression statistics on stderr.
.TP
.B \-\-version
Show the program\(aqs version number and exit.
.TP
.B \-\-help,  \-h
Show a brief help message and exit.
.UNINDENT
.SH EXAMPLES
.sp
.nf
.ft C
$ json_diff << \(aqEOF\(aq
> [{"foo": "bar"},
>  {"foo": "bar",
>   "baz": ["quux"]}]
> EOF
[[["baz"],["quux"]]]

$ cat > foofile << \(aqEOF\(aq
> {"foods": ["spam", "spam", "spam", "spam"],
>  "weaponry": "Mainly battleaxes.",
>  "spanish inquisition expected": false,
>  "drinks": "Delicious mead!",
>  "other supplies": null}
> EOF
$ cat > barfile << \(aqEOF\(aq
> {"foods": ["spam", "spam", "spam", "pickled eggs", "spam"],
>  "weaponry": "Mainly battleaxes.",
>  "spanish inquisition expected": false,
>  "drinks": "Soda water."}
> EOF
$ json_diff \-u foofile barfile
\-\-\- foofile   2014\-04\-14 21:32:00 BST
+++ barfile   2014\-04\-14 21:32:17 BST
 {
  "foods":
  ...
  "weaponry": "Mainly battleaxes.",
   ["spam",
    ...(2),
+   "pickled eggs",
    "spam"]

  "drinks":
\-  "Delicious mead!",
+  "Soda water.",

\- "other supplies": null
 }
.ft P
.fi
.SH AUTHOR
Philip J. Roberts
.SH COPYRIGHT
2014, Philip J. Roberts
.\" Generated by docutils manpage writer.
.\" 
.
