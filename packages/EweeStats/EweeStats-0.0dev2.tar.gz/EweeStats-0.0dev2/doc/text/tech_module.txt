
Liste des modules utilisÃ©s :
****************************

*Module builtins*

Built-in functions, exceptions, and other objects.

Noteworthy: None is the >>`<<nil' object; Ellipsis represents
>>`<<...' in slices.

*Module io*

The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is
no separation between reading and writing to streams; implementations
are allowed to raise an OSError if they do not support a given
operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to
provide an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase).
Its subclasses, BufferedWriter, BufferedReader, and BufferedRWPair
buffer streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access streams.
BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and
decoding of streams into text. TextIOWrapper, which extends it, is a
buffered text interface to a buffered raw stream (*BufferedIOBase*).
Finally, StringIO is a in-memory stream for text.

Argument names are not part of the specification, and only the
arguments of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's
   buffered I/O classes. open() uses the file's blksize (as obtained
   by os.stat) if possible.

*Module time*

This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number of
seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer or
a floating point number (to represent fractions of seconds). The Epoch
is system-defined; on Unix, it is generally January 1st, 1970. The
actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:

   year (including century, e.g. 1998) month (1-12) day (1-31) hours
   (0-23) minutes (0-59) seconds (0-59) weekday (0-6, Monday is 0)
   Julian day (day in the year, 1-366) DST (Daylight Savings Time)
   flag (-1, 0 or 1)

If the DST flag is 0, the time is given in the regular time zone; if
it is 1, the time is given in the DST time zone; if it is -1, mktime()
should guess based on the date and time.

Variables:

timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST tzname -- tuple of
(standard time zone name, DST time zone name)

Functions:

time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float sleep() --
delay for a number of seconds given as a float gmtime() -- convert
seconds since Epoch to UTC tuple localtime() -- convert seconds since
Epoch to local time tuple asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string mktime() -- convert local
time tuple to seconds since Epoch strftime() -- convert time tuple to
string according to format specification strptime() -- parse string to
time tuple according to format specification tzset() -- change the
local timezone

*Module Queue*

A multi-producer, multi-consumer queue.

*Module threading*

Thread module emulating a subset of Java's threading model.

*Module pygal*

Pygal -  A python svg graph plotting library

*Module Adafruit_CharLCDPlate*

*Module pyfirmata*
