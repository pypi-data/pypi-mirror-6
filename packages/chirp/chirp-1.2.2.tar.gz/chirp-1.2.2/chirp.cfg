# This is an example chirp configuration file. The parameters here
# were used to analyze superb starling flight calls.  Each program has
# a separate section, but some programs may use values from multiple sections.

################################################################
# gui:         setting for the chirp gui
#
[gui]
# auto_load_plg: set to True to automatically load plg files when
# opening wave file, if it exists
auto_load_plg=True

#################################################################
# spectrogram: these are general settings used to calculate and display spectrograms
#              You can override them in other sections (e.g. cpitch)
[spectrogram]
# spec_method: the time/frequency representation to use
#              hanning (default), hamming, blackman: standard STFT
#              tfr: reassignment spectrogram (not recommended)
spec_method = tfr

# window_len: the size of the FFT analysis window, in ms
window_len = 12.0

# window_shift: the amount each analysis window shifts per frame, in ms
window_shift = 0.7

# tfr_order: number of independent estimates used to generate time-frequency reassignment
# larger numbers decrease noise at cost of more computation
tfr_order=5

# tfr_tm: time support of TFR tapers. Leave this alone.
tfr_tm=6.0

# tfr_flock: Frequency locking (in relative freq. units).
# Frequency displacments greater than this value are considered to be noise
tfr_flock=0.01

# tfr_tlock: Temporal locking (in frames).
# Temporal displacments greater than this value are considered to be noise
tfr_tlock=5

# mtm_nw:  for spectrograms calculated with conventional multitaper methods,
#          the time-frequency product.  Needs to be an integer or half integer.
#          Larger values mean more transforms and (generally) wider peaks.
mtm_nw=2.5


#################################################################
# postfilter: post-processing filtering of pitch estimates. These
# thresholds affect the beginnings and ends of signals, unless
# otherwise noted.  Set any threshold to 0 to disable.
[postfilter]

# max_particle_sd: if the standard deviation of the particles exceeds
# this threshold, the estimate is considered unreliable. In Hz.
max_particle_sd=400

# max_chain_sd: similar to max_particle_sd, but applies to the
# standard deviation between chains.  Note that chain variance tends
# to be high for the MMSE estimator at the beginning of the signal
# because the chains need to converge; the opposite applies to the MAP
# estimator.  Therefore, this threshold applies to the maximum of the
# two interchain SDs. In Hz.
max_chain_sd=0

#################################################################
# cpitch: pitch detection routines
[cpitch]
# nfft: number of bins in the frequency grid.
# larger values give higher precision
# smaller values give lower variance
nfft=512

# shift: number of samples between analysis frames
# smaller values increase temporal resolution, increase computational time
shift=30

# winsize: number of samples in the analysis window
# larger values increase spectral resolution, decrease temporal resolution
# smaller values decrease spectral and increase temporal
winsize=401

# freq_range:  the range of frequencies to analyze
# can be in Hz or relative frequency units
freq_range=(750,15000)

# pitch_range:  the range of frequencies to consider as possible pitches
# can be Hz or relative frequency units
# should be smaller than freq_range
pitch_range=(900,8000)

# lobes: number of lobes in the harmonic template
# set to approximately 2x the number of harmonics
lobes=7

# lobe_decay: controls how energy of successive lobes decreases
# smaller values can help with pitch doubling errors but decrease
# integration of multiple harmonics
lobe_decay=0.85

# neg_ampl: size of negative lobes in harmonic template
# value is from Shapiro and Wang; haven't tested it much
# 0 to disable
neg_ampl=0.35

# neg_width: width of negative lobes, in pitch index units
# doesn't appear to have a big effect
neg_width=9

# remask_likelihood: if True, apply mask to likelihood as well as to
# spectrogram. This implies that the mask specifies a hard prior on
# the possible values for the pitch.  This can drastically reduce
# pitch halving errors, but it makes masking errors much more serious.
remask_likelihood = True

# max_jump: the maximum amount the pitch can change between frames, in
# pitch index units. This is a hard upper limit so be liberal.  If the
# number is too small the tracker may not be able to move fast enough.
max_jump=80

# particles:  the number of particles in the particle filter
# increase to get better estimates, at the expense of more computations
particles=500

# pow_thresh: minimum power in a frame for it to be included in
# analysis.  In linear units.  Increasing this will reduce the
# contribution of frames that don't contain enough information to
# reasonably estimate the pitch.  Frames with insufficient power that
# are located at the beginnings and ends of the signal may be trimmed
# off.  Also see [postfilter] section.
pow_thresh=1e4

# row_thresh: minimum proportion of nonzero frequency bands in the
# spectrogram for a frame to be included in analysis. This helps to
# eliminate some errors where masks are very narrow at beginnings and
# ends.
row_thresh=0.02

# rwalk_scale: when frames are excluded because of low power, pitch is
# allowed to drift. This sets standard deviation
rwalk_scale=2

# chains: number of independent chains.  More chains equals better
# estimates but more computations
chains=5

# btrace: set True to run reverse Vitterbi filter and find maximum a
# posteriori paths.  Generally this is a better estimator, but the
# calculation is very intensive computationally, increasing O(N^2)
# with the number of particles.
btrace=True

#################################################################
# The masker component is used to split spectrograms into smaller
# spectrotemporal components.
[masker]
# boxmask: set True to use the temporal bounding boxes of polygons in
# mask file, rather than the fully articulated polygon. Use this to
# test the effects of the spectrotemporal filtering on the output.
boxmask=False

#################################################################
# cplotpitch: a script for inspecting the calculated pitch traces
# Will use options from [spectrogram] if undefined
[cplotpitch]
# colormap: the colormap to display spectrograms in. Some good options
# are 'Greys', 'hot', and 'jet'
colormap = Greys

# dynrange: the maximum dynamic range of the spectrogram to show. For
# a 16-bit sampling depth the maximum this can be is 96.  Smaller
# values reduce the appearance of noise.
dynrange = 60

# freq_range: the default range of frequencies to display, in Hz
freq_range = (750.0, 10000.0)

# pitch_color: the color of the pitch trace
pitch_color = r

#################################################################
# gui: options for the chirp gui
[gui]
# override defaults in spectrogram section
freq_range = (0.0, 15000.0)
colormap = hot
dynrange = 60

# pan_proportion: in the chirp gui, controls how much the viewport
# pans to the left or right when pressing the arrow keys.
pan_proportion = 0.8

#################################################################
# ccompare: a script for making pairwise comparisons between signals
[ccompare]

#################################################################
# spcc: options for spectrographic cross-correlation comparisons
# Uses shift and freq_range from [spectrogram] if not specified here.
[spcc]

# freq_range: the range of frequencies to compare (in Hz)
freq_range = (750.0, 10000.0)

# nfreq:      the number of frequency bands to compare (may be one
#             less than this number if an integral number doesn't fit
#             in the frequency band)
nfreq = 100

# window_shift: amount of time to shift between analysis windows (in ms)
window_shift = 1.0

# spec_method: the time/frequency representation to use
#              hanning (default), hamming, blackman: standard STFT
#              cepstrum: cepstral coefficients
#              tfr: reassignment spectrogram (not recommended)
spec_method = hanning

# powscale:   the power scale to use ('linear' or 'log'). The compression of the log
#             increases CC values overall and should ony be used for noise-free
#             recordings.  DO NOT use log scale with a poly mask as the edges
# 	      of the mask will likely be much larger than the true signal
powscale = linear

# mask:       mask spectrograms using ebl file (if it exists)?
#             none: no masking
#             box:  temporal bounding boxes of the polygons (default)
#             poly: full mask
mask = box

# biased_norm: if True, use the L2 norm of both signals to normalize
#              cross-correlation.  This mode can bias CC downward if
#              there are strong signals outside the match area, which
#              can be a good penalty for differences in duration.  If
#              False, uses the L2 norm of the parts of the signals
#              that overlap; in this case it's important to use
#              signals with little zero-padding on the ends to avoid
#              edge effects.
biased_norm = True

# subtract_mean: if True, the mean is subtracted from the spectrograms before
#                doing the cross-correlation. This can help to compensate for
#                overall differences in level and generally leads to sharper
#                peaks.
subtract_mean = True

#################################################################
# dtw: general options for dynamic time warping
# override for specific feature sets in their sections
[dtw]

# metric: the metric for comparing pairs of time points in the
# signals. This provides the base cost for comparing the signals.
#         euclidean = \sqrt (\sum_n (x-y)^2) [n>=1]
#         cosine    = abs(1 - sum_n (xy) / (||x|| ||y||)) [n>1]
metric = euclidean

# cost matrix: the cost multiplier for moving through the pairwise
# metric matrix.  Consists of a list of tuples, (x,y,d), the cost
# multiplier $d$ for moving $x$ frames in one signal and $y$ in the
# other.  The default, [(1,1,1),(1,2,2),(2,1,2)], is the Itakura
# constraint, and only allows single frames to be skipped, with a
# maximum warp factor of 2x  (she can't take any more, Captain)
cost_matrix = [(1,1,1),(1,2,2),(2,1,2)]

# dynamic_cost: if True, adjust the Itakura constraint for signals
# differing in length by more than 2x.  This allows increasing warp
# factors (and larger numbers of skipped frames), but with an
# exponentially increasing cost.  The advantage of setting this to
# True is that all DTW distances will be finite.
dynamic_cost = True

#################################################################
# pitch_dtw: specific options for pitch-based dynamic time warping.
# overrides dtw section.
[pitch_dtw]

# estimator: the pitch estimator to use. Options are 'p.map', the
# maximum a posteriori estimate, or best path through the posterior
# distribution. This is only available if 'btrace' is true for the
# cpitch runs.  The other option is 'p.mmse', the mean of the
# posterior distribution for each frame.  This estimator is generally
# less robust.
estimator = p.map

# spec_dtw: specific options for spectrum-based dynamic time warping.
# overrides dtw, spcc, and spectrogram sections.
[spec_dtw]
metric = cosine

#################################################################
# pitchstats: specific options for summary statistics
[pitchstats]
# estimator: the pitch estimator to use.
estimator = p.map

#################################################################
# csplitter: options for csplitter
[csplitter]

# time_ramp: extract additional samples (in ms) on either end of the
# interval, with a cosine-squared ramp applied.
time_ramp = 2

# boxmask: if True (default), polygons are converted into
# intervals. If False, uses spectrographic inversion to filter the
# signal using the polygon.
boxmask = True

# merge_elements: if True (default), extract a single element
# comprising all the elements defined in the ebl file. If boxmask is
# True, the extracted interval will include all the intervals and
# polygons in the file; if boxmask is False, the intervals are
# converted to rectangular boxes and then merged with the polygons.
merge_elements = True
