# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_admesh', [dirname(__file__)])
        except ImportError:
            import _admesh
            return _admesh
        if fp is not None:
            try:
                _mod = imp.load_module('_admesh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _admesh = swig_import_helper()
    del swig_import_helper
else:
    import _admesh
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LABEL_SIZE = _admesh.LABEL_SIZE
NUM_FACET_SIZE = _admesh.NUM_FACET_SIZE
HEADER_SIZE = _admesh.HEADER_SIZE
STL_MIN_FILE_SIZE = _admesh.STL_MIN_FILE_SIZE
ASCII_LINES_PER_FACET = _admesh.ASCII_LINES_PER_FACET
SIZEOF_EDGE_SORT = _admesh.SIZEOF_EDGE_SORT
class stl_vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _admesh.stl_vertex_x_set
    __swig_getmethods__["x"] = _admesh.stl_vertex_x_get
    if _newclass:x = _swig_property(_admesh.stl_vertex_x_get, _admesh.stl_vertex_x_set)
    __swig_setmethods__["y"] = _admesh.stl_vertex_y_set
    __swig_getmethods__["y"] = _admesh.stl_vertex_y_get
    if _newclass:y = _swig_property(_admesh.stl_vertex_y_get, _admesh.stl_vertex_y_set)
    __swig_setmethods__["z"] = _admesh.stl_vertex_z_set
    __swig_getmethods__["z"] = _admesh.stl_vertex_z_get
    if _newclass:z = _swig_property(_admesh.stl_vertex_z_get, _admesh.stl_vertex_z_set)
    def __init__(self): 
        this = _admesh.new_stl_vertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_vertex
    __del__ = lambda self : None;
stl_vertex_swigregister = _admesh.stl_vertex_swigregister
stl_vertex_swigregister(stl_vertex)

class stl_normal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_normal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_normal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _admesh.stl_normal_x_set
    __swig_getmethods__["x"] = _admesh.stl_normal_x_get
    if _newclass:x = _swig_property(_admesh.stl_normal_x_get, _admesh.stl_normal_x_set)
    __swig_setmethods__["y"] = _admesh.stl_normal_y_set
    __swig_getmethods__["y"] = _admesh.stl_normal_y_get
    if _newclass:y = _swig_property(_admesh.stl_normal_y_get, _admesh.stl_normal_y_set)
    __swig_setmethods__["z"] = _admesh.stl_normal_z_set
    __swig_getmethods__["z"] = _admesh.stl_normal_z_get
    if _newclass:z = _swig_property(_admesh.stl_normal_z_get, _admesh.stl_normal_z_set)
    def __init__(self): 
        this = _admesh.new_stl_normal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_normal
    __del__ = lambda self : None;
stl_normal_swigregister = _admesh.stl_normal_swigregister
stl_normal_swigregister(stl_normal)

class stl_facet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_facet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_facet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["normal"] = _admesh.stl_facet_normal_set
    __swig_getmethods__["normal"] = _admesh.stl_facet_normal_get
    if _newclass:normal = _swig_property(_admesh.stl_facet_normal_get, _admesh.stl_facet_normal_set)
    __swig_setmethods__["vertex"] = _admesh.stl_facet_vertex_set
    __swig_getmethods__["vertex"] = _admesh.stl_facet_vertex_get
    if _newclass:vertex = _swig_property(_admesh.stl_facet_vertex_get, _admesh.stl_facet_vertex_set)
    __swig_setmethods__["extra"] = _admesh.stl_facet_extra_set
    __swig_getmethods__["extra"] = _admesh.stl_facet_extra_get
    if _newclass:extra = _swig_property(_admesh.stl_facet_extra_get, _admesh.stl_facet_extra_set)
    def __init__(self): 
        this = _admesh.new_stl_facet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_facet
    __del__ = lambda self : None;
stl_facet_swigregister = _admesh.stl_facet_swigregister
stl_facet_swigregister(stl_facet)

SIZEOF_STL_FACET = _admesh.SIZEOF_STL_FACET
binary = _admesh.binary
ascii = _admesh.ascii
class stl_edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _admesh.stl_edge_p1_set
    __swig_getmethods__["p1"] = _admesh.stl_edge_p1_get
    if _newclass:p1 = _swig_property(_admesh.stl_edge_p1_get, _admesh.stl_edge_p1_set)
    __swig_setmethods__["p2"] = _admesh.stl_edge_p2_set
    __swig_getmethods__["p2"] = _admesh.stl_edge_p2_get
    if _newclass:p2 = _swig_property(_admesh.stl_edge_p2_get, _admesh.stl_edge_p2_set)
    __swig_setmethods__["facet_number"] = _admesh.stl_edge_facet_number_set
    __swig_getmethods__["facet_number"] = _admesh.stl_edge_facet_number_get
    if _newclass:facet_number = _swig_property(_admesh.stl_edge_facet_number_get, _admesh.stl_edge_facet_number_set)
    def __init__(self): 
        this = _admesh.new_stl_edge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_edge
    __del__ = lambda self : None;
stl_edge_swigregister = _admesh.stl_edge_swigregister
stl_edge_swigregister(stl_edge)

class stl_hash_edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_hash_edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_hash_edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _admesh.stl_hash_edge_key_set
    __swig_getmethods__["key"] = _admesh.stl_hash_edge_key_get
    if _newclass:key = _swig_property(_admesh.stl_hash_edge_key_get, _admesh.stl_hash_edge_key_set)
    __swig_setmethods__["facet_number"] = _admesh.stl_hash_edge_facet_number_set
    __swig_getmethods__["facet_number"] = _admesh.stl_hash_edge_facet_number_get
    if _newclass:facet_number = _swig_property(_admesh.stl_hash_edge_facet_number_get, _admesh.stl_hash_edge_facet_number_set)
    __swig_setmethods__["which_edge"] = _admesh.stl_hash_edge_which_edge_set
    __swig_getmethods__["which_edge"] = _admesh.stl_hash_edge_which_edge_get
    if _newclass:which_edge = _swig_property(_admesh.stl_hash_edge_which_edge_get, _admesh.stl_hash_edge_which_edge_set)
    __swig_setmethods__["next"] = _admesh.stl_hash_edge_next_set
    __swig_getmethods__["next"] = _admesh.stl_hash_edge_next_get
    if _newclass:next = _swig_property(_admesh.stl_hash_edge_next_get, _admesh.stl_hash_edge_next_set)
    def __init__(self): 
        this = _admesh.new_stl_hash_edge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_hash_edge
    __del__ = lambda self : None;
stl_hash_edge_swigregister = _admesh.stl_hash_edge_swigregister
stl_hash_edge_swigregister(stl_hash_edge)

class stl_neighbors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_neighbors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_neighbors, name)
    __repr__ = _swig_repr
    __swig_setmethods__["neighbor"] = _admesh.stl_neighbors_neighbor_set
    __swig_getmethods__["neighbor"] = _admesh.stl_neighbors_neighbor_get
    if _newclass:neighbor = _swig_property(_admesh.stl_neighbors_neighbor_get, _admesh.stl_neighbors_neighbor_set)
    __swig_setmethods__["which_vertex_not"] = _admesh.stl_neighbors_which_vertex_not_set
    __swig_getmethods__["which_vertex_not"] = _admesh.stl_neighbors_which_vertex_not_get
    if _newclass:which_vertex_not = _swig_property(_admesh.stl_neighbors_which_vertex_not_get, _admesh.stl_neighbors_which_vertex_not_set)
    def __init__(self): 
        this = _admesh.new_stl_neighbors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_neighbors
    __del__ = lambda self : None;
stl_neighbors_swigregister = _admesh.stl_neighbors_swigregister
stl_neighbors_swigregister(stl_neighbors)

class v_indices_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_indices_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, v_indices_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex"] = _admesh.v_indices_struct_vertex_set
    __swig_getmethods__["vertex"] = _admesh.v_indices_struct_vertex_get
    if _newclass:vertex = _swig_property(_admesh.v_indices_struct_vertex_get, _admesh.v_indices_struct_vertex_set)
    def __init__(self): 
        this = _admesh.new_v_indices_struct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_v_indices_struct
    __del__ = lambda self : None;
v_indices_struct_swigregister = _admesh.v_indices_struct_swigregister
v_indices_struct_swigregister(v_indices_struct)

class stl_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _admesh.stl_stats_header_set
    __swig_getmethods__["header"] = _admesh.stl_stats_header_get
    if _newclass:header = _swig_property(_admesh.stl_stats_header_get, _admesh.stl_stats_header_set)
    __swig_setmethods__["type"] = _admesh.stl_stats_type_set
    __swig_getmethods__["type"] = _admesh.stl_stats_type_get
    if _newclass:type = _swig_property(_admesh.stl_stats_type_get, _admesh.stl_stats_type_set)
    __swig_setmethods__["number_of_facets"] = _admesh.stl_stats_number_of_facets_set
    __swig_getmethods__["number_of_facets"] = _admesh.stl_stats_number_of_facets_get
    if _newclass:number_of_facets = _swig_property(_admesh.stl_stats_number_of_facets_get, _admesh.stl_stats_number_of_facets_set)
    __swig_setmethods__["max"] = _admesh.stl_stats_max_set
    __swig_getmethods__["max"] = _admesh.stl_stats_max_get
    if _newclass:max = _swig_property(_admesh.stl_stats_max_get, _admesh.stl_stats_max_set)
    __swig_setmethods__["min"] = _admesh.stl_stats_min_set
    __swig_getmethods__["min"] = _admesh.stl_stats_min_get
    if _newclass:min = _swig_property(_admesh.stl_stats_min_get, _admesh.stl_stats_min_set)
    __swig_setmethods__["size"] = _admesh.stl_stats_size_set
    __swig_getmethods__["size"] = _admesh.stl_stats_size_get
    if _newclass:size = _swig_property(_admesh.stl_stats_size_get, _admesh.stl_stats_size_set)
    __swig_setmethods__["bounding_diameter"] = _admesh.stl_stats_bounding_diameter_set
    __swig_getmethods__["bounding_diameter"] = _admesh.stl_stats_bounding_diameter_get
    if _newclass:bounding_diameter = _swig_property(_admesh.stl_stats_bounding_diameter_get, _admesh.stl_stats_bounding_diameter_set)
    __swig_setmethods__["shortest_edge"] = _admesh.stl_stats_shortest_edge_set
    __swig_getmethods__["shortest_edge"] = _admesh.stl_stats_shortest_edge_get
    if _newclass:shortest_edge = _swig_property(_admesh.stl_stats_shortest_edge_get, _admesh.stl_stats_shortest_edge_set)
    __swig_setmethods__["volume"] = _admesh.stl_stats_volume_set
    __swig_getmethods__["volume"] = _admesh.stl_stats_volume_get
    if _newclass:volume = _swig_property(_admesh.stl_stats_volume_get, _admesh.stl_stats_volume_set)
    __swig_setmethods__["number_of_blocks"] = _admesh.stl_stats_number_of_blocks_set
    __swig_getmethods__["number_of_blocks"] = _admesh.stl_stats_number_of_blocks_get
    if _newclass:number_of_blocks = _swig_property(_admesh.stl_stats_number_of_blocks_get, _admesh.stl_stats_number_of_blocks_set)
    __swig_setmethods__["connected_edges"] = _admesh.stl_stats_connected_edges_set
    __swig_getmethods__["connected_edges"] = _admesh.stl_stats_connected_edges_get
    if _newclass:connected_edges = _swig_property(_admesh.stl_stats_connected_edges_get, _admesh.stl_stats_connected_edges_set)
    __swig_setmethods__["connected_facets_1_edge"] = _admesh.stl_stats_connected_facets_1_edge_set
    __swig_getmethods__["connected_facets_1_edge"] = _admesh.stl_stats_connected_facets_1_edge_get
    if _newclass:connected_facets_1_edge = _swig_property(_admesh.stl_stats_connected_facets_1_edge_get, _admesh.stl_stats_connected_facets_1_edge_set)
    __swig_setmethods__["connected_facets_2_edge"] = _admesh.stl_stats_connected_facets_2_edge_set
    __swig_getmethods__["connected_facets_2_edge"] = _admesh.stl_stats_connected_facets_2_edge_get
    if _newclass:connected_facets_2_edge = _swig_property(_admesh.stl_stats_connected_facets_2_edge_get, _admesh.stl_stats_connected_facets_2_edge_set)
    __swig_setmethods__["connected_facets_3_edge"] = _admesh.stl_stats_connected_facets_3_edge_set
    __swig_getmethods__["connected_facets_3_edge"] = _admesh.stl_stats_connected_facets_3_edge_get
    if _newclass:connected_facets_3_edge = _swig_property(_admesh.stl_stats_connected_facets_3_edge_get, _admesh.stl_stats_connected_facets_3_edge_set)
    __swig_setmethods__["facets_w_1_bad_edge"] = _admesh.stl_stats_facets_w_1_bad_edge_set
    __swig_getmethods__["facets_w_1_bad_edge"] = _admesh.stl_stats_facets_w_1_bad_edge_get
    if _newclass:facets_w_1_bad_edge = _swig_property(_admesh.stl_stats_facets_w_1_bad_edge_get, _admesh.stl_stats_facets_w_1_bad_edge_set)
    __swig_setmethods__["facets_w_2_bad_edge"] = _admesh.stl_stats_facets_w_2_bad_edge_set
    __swig_getmethods__["facets_w_2_bad_edge"] = _admesh.stl_stats_facets_w_2_bad_edge_get
    if _newclass:facets_w_2_bad_edge = _swig_property(_admesh.stl_stats_facets_w_2_bad_edge_get, _admesh.stl_stats_facets_w_2_bad_edge_set)
    __swig_setmethods__["facets_w_3_bad_edge"] = _admesh.stl_stats_facets_w_3_bad_edge_set
    __swig_getmethods__["facets_w_3_bad_edge"] = _admesh.stl_stats_facets_w_3_bad_edge_get
    if _newclass:facets_w_3_bad_edge = _swig_property(_admesh.stl_stats_facets_w_3_bad_edge_get, _admesh.stl_stats_facets_w_3_bad_edge_set)
    __swig_setmethods__["original_num_facets"] = _admesh.stl_stats_original_num_facets_set
    __swig_getmethods__["original_num_facets"] = _admesh.stl_stats_original_num_facets_get
    if _newclass:original_num_facets = _swig_property(_admesh.stl_stats_original_num_facets_get, _admesh.stl_stats_original_num_facets_set)
    __swig_setmethods__["edges_fixed"] = _admesh.stl_stats_edges_fixed_set
    __swig_getmethods__["edges_fixed"] = _admesh.stl_stats_edges_fixed_get
    if _newclass:edges_fixed = _swig_property(_admesh.stl_stats_edges_fixed_get, _admesh.stl_stats_edges_fixed_set)
    __swig_setmethods__["degenerate_facets"] = _admesh.stl_stats_degenerate_facets_set
    __swig_getmethods__["degenerate_facets"] = _admesh.stl_stats_degenerate_facets_get
    if _newclass:degenerate_facets = _swig_property(_admesh.stl_stats_degenerate_facets_get, _admesh.stl_stats_degenerate_facets_set)
    __swig_setmethods__["facets_removed"] = _admesh.stl_stats_facets_removed_set
    __swig_getmethods__["facets_removed"] = _admesh.stl_stats_facets_removed_get
    if _newclass:facets_removed = _swig_property(_admesh.stl_stats_facets_removed_get, _admesh.stl_stats_facets_removed_set)
    __swig_setmethods__["facets_added"] = _admesh.stl_stats_facets_added_set
    __swig_getmethods__["facets_added"] = _admesh.stl_stats_facets_added_get
    if _newclass:facets_added = _swig_property(_admesh.stl_stats_facets_added_get, _admesh.stl_stats_facets_added_set)
    __swig_setmethods__["facets_reversed"] = _admesh.stl_stats_facets_reversed_set
    __swig_getmethods__["facets_reversed"] = _admesh.stl_stats_facets_reversed_get
    if _newclass:facets_reversed = _swig_property(_admesh.stl_stats_facets_reversed_get, _admesh.stl_stats_facets_reversed_set)
    __swig_setmethods__["backwards_edges"] = _admesh.stl_stats_backwards_edges_set
    __swig_getmethods__["backwards_edges"] = _admesh.stl_stats_backwards_edges_get
    if _newclass:backwards_edges = _swig_property(_admesh.stl_stats_backwards_edges_get, _admesh.stl_stats_backwards_edges_set)
    __swig_setmethods__["normals_fixed"] = _admesh.stl_stats_normals_fixed_set
    __swig_getmethods__["normals_fixed"] = _admesh.stl_stats_normals_fixed_get
    if _newclass:normals_fixed = _swig_property(_admesh.stl_stats_normals_fixed_get, _admesh.stl_stats_normals_fixed_set)
    __swig_setmethods__["number_of_parts"] = _admesh.stl_stats_number_of_parts_set
    __swig_getmethods__["number_of_parts"] = _admesh.stl_stats_number_of_parts_get
    if _newclass:number_of_parts = _swig_property(_admesh.stl_stats_number_of_parts_get, _admesh.stl_stats_number_of_parts_set)
    __swig_setmethods__["malloced"] = _admesh.stl_stats_malloced_set
    __swig_getmethods__["malloced"] = _admesh.stl_stats_malloced_get
    if _newclass:malloced = _swig_property(_admesh.stl_stats_malloced_get, _admesh.stl_stats_malloced_set)
    __swig_setmethods__["freed"] = _admesh.stl_stats_freed_set
    __swig_getmethods__["freed"] = _admesh.stl_stats_freed_get
    if _newclass:freed = _swig_property(_admesh.stl_stats_freed_get, _admesh.stl_stats_freed_set)
    __swig_setmethods__["facets_malloced"] = _admesh.stl_stats_facets_malloced_set
    __swig_getmethods__["facets_malloced"] = _admesh.stl_stats_facets_malloced_get
    if _newclass:facets_malloced = _swig_property(_admesh.stl_stats_facets_malloced_get, _admesh.stl_stats_facets_malloced_set)
    __swig_setmethods__["collisions"] = _admesh.stl_stats_collisions_set
    __swig_getmethods__["collisions"] = _admesh.stl_stats_collisions_get
    if _newclass:collisions = _swig_property(_admesh.stl_stats_collisions_get, _admesh.stl_stats_collisions_set)
    __swig_setmethods__["shared_vertices"] = _admesh.stl_stats_shared_vertices_set
    __swig_getmethods__["shared_vertices"] = _admesh.stl_stats_shared_vertices_get
    if _newclass:shared_vertices = _swig_property(_admesh.stl_stats_shared_vertices_get, _admesh.stl_stats_shared_vertices_set)
    __swig_setmethods__["shared_malloced"] = _admesh.stl_stats_shared_malloced_set
    __swig_getmethods__["shared_malloced"] = _admesh.stl_stats_shared_malloced_get
    if _newclass:shared_malloced = _swig_property(_admesh.stl_stats_shared_malloced_get, _admesh.stl_stats_shared_malloced_set)
    def __init__(self): 
        this = _admesh.new_stl_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_stats
    __del__ = lambda self : None;
stl_stats_swigregister = _admesh.stl_stats_swigregister
stl_stats_swigregister(stl_stats)

class stl_file(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_file, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_file, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fp"] = _admesh.stl_file_fp_set
    __swig_getmethods__["fp"] = _admesh.stl_file_fp_get
    if _newclass:fp = _swig_property(_admesh.stl_file_fp_get, _admesh.stl_file_fp_set)
    __swig_setmethods__["facet_start"] = _admesh.stl_file_facet_start_set
    __swig_getmethods__["facet_start"] = _admesh.stl_file_facet_start_get
    if _newclass:facet_start = _swig_property(_admesh.stl_file_facet_start_get, _admesh.stl_file_facet_start_set)
    __swig_setmethods__["edge_start"] = _admesh.stl_file_edge_start_set
    __swig_getmethods__["edge_start"] = _admesh.stl_file_edge_start_get
    if _newclass:edge_start = _swig_property(_admesh.stl_file_edge_start_get, _admesh.stl_file_edge_start_set)
    __swig_setmethods__["heads"] = _admesh.stl_file_heads_set
    __swig_getmethods__["heads"] = _admesh.stl_file_heads_get
    if _newclass:heads = _swig_property(_admesh.stl_file_heads_get, _admesh.stl_file_heads_set)
    __swig_setmethods__["tail"] = _admesh.stl_file_tail_set
    __swig_getmethods__["tail"] = _admesh.stl_file_tail_get
    if _newclass:tail = _swig_property(_admesh.stl_file_tail_get, _admesh.stl_file_tail_set)
    __swig_setmethods__["M"] = _admesh.stl_file_M_set
    __swig_getmethods__["M"] = _admesh.stl_file_M_get
    if _newclass:M = _swig_property(_admesh.stl_file_M_get, _admesh.stl_file_M_set)
    __swig_setmethods__["neighbors_start"] = _admesh.stl_file_neighbors_start_set
    __swig_getmethods__["neighbors_start"] = _admesh.stl_file_neighbors_start_get
    if _newclass:neighbors_start = _swig_property(_admesh.stl_file_neighbors_start_get, _admesh.stl_file_neighbors_start_set)
    __swig_setmethods__["v_indices"] = _admesh.stl_file_v_indices_set
    __swig_getmethods__["v_indices"] = _admesh.stl_file_v_indices_get
    if _newclass:v_indices = _swig_property(_admesh.stl_file_v_indices_get, _admesh.stl_file_v_indices_set)
    __swig_setmethods__["v_shared"] = _admesh.stl_file_v_shared_set
    __swig_getmethods__["v_shared"] = _admesh.stl_file_v_shared_get
    if _newclass:v_shared = _swig_property(_admesh.stl_file_v_shared_get, _admesh.stl_file_v_shared_set)
    __swig_setmethods__["stats"] = _admesh.stl_file_stats_set
    __swig_getmethods__["stats"] = _admesh.stl_file_stats_get
    if _newclass:stats = _swig_property(_admesh.stl_file_stats_get, _admesh.stl_file_stats_set)
    def __init__(self): 
        this = _admesh.new_stl_file()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _admesh.delete_stl_file
    __del__ = lambda self : None;
stl_file_swigregister = _admesh.stl_file_swigregister
stl_file_swigregister(stl_file)


def stl_open(*args):
  return _admesh.stl_open(*args)
stl_open = _admesh.stl_open

def stl_close(*args):
  return _admesh.stl_close(*args)
stl_close = _admesh.stl_close

def stl_stats_out(*args):
  return _admesh.stl_stats_out(*args)
stl_stats_out = _admesh.stl_stats_out

def stl_print_edges(*args):
  return _admesh.stl_print_edges(*args)
stl_print_edges = _admesh.stl_print_edges

def stl_print_neighbors(*args):
  return _admesh.stl_print_neighbors(*args)
stl_print_neighbors = _admesh.stl_print_neighbors

def stl_write_ascii(*args):
  return _admesh.stl_write_ascii(*args)
stl_write_ascii = _admesh.stl_write_ascii

def stl_write_binary(*args):
  return _admesh.stl_write_binary(*args)
stl_write_binary = _admesh.stl_write_binary

def stl_check_facets_exact(*args):
  return _admesh.stl_check_facets_exact(*args)
stl_check_facets_exact = _admesh.stl_check_facets_exact

def stl_check_facets_nearby(*args):
  return _admesh.stl_check_facets_nearby(*args)
stl_check_facets_nearby = _admesh.stl_check_facets_nearby

def stl_remove_unconnected_facets(*args):
  return _admesh.stl_remove_unconnected_facets(*args)
stl_remove_unconnected_facets = _admesh.stl_remove_unconnected_facets

def stl_write_vertex(*args):
  return _admesh.stl_write_vertex(*args)
stl_write_vertex = _admesh.stl_write_vertex

def stl_write_facet(*args):
  return _admesh.stl_write_facet(*args)
stl_write_facet = _admesh.stl_write_facet

def stl_write_edge(*args):
  return _admesh.stl_write_edge(*args)
stl_write_edge = _admesh.stl_write_edge

def stl_write_neighbor(*args):
  return _admesh.stl_write_neighbor(*args)
stl_write_neighbor = _admesh.stl_write_neighbor

def stl_write_quad_object(*args):
  return _admesh.stl_write_quad_object(*args)
stl_write_quad_object = _admesh.stl_write_quad_object

def stl_verify_neighbors(*args):
  return _admesh.stl_verify_neighbors(*args)
stl_verify_neighbors = _admesh.stl_verify_neighbors

def stl_fill_holes(*args):
  return _admesh.stl_fill_holes(*args)
stl_fill_holes = _admesh.stl_fill_holes

def stl_fix_normal_directions(*args):
  return _admesh.stl_fix_normal_directions(*args)
stl_fix_normal_directions = _admesh.stl_fix_normal_directions

def stl_fix_normal_values(*args):
  return _admesh.stl_fix_normal_values(*args)
stl_fix_normal_values = _admesh.stl_fix_normal_values

def stl_reverse_all_facets(*args):
  return _admesh.stl_reverse_all_facets(*args)
stl_reverse_all_facets = _admesh.stl_reverse_all_facets

def stl_translate(*args):
  return _admesh.stl_translate(*args)
stl_translate = _admesh.stl_translate

def stl_scale(*args):
  return _admesh.stl_scale(*args)
stl_scale = _admesh.stl_scale

def stl_rotate_x(*args):
  return _admesh.stl_rotate_x(*args)
stl_rotate_x = _admesh.stl_rotate_x

def stl_rotate_y(*args):
  return _admesh.stl_rotate_y(*args)
stl_rotate_y = _admesh.stl_rotate_y

def stl_rotate_z(*args):
  return _admesh.stl_rotate_z(*args)
stl_rotate_z = _admesh.stl_rotate_z

def stl_mirror_xy(*args):
  return _admesh.stl_mirror_xy(*args)
stl_mirror_xy = _admesh.stl_mirror_xy

def stl_mirror_yz(*args):
  return _admesh.stl_mirror_yz(*args)
stl_mirror_yz = _admesh.stl_mirror_yz

def stl_mirror_xz(*args):
  return _admesh.stl_mirror_xz(*args)
stl_mirror_xz = _admesh.stl_mirror_xz

def stl_open_merge(*args):
  return _admesh.stl_open_merge(*args)
stl_open_merge = _admesh.stl_open_merge

def stl_generate_shared_vertices(*args):
  return _admesh.stl_generate_shared_vertices(*args)
stl_generate_shared_vertices = _admesh.stl_generate_shared_vertices

def stl_write_off(*args):
  return _admesh.stl_write_off(*args)
stl_write_off = _admesh.stl_write_off

def stl_write_dxf(*args):
  return _admesh.stl_write_dxf(*args)
stl_write_dxf = _admesh.stl_write_dxf

def stl_write_vrml(*args):
  return _admesh.stl_write_vrml(*args)
stl_write_vrml = _admesh.stl_write_vrml

def stl_calculate_normal(*args):
  return _admesh.stl_calculate_normal(*args)
stl_calculate_normal = _admesh.stl_calculate_normal

def stl_normalize_vector(*args):
  return _admesh.stl_normalize_vector(*args)
stl_normalize_vector = _admesh.stl_normalize_vector

def stl_calculate_volume(*args):
  return _admesh.stl_calculate_volume(*args)
stl_calculate_volume = _admesh.stl_calculate_volume
# This file is compatible with both classic and new-style classes.


