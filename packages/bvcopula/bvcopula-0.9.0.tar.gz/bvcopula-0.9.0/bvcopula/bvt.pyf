  !    -*- f90 -*-
  ! Note: the context of this file is case sensitive.
  
  python module bvt ! in 
  interface  ! in :bvt
     subroutine qt(u,x,df) ! in :bvt:bvt.f90
       real(kind=8), intent(in) :: u
       real(kind=8), intent(out) :: x
       real(kind=8), intent(in) :: df
     end subroutine qt
     subroutine qt_vec(u,x,df,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u
       real(kind=8) dimension(n),depend(n),intent(out) :: x
       real(kind=8) intent(in):: df
       integer, optional,check(len(u)>=n),depend(u),intent(hide) :: n=len(u)
     end subroutine qt_vec
     ! function student(t,ndf,normdev) result (fn_val) ! in :bvt:bvt.f90
     !     real(kind=8) intent(in) :: t
     !     real(kind=8) intent(in) :: ndf
     !     external normdev
     !     real(kind=8) :: fn_val
     !     interface  ! in :bvt:bvt.f90:student
     !         function normdev(x) result (fx) ! in :bvt:bvt.f90:student:unknown_interface
     !             real(kind=8) intent(in) :: x
     !             real(kind=8) :: fx
     !         end function normdev
     !     end interface 
     ! end function student
     subroutine pt(x,u,nu) ! in :bvt:bvt.f90
       real(kind=8),intent(in) :: x
       real(kind=8),intent(out) :: u
       real(kind=8),intent(in) :: nu
     end subroutine pt
     subroutine pt_vec(x,u,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: x
       real(kind=8) dimension(n),depend(n),intent(out) :: u
       real(kind=8) intent(in):: nu
       integer, optional,check(len(x)>=n),depend(x),intent(hide) :: n=len(x)
     end subroutine pt_vec
     subroutine pbv_t_f(u1,u2,res,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u1
       real(kind=8) dimension(n),depend(n),intent(in) :: u2
       real(kind=8) dimension(n),depend(n),intent(out) :: res
       real(kind=8) ,intent(in):: rho
       real(kind=8) ,intent(in):: nu
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
     end subroutine pbv_t_f
     subroutine dt(x,f_x,nu) ! in :bvt:bvt.f90
       real(kind=8) intent(in):: x
       real(kind=8) intent(out):: f_x
       real(kind=8) intent(in):: nu
     end subroutine dt
     subroutine dt_vec(x,f_x,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: x
       real(kind=8) dimension(n),depend(n),intent(out) :: f_x
       real(kind=8) intent(in):: nu
       integer, optional,check(len(x)>=n),depend(x),intent(hide) :: n=len(x)
     end subroutine dt_vec
     subroutine dbv_t_f(u1,u2,res,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u1
       real(kind=8) dimension(n),depend(n),intent(in) :: u2
       real(kind=8) dimension(n),depend(n),intent(out) :: res
       real(kind=8) intent(in):: rho
       real(kind=8) intent(in):: nu
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
     end subroutine dbv_t_f
     subroutine rbv_t_f(u1,u2,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),depend(n),intent(out) :: u1
       real(kind=8) dimension(n),depend(n),intent(out) :: u2
       real(kind=8) intent(in):: rho
       real(kind=8) intent(in):: nu
       integer intent(in):: n
     end subroutine rbv_t_f
     subroutine bv_t_hfunc_f(u1,u2,res,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u1
       real(kind=8) dimension(n),depend(n),intent(in) :: u2
       real(kind=8) dimension(n),depend(n),intent(out) :: res
       real(kind=8) intent(in):: rho
       real(kind=8) intent(in):: nu
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
     end subroutine bv_t_hfunc_f
     subroutine bv_t_inv_hfunc_f(u1,u2,res,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u1
       real(kind=8) dimension(n),depend(n),intent(in) :: u2
       real(kind=8) dimension(n),depend(n),intent(out) :: res
       real(kind=8) intent(in):: rho
       real(kind=8) intent(in):: nu
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
     end subroutine bv_t_inv_hfunc_f
     function bv_t_loglik_f(u1,u2,rho,nu,n) ! in :bvt:bvt.f90
       real(kind=8) dimension(n),intent(in) :: u1
       real(kind=8) dimension(n),depend(n),intent(in) :: u2
       real(kind=8) intent(in):: rho
       real(kind=8) intent(in):: nu
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
       real(kind=8) intent(out):: bv_t_loglik_f
     end function bv_t_loglik_f
     subroutine bv_t_mle(u1,u2,nnum,res,ll) ! in :bvt:bvt.f90
       real(kind=8) dimension(nnum),intent(in) :: u1
       real(kind=8) dimension(nnum),depend(nnum),intent(in) :: u2
       integer, optional,check(len(u1)>=nnum),depend(u1),intent(hide) :: nnum=len(u1)
       real(kind=8) dimension(2),intent(out) :: res
       real(kind=8) intent(out):: ll
     end subroutine bv_t_mle
  end interface
end programmodule bvt

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
