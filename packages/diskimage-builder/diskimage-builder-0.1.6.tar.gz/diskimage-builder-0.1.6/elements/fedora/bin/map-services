#!/usr/bin/env python

# Copyright 2012 Hewlett-Packard Development Company, L.P.
# Copyright 2014 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import os
import sys

# Manually maintained for brevity; consider making this compiled from
# distromatch or other rich data sources.
# TripleO service name on the left, Fedora on the right.
service_map = {
        'glance-api': 'openstack-glance-api',
        'glance-reg': 'openstack-glance-registry',
        'heat-api': 'openstack-heat-api',
        'heat-api-cfn': 'openstack-heat-api-cfn',
        'heat-api-cloudwatch': 'openstack-heat-api-cloudwatch',
        'heat-engine': 'openstack-heat-engine',
        'keystone': 'openstack-keystone',
        'mysql': 'mysqld',
        'nova-conductor': 'openstack-nova-conductor',
        'nova-api': 'openstack-nova-api',
        'nova-cert': 'openstack-nova-cert',
        'nova-scheduler': 'openstack-nova-scheduler',
        'nova-consoleauth': 'openstack-nova-consoleauth',
        'nova-compute': 'openstack-nova-compute',
        'swift-proxy': 'openstack-swift-proxy',
        'swift-account': 'openstack-swift-account',
        'swift-container': 'openstack-swift-container',
        'swift-object': 'openstack-swift-object',
        'cinder-api': 'openstack-cinder-api',
        'cinder-scheduler': 'openstack-cinder-scheduler',
        'cinder-volume': 'openstack-cinder-volume',
        'tgt': 'tgtd',
    }

for arg in sys.argv[1:]:
    # We need to support the service name being different when installing from
    # source vs. packages. So, if the requested service file already exists,
    # just use that.
    if os.path.exists('/lib/systemd/system/%s.service' % arg):
        print(arg)
    else:
        print(service_map.get(arg, arg))
sys.exit(0)
