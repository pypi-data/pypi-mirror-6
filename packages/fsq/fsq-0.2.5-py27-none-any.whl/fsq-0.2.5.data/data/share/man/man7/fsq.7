.TH fsq 7 "2012-07-12" "Axial" "Axial System Commands Manual"
.SH NAME
fsq -
.BR f ile
.BR s ystem
.BR q ueue
.SH SYNOPSIS
.B import
.I fsq
.SH DESCRIPTION
.B fsq
is a standard for implementing queueing structures in
.I POSIX
file-systems.
.B fsq
provides a standard for both directory layouts and work-item naming, which
allow for idempotent work-item construction, atomic enqueueing, atomic
failure, and atomic completion.

Each
.B fsq
queue conforms to the following directory structure:
.TP
.I /var/fsq/a_queue/
The queue
.I a_queue
is installed to the default
.IR FSQ_ROOT ,
.IR /var/fsq/.
To enqueue a file to this queue, use the enqueue function:
.sp
.BR ""	 fsq. enqueue ('a_queue',
\'/path/to/file', 'args', 'to', 'enqueue')
.sp
or to enqueue a string, use the senqueue function:
.sp
.BR ""	 fsq. senqueue ('a_queue',
\'a string body for my work-item', 'args', 'to', 'enqueue')
.TP
.I /var/fsq/a_queue/queue
The
.I queue
directory within
.I a_queue
is the location where work-items are queued to. Following the above
.B enqueue
or
.B senqueue
function calls, you should be able to see 2 files in the
.I q_queue/queue
directory:
.sp
_20120710213904_0_13044_mss_0_args_to_enqueue
.br
_20120710213904_1_13044_mss_0_args_to_enqueue
.br
+|-----+------| + |-+-| |+| + |------+------|
.br
|      |        |   |    |  |        |
.br
|      |        |   |    |  |        +->
.I FSQ_DELIMITER
seperated
.br
|      |        |   |    |  |            arguments
.br
|      |        |   |    |  +->
.BR tries :
number of failed attempts
.br
|      |        |   |    |      to process
.br
|      |        |   |    +->
.BR hostname :
the name of the host on
.br
|      |        |   |        which the work-item was enqueued.
.br
|      |        |   +->
.B pid
of the process which enqueued the
.br
|      |        |       work-item
.br
|      |        +->
.BR entropy :
should a work-item be generated
.br
|      |            with the same arguments,
.BR pid ,
.BR hostname
.br
|      |            and
.BR timestamp ,
.B entropy
is incremented to
.br
|      |            generate uniqueness.
.br
|      +->
.B timestamp
in
.I FSQ_TIMEFMT
format
.br
+->
.I FSQ_DELIMITER
used at enqueue time
.sp
.TP
.I /var/fsq/a_queue/tmp
The
.I tmp
directory within
.I a_queue
is a location for constructing work-items prior to enqueueing them to the
.I queue
directory. In the above
.B enqueue
and
.B senqueue
calls, the work-item files were initially constructed in
.IR tmp ,
then linked into
.I queue
and the
.I tmp
entry was removed.
.TP
.I /var/fsq/a_queue/done
The
.I done
directory within
.I a_queue
is a location for storing successfully completed work-items following work.
Items may be marked as done, by using the
.B done
function (typically done during a
.BR scan ):
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.BR "" fsq. done (i)
.sp
The function
.B success
may also be used:
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.BR "" fsq. success (i)
.sp
The
.I done
directory serves as a sort of book-keeping, but it should routinely be pruned,
via cron or some such.
.TP
.I /var/fsq/a_queue/fail
The
.I fail
directory within
.I a_queue
is a location for storing failed work-items following work. Items may be
marked as failed, by using the
.B fail
function:
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.br
.BR ""		fsq. fail (i)
.sp
The fail_perm function may also be used:
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.br
		try:
.br
			raise Exception
.br
		except:
.br
.BR ""			fsq. fail_perm (i)
.sp
permanent failure may also result if an work-item is older than,
.I FSQ_TTL
or if the work-item has been retries more than
.I FSQ_MAX_TRIES
by way of
.I fail_tmp:
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.br
		try:
.br
			raise Exception
.br
		except:
.br
.BR ""			fsq. fail_tmp (i)
.sp
Alternatively,
.I retry
may be used:
.sp
	for i in
.BR "" fsq. scan ('a_queue'):
.br
		try:
.br
			raise Exception
.br
		except:
.br
.BR ""			fsq. retry (i)
.sp
.TP
.I /var/fsq/a_queue/down
The
.I down
file within
.I a_queue
is a file controlling wether or not a queue is available to be scanned. If
.I down
exists, the queue will not be scanned.
.I down
may be created by using the
.B down
function:
.sp
.BR ""	fsq. down ('a_queue')
.sp
.I down
may be removed by using the
.B up
function:
.sp
.BR "" 	fsq. up ('a_queue')
.sp
Queues with
.I down
may be scanned, by passing
.BR None " or " False
to
.BR scan :
.sp
	fsq.scan('a_queue',
.BR down=None )
.sp
.SH ENVIRONMENT
The
.B fsq
suite and python library makes use of a number of
.IR FSQ_ PREFIXED
environment variables, which modify its behavior. Each environment variable
is also available as a package-level constant. The preferred method of
setting the value of a constant is via the
.B set_const
method:
.sp
	fsq.set_const('FSQ_ROOT', 'new/root')
.sp
The preferred method of retrieving the value of a constant is via the
.B const
method:
.sp
	root = fsq.const('FSQ_ROOT')
.sp
The Following environment variables are supported:
.TP
.I FSQ_CHARSET
.br
.B fsq
is entirely unicode internally,
.I FSQ_CHARSET
is used to decode all passed strings to unicode.
.sp
default:
.B utf8
.TP
.I FSQ_DELIMITER
.br
.B fsq
stores arguments in file\-names, delimited by
.IR FSQ_DELIMITER .
.sp
default:
.B _
.TP
.I FSQ_ENCODE
.br
.B fsq
encodes non-filesystem safe characters as well as literal delimiters in
arguments as
.I FSQ_ENCODE
prefixed hexidecimal representations of the character's ordinal value; ex:
.IR %5F .
.sp
default:
.B %
.TP
.I FSQ_TIMEFMT
.br
.BR strftime (3)
format to use for work-item timestamp conversion.
.sp
default:
.B %Y%m%d%H%M%S
.TP
.I FSQ_QUEUE
.br
Name of the
.I queue
directory.
.I FSQ_QUEUE
may not contain `/' or be `.' or `..'.
.sp
default:
.B queue
.TP
.I FSQ_DONE
.br
Name of the
.I done
directory.
.I FSQ_DONE
may not contain `/' or be `.' or `..'.
.sp
default:
.B done
.TP
.I FSQ_FAIL
.br
Name of the
.I fail
directory.
.I FSQ_FAIL
may not contain `/' or be `.' or `..'.
.sp
default:
.B fail
.TP
.I FSQ_TMP
.br
Name of the
.I tmp
directory.
.I FSQ_TMP
may not contain `/' or be `.' or `..'.
.sp
default:
.B tmp
.TP
.I FSQ_DOWN
.br
Name of the
.I down
file.
.I FSQ_DOWN
may not contain `/' or be `.' or `..'.
.sp
default:
.B down
.TP
.I FSQ_TRIGGER
.br
Name of the
.I trigger
file. If
.I FSQ_USE_TRIGGER
is specified,
.B install
will attempt to
.BR mkfifo (2)
.I FSQ_TRIGGER
for the specified queue. The
.B trigger_pull
function writes one byte (non-blocking) to
.I FSQ_TRIGGER
for the specified queue.
.I FSQ_TRIGGER
may not contain `/' or be `.' or `..'.
.sp
default:
.B trigger-s
.TP
.I FSQ_ROOT
.br
Path to parent directory for queues.
.sp
default:
.B /var/fsq
.TP
.I FSQ_ITEM_GROUP
.br
Name or gid of group owner for work-items. If
.I FSQ_ITEM_GROUP
is a name,
.B fsq
uses
.BR getgrent (3)
to determine gid. If
.I FSQ_ITEM_GROUP
is unset, group ownership is preserved based on the normal rules for
.BR open (2)
with
.BR O_CREAT .
.TP
.I FSQ_ITEM_USER
.br
Name or uid of user owner for work-items. If
.I FSQ_ITEM_USER
is a name,
.B fsq
uses
.BR getpwent (3)
to determine uid. If
.I FSQ_ITEM_USER
is unset, user ownership is preserved based on the normal rules for
.BR open (2)
with
.BR O_CREAT .
.TP
.I FSQ_QUEUE_GROUP
.br
Name or gid of group owner for
.I queue
directories and subdirectories (e.g.
.IR fail ).
If
.I FSQ_QUEUE_GROUP
is a name,
.B fsq
uses
.BR getgrent (3)
to determine gid. If
.I FSQ_QUEUE_GROUP
is unset, group ownership is set to the gid of the parent process via
.BR getgid (2).
.TP
.I FSQ_QUEUE_USER
.br
Name or uid of user owner for
.I queue
directories and subdirectories (e.g.
.IR fail ).
If
.I FSQ_QUEUE_USER
is a name,
.B fsq
uses
.BR getpwent (3)
to determine uid. If
.I FSQ_QUEUE_USER
is unset, user ownership is set to the uid of the parent process via
.BR getuid (2).
.TP
.I FSQ_ITEM_MODE
.br
Octal mode for work-items.
.sp
default:
.B 00640
.TP
.I FSQ_QUEUE_MODE
.br
Octal mode for queue directories.
.sp
default:
.B 02770
.TP
.I FSQ_FAIL_TMP
.br
Integer code for temporary failure.
.I FSQ_FAIL_TMP
is used by
.B fsq
utilities as a temporary failure exit code and by the python
.B fsq
library to determine temporary failure by the
.BR done " and " fail
functions.
.sp
default:
.B 111
.TP
.I FSQ_FAIL_PERM
.br
Integer code for permanent failure.
.I FSQ_FAIL_PERM
is used by
.B fsq
utilities as a permanent failure exit code and by the python
.B fsq
library to determine permanent failure by the
.BR done " and " fail
functions.
.sp
default:
.B 100
.TP
.I FSQ_SUCCESS
.br
Integer code for success.
.I FSQ_SUCCESS
is used by
.B fsq
utilities as a successful exit code and by the python
.B fsq
library to determine successful completion by the
.BR done
function.
.sp
default:
.B 0
.TP
.I FSQ_USE_TRIGGER
.br
Boolean flag to cause
.B install
to install a
.BR fifo (7)
to
.I FSQ_TRIGGER
for the specified queue.
.sp
default:
.B 1
.TP
.I FSQ_LOCK
.br
Boolean flag to cause
.B scan
to lock or not lock. Setting
.I FSQ_LOCK
to 0 should only be done if you do not intend on processing work (e.g. you are
introspecting). If
.I FSQ_LOCK
is 1
.B scan
will attempt to acquire an exclusive lock
.BR "" ( LOCK_EX | LOCK_NB )
using
.BR flock (2)
prior to yielding an work-item. If
.B scan
cannot immediately acquire a lock, the locked work-item will not be yielded.
.sp
default:
.B 1
.TP
.I FSQ_MAX_TRIES
.br
Maximum number of temporary failures (or retries) before a work-item is failed
permanently. A value of
.I 0
for
.I FSQ_MAX_TRIES
will cause
.B fsq
to retry indefinitely.
.sp
default:
.B 1
.TP
.I FSQ_TTL
Time-to-live in seconds for a work-item. Queue work-items will be failed
permanently if their
.I timestamp
is greater-than
.I FSQ_TTL
seconds prior to the current system time. A value of
.I 0
for
.I FSQ_TTL
will cause
.B fsq
to never timeout work-items.
.sp
default:
.B 0
.SH BUGS
The
.BR enqueue ", " senqueue ", " venqueue ", and " vsenqueue
functions make use of
.BR link (2),
as such
.I FSQ_TMP
and
.I FSQ_QUEUE
must be on the same file-system, else the operation will fail with
.BR EXDEV .
The
.BR fail ", " fail_tmp ", " fail_perm ", " done ", and " success
functions make use of
.BR rename (2),
as such
.IR FSQ_DONE ", " FSQ_FAIL ", and " FSQ_QUEUE
must also be on the same file-system, else the operation will also fail with
.BR EXDEV .
.SH "SEE ALSO"
.BR mkfsqueue "(1), " fsq "(1), " open "(2), " getgid "(2), "getuid (2),
.BR fcntl "(2), " flock "(2), " getpwent "(3), " getgrent (3)
