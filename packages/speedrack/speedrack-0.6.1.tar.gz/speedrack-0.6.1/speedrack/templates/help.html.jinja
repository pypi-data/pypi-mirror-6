{% extends "layout.html.jinja" %}
{% from "helpers/link_to.html.jinja" import link_to %}
{% from "helpers/file.html.jinja" import mono_file_summary %}

{% block navigation_list -%}
{{ render_nav('help') }}
{%- endblock navigation_list %}

{%- block content %}

<div class="container-fluid">

  {%- with messages = get_flashed_messages(with_categories=True) %}
  {%- if messages %}
    {% for category, message in messages %}
      {{ render_flash(message, category) }}
    {% endfor %}
  {% endif -%}
  {% endwith -%}

  <h2>Status Codes</h2>
  <table class="table table-striped">
    {% for status in get_all_status() %}
    <tr>
      <td><span class="label label-{{ status|status_severity }}">{{ status }}</span></td>
      <td>{{ get_status_description(status) }}</td>
    </tr>
    {% endfor %}
  </table>

  <h2>Task Execution</h2>

  <h3>Interval vs Cron</h3>

  <p>In Speedrack terms, interval and cron jobs are the same until you talk about execution error cases.</p>
  <p>Cron jobs are workaholics and view missed runs as a queue to work through.</p>
  <p>Interval jobs are laid back. Every <em>interval</em> time, speedrack will attempt to launch the job in question. If a previous iteration is still running, it will go and get a drink and chill.</p>

  <h3>Scheduling by Interval</h3>
  <p>A simple joined string: <tt>1h10m</tt> means every one hour, ten minutes. Full vocabulary:</p>
  <pre class="literal-block">{ 'M': month, 'w': week, 'd': day, 'h': hour, 'm': minute, 's': second }</pre>

  <h3>Scheduling by cron</h3>
  <p>See APScheduler's documentation for <a class="reference external" href="http://readthedocs.org/docs/apscheduler/en/latest/modules/scheduler.html#apscheduler.scheduler.Scheduler.add_cron_job">add_cron_job</a>. In summary:</p>
  <pre class="literal-block">year - 4-digit year to run on
month - month to run on (1-12)
day - day of month to run on (1-31)
week - week of the year to run on (1-53)
day_of_week - weekday to run on (0-6, 0 = Monday; or "mon","tue",...)
hour - hour to run on (0-23)
second - second to run on (0-59)</pre>
  <p>(There are also fancier <a href="http://packages.python.org/APScheduler/cronschedule.html#expression-types">expression types</a> available.)</p>
  <p>Examples:</p>
  <ul class="simple">
    <li><tt>{ &quot;day_of_week&quot;: 2, &quot;hour&quot;: 23 }</tt>: Wednesdays at 23:00</li>
    <li><tt>{ &quot;day&quot;: 2, &quot;hour&quot;: 23 }</tt>: The 2nd of every month at 23:00</li>
    <li><tt>{ &quot;hour&quot;: 23 }</tt>: Every day at 23:00</li>
  </ul>

  <h3>Run Now</h3>
  <p>Using <tt>Run Now</tt> does not modify the next launch time and <strong>executes in a separate queue</strong>. Your <tt>Run Now</tt> is a parallel execution that happens <em>in addition</em> to your other scheduling. Be aware of the following:</p>
  <ul class="simple">
    <li>Start at 00:00:00, cron set to every 30m.</li>
    <li>At 00:29:00, click <tt>Run Now</tt>, starts running.</li>
    <li>At 00:30:00, Speedrack executes the scheduled task, perhaps in parallel with the manually submitted one.</p>
  </ul>

  <h3>Suspend</h3>
  <p>
    Using <tt>Suspend</tt> puts a task into a special queue which prevents it from being executed. This is useful when you know that a dependent service is going to be offline. <strong>Using <tt>Suspend</tt> reloads the config file, and reloading the config file resets intervals.</strong>
  </p>
  
  <h2>Active/Inactive Tasks</h2>

  <dl>
    <dt>Active</dt>
    <dd>currently running; scheduled via (re)loading <code>&lt;arg&gt;.yaml</code></dd>

    <dt>Inactive</dt>
    <dd>discovered histories in the same directory set by <code>JOB_ROOT_DIR</code>. Inactive jobs don't have a <tt>Run Now</tt> ability, and <code>max_runs</code> is not respected.</dd>
  </dl>

  <h2>Task Settings</h2>

  <dl>

    <dt><code>name</code></dt>
    <dd>The task history for a task is stored via directory name, based on task name. Changing this name resets bookkeeping for the task and probably leaves an inactive task in its wake.</dd>

    <dt><code>descriptions</code></dt>
    <dd>140 characters for your task will make it read nicer.</dd>

    <dt><code>fail_by_stderr</code></dt>
    <dd>Default True. Set to 'false' if generating stderr is not a task failure.</dd>

    <dt><code>fail_by_retcode</code></dt>
    <dd>Default True. Set to 'false' if a return code of nonzero is not a task failure.</dd>

    <dt><code>max_keep</code></dt>
    <dd>Only effective for active tasks.</dd>

    <dt><code>spam</code></dt>
    <dd>Will send a notification email, win or lose.</dd>

    <dt><code>spam_fail</code></dt>
    <dd>Will send a notification email *on each and every failure*. If you set this to monitor a service for uptime, and that service goes down, expect speedrack to flood you with failure notifications.</dd>

    <dt><code>sudo_user</code></dt>
    <dd>Execute task as this user. (Requires password-free sudo execution privileges)

  </dl>

  <h2>Reload Config resets intervals</h2>

  <p><tt>Reload Config</tt> resets intervals.</p>
  <p>
    <em><tt>Reload Config</tt> resets intervals.</em>
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
    <tt>Reload Config</tt> resets intervals.
  </p>
  <p><strong><tt>Reload Config</tt> resets intervals.</strong></p>

</div>

{% endblock content -%}
