#!/usr/bin/env python

from arvados.fuse import * 
import arvados
import subprocess
import argparse

if __name__ == '__main__':
    # Handle command line parameters
    parser = argparse.ArgumentParser(
        description='Mount Keep data under the local filesystem.',
        epilog="""
Note: When using the --exec feature, you must either specify the
mountpoint before --exec, or mark the end of your --exec arguments
with "--".
""")
    parser.add_argument('mountpoint', type=str, help="""Mount point.""")
    parser.add_argument('--collection', type=str, help="""Collection locator""")
    parser.add_argument('--debug', action='store_true', help="""Debug mode""")
    parser.add_argument('--exec', type=str, nargs=argparse.REMAINDER,
                        dest="exec_args", metavar=('command', 'args', '...', '--'),
                        help="""Mount, run a command, then unmount and exit""")

    args = parser.parse_args()

    # Create the request handler
    operations = Operations(os.getuid(), os.getgid())

    if args.collection != None:
        # Set up the request handler with the collection at the root
        e = operations.inodes.add_entry(Directory(llfuse.ROOT_INODE))
        operations.inodes.load_collection(e, arvados.CollectionReader(arvados.Keep.get(args.collection)))
    else:
        # Set up the request handler with the 'magic directory' at the root
        operations.inodes.add_entry(MagicDirectory(llfuse.ROOT_INODE, operations.inodes))

    # FUSE options, see mount.fuse(8)
    opts = []

    # Enable FUSE debugging (logs each FUSE request)
    if args.debug:
        opts += ['debug']    
    
    # Initialize the fuse connection
    llfuse.init(operations, args.mountpoint, opts)

    if args.exec_args:
        t = threading.Thread(None, lambda: llfuse.main())
        t.start()

        # wait until the driver is finished initializing
        operations.initlock.wait()

        rc = 255
        try:
            rc = subprocess.call(args.exec_args, shell=False)
        except OSError as e:
            sys.stderr.write('arv-mount: %s -- exec %s\n' % (str(e), args.exec_args))
            rc = e.errno
        except Exception as e:
            sys.stderr.write('arv-mount: %s\n' % str(e))
        finally:
            subprocess.call(["fusermount", "-u", "-z", args.mountpoint])

        exit(rc)
    else:
        llfuse.main()
