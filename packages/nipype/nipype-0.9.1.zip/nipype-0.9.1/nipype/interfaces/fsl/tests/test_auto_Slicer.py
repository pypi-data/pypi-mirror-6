# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.fsl.utils import Slicer
def test_Slicer_inputs():
    input_map = dict(colour_map=dict(position=4,
    argstr='-l %s',
    ),
    image_edges=dict(position=2,
    argstr='%s',
    ),
    sample_axial=dict(xor=('single_slice', 'middle_slices', 'all_axial', 'sample_axial'),
    position=10,
    requires=['image_width'],
    argstr='-S %d',
    ),
    image_width=dict(position=-2,
    argstr='%d',
    ),
    middle_slices=dict(position=10,
    argstr='-a',
    xor=('single_slice', 'middle_slices', 'all_axial', 'sample_axial'),
    ),
    dither_edges=dict(position=7,
    argstr='-t',
    ),
    label_slices=dict(position=3,
    usedefault=True,
    argstr='-L',
    ),
    in_file=dict(position=1,
    mandatory=True,
    argstr='%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    single_slice=dict(xor=('single_slice', 'middle_slices', 'all_axial', 'sample_axial'),
    position=10,
    argstr='-%s',
    requires=['slice_number'],
    ),
    args=dict(argstr='%s',
    ),
    scaling=dict(position=0,
    argstr='-s %f',
    ),
    terminal_output=dict(nohash=True,
    mandatory=True,
    ),
    out_file=dict(hash_files=False,
    genfile=True,
    position=-1,
    argstr='%s',
    ),
    intensity_range=dict(position=5,
    argstr='-i %.3f %.3f',
    ),
    threshold_edges=dict(position=6,
    argstr='-e %.3f',
    ),
    nearest_neighbour=dict(position=8,
    argstr='-n',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    output_type=dict(),
    all_axial=dict(xor=('single_slice', 'middle_slices', 'all_axial', 'sample_axial'),
    position=10,
    requires=['image_width'],
    argstr='-A',
    ),
    show_orientation=dict(position=9,
    usedefault=True,
    argstr='%s',
    ),
    slice_number=dict(position=11,
    argstr='-%d',
    ),
    )
    inputs = Slicer.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_Slicer_outputs():
    output_map = dict(out_file=dict(),
    )
    outputs = Slicer.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
