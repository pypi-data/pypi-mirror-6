# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: ufal_nametag.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('ufal_nametag', [dirname(__file__)])
        except ImportError:
            import ufal_nametag
            return ufal_nametag
        if fp is not None:
            try:
                _mod = imp.load_module('ufal_nametag', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    ufal_nametag = swig_import_helper()
    del swig_import_helper
else:
    import ufal_nametag
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ufal_nametag.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(ufal_nametag.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(ufal_nametag.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(ufal_nametag.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(ufal_nametag.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(ufal_nametag.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(ufal_nametag.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(ufal_nametag.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(ufal_nametag.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(ufal_nametag.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(ufal_nametag.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(ufal_nametag.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(ufal_nametag.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(ufal_nametag.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(ufal_nametag.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(ufal_nametag.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(ufal_nametag.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = ufal_nametag.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Forms(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        ufal_nametag.Forms_swiginit(self,ufal_nametag.new_Forms(*args))
    __swig_destroy__ = ufal_nametag.delete_Forms
Forms.iterator = new_instancemethod(ufal_nametag.Forms_iterator,None,Forms)
Forms.__nonzero__ = new_instancemethod(ufal_nametag.Forms___nonzero__,None,Forms)
Forms.__bool__ = new_instancemethod(ufal_nametag.Forms___bool__,None,Forms)
Forms.__len__ = new_instancemethod(ufal_nametag.Forms___len__,None,Forms)
Forms.pop = new_instancemethod(ufal_nametag.Forms_pop,None,Forms)
Forms.__getslice__ = new_instancemethod(ufal_nametag.Forms___getslice__,None,Forms)
Forms.__setslice__ = new_instancemethod(ufal_nametag.Forms___setslice__,None,Forms)
Forms.__delslice__ = new_instancemethod(ufal_nametag.Forms___delslice__,None,Forms)
Forms.__delitem__ = new_instancemethod(ufal_nametag.Forms___delitem__,None,Forms)
Forms.__getitem__ = new_instancemethod(ufal_nametag.Forms___getitem__,None,Forms)
Forms.__setitem__ = new_instancemethod(ufal_nametag.Forms___setitem__,None,Forms)
Forms.append = new_instancemethod(ufal_nametag.Forms_append,None,Forms)
Forms.empty = new_instancemethod(ufal_nametag.Forms_empty,None,Forms)
Forms.size = new_instancemethod(ufal_nametag.Forms_size,None,Forms)
Forms.clear = new_instancemethod(ufal_nametag.Forms_clear,None,Forms)
Forms.swap = new_instancemethod(ufal_nametag.Forms_swap,None,Forms)
Forms.get_allocator = new_instancemethod(ufal_nametag.Forms_get_allocator,None,Forms)
Forms.begin = new_instancemethod(ufal_nametag.Forms_begin,None,Forms)
Forms.end = new_instancemethod(ufal_nametag.Forms_end,None,Forms)
Forms.rbegin = new_instancemethod(ufal_nametag.Forms_rbegin,None,Forms)
Forms.rend = new_instancemethod(ufal_nametag.Forms_rend,None,Forms)
Forms.pop_back = new_instancemethod(ufal_nametag.Forms_pop_back,None,Forms)
Forms.erase = new_instancemethod(ufal_nametag.Forms_erase,None,Forms)
Forms.push_back = new_instancemethod(ufal_nametag.Forms_push_back,None,Forms)
Forms.front = new_instancemethod(ufal_nametag.Forms_front,None,Forms)
Forms.back = new_instancemethod(ufal_nametag.Forms_back,None,Forms)
Forms.assign = new_instancemethod(ufal_nametag.Forms_assign,None,Forms)
Forms.resize = new_instancemethod(ufal_nametag.Forms_resize,None,Forms)
Forms.insert = new_instancemethod(ufal_nametag.Forms_insert,None,Forms)
Forms.reserve = new_instancemethod(ufal_nametag.Forms_reserve,None,Forms)
Forms.capacity = new_instancemethod(ufal_nametag.Forms_capacity,None,Forms)
Forms_swigregister = ufal_nametag.Forms_swigregister
Forms_swigregister(Forms)

class TokenRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(ufal_nametag.TokenRange_start_get, ufal_nametag.TokenRange_start_set)
    length = _swig_property(ufal_nametag.TokenRange_length_get, ufal_nametag.TokenRange_length_set)
    def __init__(self): 
        ufal_nametag.TokenRange_swiginit(self,ufal_nametag.new_TokenRange())
    __swig_destroy__ = ufal_nametag.delete_TokenRange
TokenRange_swigregister = ufal_nametag.TokenRange_swigregister
TokenRange_swigregister(TokenRange)

class TokenRanges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        ufal_nametag.TokenRanges_swiginit(self,ufal_nametag.new_TokenRanges(*args))
    __swig_destroy__ = ufal_nametag.delete_TokenRanges
TokenRanges.iterator = new_instancemethod(ufal_nametag.TokenRanges_iterator,None,TokenRanges)
TokenRanges.__nonzero__ = new_instancemethod(ufal_nametag.TokenRanges___nonzero__,None,TokenRanges)
TokenRanges.__bool__ = new_instancemethod(ufal_nametag.TokenRanges___bool__,None,TokenRanges)
TokenRanges.__len__ = new_instancemethod(ufal_nametag.TokenRanges___len__,None,TokenRanges)
TokenRanges.pop = new_instancemethod(ufal_nametag.TokenRanges_pop,None,TokenRanges)
TokenRanges.__getslice__ = new_instancemethod(ufal_nametag.TokenRanges___getslice__,None,TokenRanges)
TokenRanges.__setslice__ = new_instancemethod(ufal_nametag.TokenRanges___setslice__,None,TokenRanges)
TokenRanges.__delslice__ = new_instancemethod(ufal_nametag.TokenRanges___delslice__,None,TokenRanges)
TokenRanges.__delitem__ = new_instancemethod(ufal_nametag.TokenRanges___delitem__,None,TokenRanges)
TokenRanges.__getitem__ = new_instancemethod(ufal_nametag.TokenRanges___getitem__,None,TokenRanges)
TokenRanges.__setitem__ = new_instancemethod(ufal_nametag.TokenRanges___setitem__,None,TokenRanges)
TokenRanges.append = new_instancemethod(ufal_nametag.TokenRanges_append,None,TokenRanges)
TokenRanges.empty = new_instancemethod(ufal_nametag.TokenRanges_empty,None,TokenRanges)
TokenRanges.size = new_instancemethod(ufal_nametag.TokenRanges_size,None,TokenRanges)
TokenRanges.clear = new_instancemethod(ufal_nametag.TokenRanges_clear,None,TokenRanges)
TokenRanges.swap = new_instancemethod(ufal_nametag.TokenRanges_swap,None,TokenRanges)
TokenRanges.get_allocator = new_instancemethod(ufal_nametag.TokenRanges_get_allocator,None,TokenRanges)
TokenRanges.begin = new_instancemethod(ufal_nametag.TokenRanges_begin,None,TokenRanges)
TokenRanges.end = new_instancemethod(ufal_nametag.TokenRanges_end,None,TokenRanges)
TokenRanges.rbegin = new_instancemethod(ufal_nametag.TokenRanges_rbegin,None,TokenRanges)
TokenRanges.rend = new_instancemethod(ufal_nametag.TokenRanges_rend,None,TokenRanges)
TokenRanges.pop_back = new_instancemethod(ufal_nametag.TokenRanges_pop_back,None,TokenRanges)
TokenRanges.erase = new_instancemethod(ufal_nametag.TokenRanges_erase,None,TokenRanges)
TokenRanges.push_back = new_instancemethod(ufal_nametag.TokenRanges_push_back,None,TokenRanges)
TokenRanges.front = new_instancemethod(ufal_nametag.TokenRanges_front,None,TokenRanges)
TokenRanges.back = new_instancemethod(ufal_nametag.TokenRanges_back,None,TokenRanges)
TokenRanges.assign = new_instancemethod(ufal_nametag.TokenRanges_assign,None,TokenRanges)
TokenRanges.resize = new_instancemethod(ufal_nametag.TokenRanges_resize,None,TokenRanges)
TokenRanges.insert = new_instancemethod(ufal_nametag.TokenRanges_insert,None,TokenRanges)
TokenRanges.reserve = new_instancemethod(ufal_nametag.TokenRanges_reserve,None,TokenRanges)
TokenRanges.capacity = new_instancemethod(ufal_nametag.TokenRanges_capacity,None,TokenRanges)
TokenRanges_swigregister = ufal_nametag.TokenRanges_swigregister
TokenRanges_swigregister(TokenRanges)

class NamedEntity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(ufal_nametag.NamedEntity_start_get, ufal_nametag.NamedEntity_start_set)
    length = _swig_property(ufal_nametag.NamedEntity_length_get, ufal_nametag.NamedEntity_length_set)
    type = _swig_property(ufal_nametag.NamedEntity_type_get, ufal_nametag.NamedEntity_type_set)
    def __init__(self, *args): 
        ufal_nametag.NamedEntity_swiginit(self,ufal_nametag.new_NamedEntity(*args))
    __swig_destroy__ = ufal_nametag.delete_NamedEntity
NamedEntity_swigregister = ufal_nametag.NamedEntity_swigregister
NamedEntity_swigregister(NamedEntity)

class NamedEntities(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        ufal_nametag.NamedEntities_swiginit(self,ufal_nametag.new_NamedEntities(*args))
    __swig_destroy__ = ufal_nametag.delete_NamedEntities
NamedEntities.iterator = new_instancemethod(ufal_nametag.NamedEntities_iterator,None,NamedEntities)
NamedEntities.__nonzero__ = new_instancemethod(ufal_nametag.NamedEntities___nonzero__,None,NamedEntities)
NamedEntities.__bool__ = new_instancemethod(ufal_nametag.NamedEntities___bool__,None,NamedEntities)
NamedEntities.__len__ = new_instancemethod(ufal_nametag.NamedEntities___len__,None,NamedEntities)
NamedEntities.pop = new_instancemethod(ufal_nametag.NamedEntities_pop,None,NamedEntities)
NamedEntities.__getslice__ = new_instancemethod(ufal_nametag.NamedEntities___getslice__,None,NamedEntities)
NamedEntities.__setslice__ = new_instancemethod(ufal_nametag.NamedEntities___setslice__,None,NamedEntities)
NamedEntities.__delslice__ = new_instancemethod(ufal_nametag.NamedEntities___delslice__,None,NamedEntities)
NamedEntities.__delitem__ = new_instancemethod(ufal_nametag.NamedEntities___delitem__,None,NamedEntities)
NamedEntities.__getitem__ = new_instancemethod(ufal_nametag.NamedEntities___getitem__,None,NamedEntities)
NamedEntities.__setitem__ = new_instancemethod(ufal_nametag.NamedEntities___setitem__,None,NamedEntities)
NamedEntities.append = new_instancemethod(ufal_nametag.NamedEntities_append,None,NamedEntities)
NamedEntities.empty = new_instancemethod(ufal_nametag.NamedEntities_empty,None,NamedEntities)
NamedEntities.size = new_instancemethod(ufal_nametag.NamedEntities_size,None,NamedEntities)
NamedEntities.clear = new_instancemethod(ufal_nametag.NamedEntities_clear,None,NamedEntities)
NamedEntities.swap = new_instancemethod(ufal_nametag.NamedEntities_swap,None,NamedEntities)
NamedEntities.get_allocator = new_instancemethod(ufal_nametag.NamedEntities_get_allocator,None,NamedEntities)
NamedEntities.begin = new_instancemethod(ufal_nametag.NamedEntities_begin,None,NamedEntities)
NamedEntities.end = new_instancemethod(ufal_nametag.NamedEntities_end,None,NamedEntities)
NamedEntities.rbegin = new_instancemethod(ufal_nametag.NamedEntities_rbegin,None,NamedEntities)
NamedEntities.rend = new_instancemethod(ufal_nametag.NamedEntities_rend,None,NamedEntities)
NamedEntities.pop_back = new_instancemethod(ufal_nametag.NamedEntities_pop_back,None,NamedEntities)
NamedEntities.erase = new_instancemethod(ufal_nametag.NamedEntities_erase,None,NamedEntities)
NamedEntities.push_back = new_instancemethod(ufal_nametag.NamedEntities_push_back,None,NamedEntities)
NamedEntities.front = new_instancemethod(ufal_nametag.NamedEntities_front,None,NamedEntities)
NamedEntities.back = new_instancemethod(ufal_nametag.NamedEntities_back,None,NamedEntities)
NamedEntities.assign = new_instancemethod(ufal_nametag.NamedEntities_assign,None,NamedEntities)
NamedEntities.resize = new_instancemethod(ufal_nametag.NamedEntities_resize,None,NamedEntities)
NamedEntities.insert = new_instancemethod(ufal_nametag.NamedEntities_insert,None,NamedEntities)
NamedEntities.reserve = new_instancemethod(ufal_nametag.NamedEntities_reserve,None,NamedEntities)
NamedEntities.capacity = new_instancemethod(ufal_nametag.NamedEntities_capacity,None,NamedEntities)
NamedEntities_swigregister = ufal_nametag.NamedEntities_swigregister
NamedEntities_swigregister(NamedEntities)

class Version(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    major = _swig_property(ufal_nametag.Version_major_get, ufal_nametag.Version_major_set)
    minor = _swig_property(ufal_nametag.Version_minor_get, ufal_nametag.Version_minor_set)
    patch = _swig_property(ufal_nametag.Version_patch_get, ufal_nametag.Version_patch_set)
    current = staticmethod(ufal_nametag.Version_current)
    def __init__(self): 
        ufal_nametag.Version_swiginit(self,ufal_nametag.new_Version())
    __swig_destroy__ = ufal_nametag.delete_Version
Version_swigregister = ufal_nametag.Version_swigregister
Version_swigregister(Version)

def Version_current():
  return ufal_nametag.Version_current()
Version_current = ufal_nametag.Version_current

class Tokenizer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = ufal_nametag.delete_Tokenizer
    newVerticalTokenizer = staticmethod(ufal_nametag.Tokenizer_newVerticalTokenizer)
Tokenizer.setText = new_instancemethod(ufal_nametag.Tokenizer_setText,None,Tokenizer)
Tokenizer.nextSentence = new_instancemethod(ufal_nametag.Tokenizer_nextSentence,None,Tokenizer)
Tokenizer_swigregister = ufal_nametag.Tokenizer_swigregister
Tokenizer_swigregister(Tokenizer)

def Tokenizer_newVerticalTokenizer():
  return ufal_nametag.Tokenizer_newVerticalTokenizer()
Tokenizer_newVerticalTokenizer = ufal_nametag.Tokenizer_newVerticalTokenizer

class Ner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = ufal_nametag.delete_Ner
    load = staticmethod(ufal_nametag.Ner_load)
Ner.recognize = new_instancemethod(ufal_nametag.Ner_recognize,None,Ner)
Ner.newTokenizer = new_instancemethod(ufal_nametag.Ner_newTokenizer,None,Ner)
Ner_swigregister = ufal_nametag.Ner_swigregister
Ner_swigregister(Ner)

def Ner_load(*args):
  return ufal_nametag.Ner_load(*args)
Ner_load = ufal_nametag.Ner_load



