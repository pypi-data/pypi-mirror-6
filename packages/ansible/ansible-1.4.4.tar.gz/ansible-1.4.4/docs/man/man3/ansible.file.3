.TH ANSIBLE.FILE 3 "2014-01-08" "1.4.4" "ANSIBLE MODULES"
.\" generated from library/files/file
.SH NAME
file \- Sets attributes of files
.\" ------ DESCRIPTION
.SH DESCRIPTION
.PP
Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the \fIfile\fR module - including \fIcopy\fR, \fItemplate\fR, and \fIassemble\fR. 
.\" ------ OPTIONS
.\"
.\"
.SH OPTIONS
   
.IP force
force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and a file (so, we need to unlink the "path" file and create symlink to the "src" file in place of it).
.IR Choices :
yes,no. (default: no)   
.IP group
name of the group that should own the file/directory, as would be fed to \fIchown\fR   
.IP mode
mode the file or directory should be, such as 0644 as would be fed to \fIchmod\fR   
.IP owner
name of the user that should own the file/directory, as would be fed to \fIchown\fR   
.IP path
defines the file being managed, unless when used with \fCstate=link\fR, and then sets the destination to create a symbolic link to using \fIsrc\fR. Aliases: \fIdest\fR, \fIname\fR(required)   
.IP recurse
recursively set the specified file attributes (applies only to state=directory)
.IR Choices :
yes,no. (default: no)(Added in Ansible version 1.1.)
   
.IP selevel
level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the \fCrange\fR. \fC_default\fR feature works as for \fIseuser\fR. (default: s0)   
.IP serole
role part of SELinux file context, \fC_default\fR feature works as for \fIseuser\fR.   
.IP setype
type part of SELinux file context, \fC_default\fR feature works as for \fIseuser\fR.   
.IP seuser
user part of SELinux file context. Will default to system policy, if applicable. If set to \fC_default\fR, it will use the \fCuser\fR portion of the policy if available   
.IP src
path of the file to link to (applies only to \fCstate=link\fR). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded.   
.IP state
If \fCdirectory\fR, all immediate subdirectories will be created if they do not exist. If \fCfile\fR, the file will NOT be created if it does not exist, see the \fIcopy\fR or \fItemplate\fR module if you want that behavior. If \fClink\fR, the symbolic link will be created or changed. Use \fChard\fR for hardlinks. If \fCabsent\fR, directories will be recursively deleted, and files or symlinks will be unlinked. If \fCtouch\fR (new in 1.4), an empty file will be created if the c(dest) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).
.IR Choices :
file,link,directory,hard,touch,absent. (default: file).\"
.\"
.\" ------ NOTES
.SH NOTES
.PP
See also \fIcopy\fR, \fItemplate\fR, \fIassemble\fR 
.\"
.\"
.\" ------ EXAMPLES
.\" ------ PLAINEXAMPLES
.SH EXAMPLES
.nf
- file: path=/etc/foo.conf owner=foo group=foo mode=0644
- file: src=/file/to/link/to dest=/path/to/symlink owner=foo group=foo state=link

.fi

.\" ------- AUTHOR
.SH AUTHOR
Michael DeHaan
.SH SEE ALSO
.IR ansible (1),
.I http://ansible.github.com/modules.html#file