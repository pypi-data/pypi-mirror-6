#summary Injecting dependencies into classes and functions

There are two ways to inject dependencies: by a descriptor, and by a function
decorator:
{{{
class A(object): pass
class B(object): pass
class C(object):
    a = inject.attr('a', A)  # Descriptor.
    
    @inject.param('b', B)    # Decorator.
    def __init__(self, b):
        self.b = b
}}}

Other dependency injection types, used in other frameworks,
are not supported, because they are not needed.

Contents:
<wiki:toc max_depth="2" />

= Injection guide =
Both injections (`inject.attr` and `inject.param`) share the same interface,
except for the first argument's name (`attr` and `param`).
{{{
inject.attr(attr, type=None, annotation=None, bindto=None, scope=None)
inject.param(param, type=None, annotation=None, bindto=None, scope=None)
}}}

==`type`==
is usually a class whose instance will be injected. But it can be any 
hashable object. If `type` is callable it is used as the default provider 
(a callable which creates an instance). However, you can explicitly pass 
the default provider by specifying `bindto`. This greatly simplifies the code 
and minimizes the required configuration.
{{{
class A(object): pass
class B(object):
    a = inject.attr('a', A)

# Or
class A2(object): pass
class B(object):
    a = inject.attr('a', A, bindto=A2)
}}}

If `type` is not a callable you can 1) pass the default provider by `bindto`,
2) bind `type` in an injector. You can omit `type` if it is equal to an
injected attribute/param.
{{{
# 1)
# No callable type is given, passing a default provider.
class App(object):
    config = inject.attr('config', 'config', bindto=Config)

# 2)
# Because attr==type, we can omit type.
# Bind a provider in an injector.
class App(object):
    config = inject.attr('config')

injector.bind('config', to=Config)
}}}
Roughly, these ways are equivalent.

==`annotation`==
is an optional argument which allows to bind different providers
to the same class with different annotations. It can be any hashable
value, but usually is a string. For example:
{{{
class UsersRepository(object):
    database = inject.attr('database', Database, annotation='users')

class ArticlesRepository(object):
    database = inject.attr('database', Database, annotation='articles')

# Now we bind two different databases.
injector.bind(Database, annotation='users', to=UsersDatabase)
injector.bind(Database, annotation='articles', to=ArticlesDatabase)
}}}

==`bindto`==
is an optional argument which specifies a provider (a callable) to use to get
instances. If it is not given and `type` _is callable_, it is set to `type`.
If the explicitly given value is not callable, an _instance provider_ is 
created. It always returns the given value. If the value is an _unbound 
method_ an invoker is created and used as a provider (See [Invokers]).
{{{
# Bind to a callable.
class A(object): pass

@inject.param('a', bindto=A)
def func(a):
    pass


# Bind to an instance.
@inject.param('s', bindto='my string')
def func(s):
    pass


# Bind to an unbound method via an invoker.
class A(object):
    def method(self):
        return 'my value'

@inject.param('s', bindto=A.method)
def func('s'):
    pass


# No bindto is given, but type is callable
# use it.
class B(object): pass

@inject.param('b', B):
def func(b):
    pass


# No bindto is given, and type is not callable.
# The default provider is not set.
# Use an injector to create a binding.
@inject.param('s', 'mytype')
def func(s):
    pass

injector.bind('mytype', to='my string')
}}}

==`scope`==
is an optional argument which specifies the scope which will be used to scope 
the default provider, see [Scopes] for more information. Instance providers 
cannot be scoped, and `CantBeScopedError` will be raised.

= How injections are resolved =
 #. If an injector is registered (see [Configuration]), try to get a provider from its bindings:
  #. If an injection has `annotation`, try to get a provider for (`type`, `annotation`).
  #. If no provider for (`type`, `annotation`), try to get it for `type`.
  #. If a provider is found, use it to get an instance, and return it, otherwise proceed.
 #. If the injection has the default provider (or its `type` is callable), use it to get an instance, and return it.
 #. No default provider and no provider registered in the injector, raise `NoProviderError`.

Example:
{{{
class A(object): pass
class A2(object): pass

class B(object):
   a = inject.attr('a', A, annotation='test')

injector.bind(A, to=A2)

b = B()
print isinstance(b.a, A)  # False
print isinstance(b.a, A2) # True
}}}

= Inheritance and `inject.param` =
To specify that arguments are injected in a subclass use `inject.super` as
the default value and pass them as *keyword arguments*.
{{{
class My(object):
    @inject('a', A):
    @inject('b', B):
    def __init__(self, a, b):
        self.a = a
        self.b = b

class My2(My):  # inheriting
    @inject('c', C):
    def __init__(self, a=inject.super, b=inject.super, c=None):
        super(My2, self).__init__(a=a, b=b)  # Always pass as kwargs.
        self.c = c
    
}}}
In the example above `c` can be both a keyword argument and a positional
argument. But it is always injected as a keyword argument.

= Partial injections =
With `inject.param` partial injections are possible, when only some of the 
arguments are injected.
{{{
@inject.param('logger', Logger)
def log_access_denied(msg, logger):
    msg = 'Access denied: %s.' % msg
    logger.log(msg)

log_access_denied('wrong password''')
}}}

= Circular injections =
To use circular injections (when `A` depends on `B` and `B` depends on `A`)
at least one `inject.attr` is required.
{{{
@appscope 
class A(object):
    pass

@appscope
class B(object):
    @inject.param('a', A)
    def __init__(self, a):
        self.a = a

A.b = inject.attr('b', B)

a = A()
b = B()

print a.b is b  # True
print b.a is a  # True
}}}
In the example `appscope` is used only to demostrate that objects have been
created and their dependencies are set properly. 