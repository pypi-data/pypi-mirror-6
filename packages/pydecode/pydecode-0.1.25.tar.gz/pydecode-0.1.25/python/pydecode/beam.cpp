/* Generated by Cython 0.19.2 on Wed Mar  5 18:06:50 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pydecode__beam
#define __PYX_HAVE_API__pydecode__beam
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include <list>
#include <utility>
#include <set>
#include <map>
#include "Hypergraph/Hypergraph.h"
#include "Hypergraph/Map.h"
#include <bitset>
#include "Hypergraph/SemiringAlgorithms.h"
#include "Hypergraph/Semirings.h"
#include "Hypergraph/Potentials.h"
#include "Hypergraph/Algorithms.h"
#include "Hypergraph/BeamSearch.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "beam.pyx",
  "stringsource",
  "hypergraph.pxd",
  "potentials.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart;
struct __pyx_obj_8pydecode_10potentials_BackPointers;
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart;
struct __pyx_obj_8pydecode_10potentials__ViterbiW;
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorW;
struct __pyx_obj_8pydecode_10hypergraph_Edge;
struct __pyx_obj_8pydecode_10potentials_BoolPotentials;
struct __pyx_obj_8pydecode_10potentials_ViterbiChart;
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorW;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials__BinaryVectorW;
struct __pyx_obj_8pydecode_10potentials__SparseVectorW;
struct __pyx_obj_8pydecode_10potentials__BoolW;
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges;
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials;
struct __pyx_obj_8pydecode_4beam_BeamChart;
struct __pyx_obj_8pydecode_10hypergraph_Path;
struct __pyx_obj_8pydecode_10hypergraph_Node;
struct __pyx_obj_8pydecode_10potentials_CountingPotentials;
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials_CountingChart;
struct __pyx_obj_8pydecode_10potentials__CountingW;
struct __pyx_obj_8pydecode_10potentials_BinaryVectorChart;
struct __pyx_obj_8pydecode_10potentials__LogViterbiW;
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_InsidePotentials;
struct __pyx_obj_8pydecode_10hypergraph_Labeling;
struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials;
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap;
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder;
struct __pyx_obj_8pydecode_10potentials_Bitset;
struct __pyx_obj_8pydecode_10potentials__InsideW;
struct __pyx_obj_8pydecode_10potentials_BoolChart;
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph;
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes;
struct __pyx_obj_8pydecode_10potentials_InsideChart;

/* "pydecode/potentials.pxd":671
 * 
 * 
 * cdef class MinSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMinSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<MinSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":248
 *               HypergraphMap projection)
 * 
 * cdef class LogViterbiChart:             # <<<<<<<<<<<<<<
 *     cdef CLogViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart {
  PyObject_HEAD
  Chart<LogViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":32
 *         CHyperpath *construct_path()
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *      cdef const CBackPointers *thisptr
 *      cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_BackPointers {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtab;
  BackPointers const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":572
 *               HypergraphMap projection)
 * 
 * cdef class SparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart {
  PyObject_HEAD
  Chart<SparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":144
 *     cdef kind
 * 
 * cdef class _ViterbiW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _ViterbiW init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__ViterbiW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiW *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":792
 *     cdef kind
 * 
 * cdef class _MaxSparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MaxSparseVectorW init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorW *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "hypergraph.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Edge {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtab;
  Hyperedge const *edgeptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":455
 * 
 * 
 * cdef class BoolPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphBoolPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_BoolPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<BoolPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":140
 *               HypergraphMap projection)
 * 
 * cdef class ViterbiChart:             # <<<<<<<<<<<<<<
 *     cdef CViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiChart {
  PyObject_HEAD
  Chart<ViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":684
 *     cdef kind
 * 
 * cdef class _MinSparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MinSparseVectorW init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorW *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":788
 *               HypergraphMap projection)
 * 
 * cdef class MaxSparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CMaxSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart {
  PyObject_HEAD
  Chart<MaxSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":900
 *     cdef kind
 * 
 * cdef class _BinaryVectorW:             # <<<<<<<<<<<<<<
 *     cdef cbitset thisval
 *     cdef _BinaryVectorW init(self, cbitset val)
 */
struct __pyx_obj_8pydecode_10potentials__BinaryVectorW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__BinaryVectorW *__pyx_vtab;
  bitset<500> thisval;
};


/* "pydecode/potentials.pxd":576
 *     cdef kind
 * 
 * cdef class _SparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _SparseVectorW init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__SparseVectorW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorW *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":468
 *     cdef kind
 * 
 * cdef class _BoolW:             # <<<<<<<<<<<<<<
 *     cdef bool thisval
 *     cdef _BoolW init(self, bool val)
 */
struct __pyx_obj_8pydecode_10potentials__BoolW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__BoolW *__pyx_vtab;
  bool thisval;
};


/* "hypergraph.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hyperedge const *> _edges;
};


/* "pydecode/potentials.pxd":239
 * 
 * 
 * cdef class LogViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphLogViterbiPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<LogViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":779
 * 
 * 
 * cdef class MaxSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMaxSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<MaxSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/beam.pxd":37
 *         const CBeamGroups &groups)
 * 
 * cdef class BeamChart:             # <<<<<<<<<<<<<<
 *     cdef CBeamChart *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_4beam_BeamChart {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_4beam_BeamChart *__pyx_vtab;
  BeamChart *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "hypergraph.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtab;
  Hyperpath const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "hypergraph.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */
struct __pyx_obj_8pydecode_10hypergraph_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtab;
  Hypernode const *nodeptr;
  Hypergraph *graphptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":995
 * 
 * 
 * cdef class CountingPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphCountingPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_CountingPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<CountingPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":131
 * 
 * 
 * cdef class ViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphViterbiPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<ViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":680
 *               HypergraphMap projection)
 * 
 * cdef class MinSparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CMinSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart {
  PyObject_HEAD
  Chart<MinSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":1004
 *               HypergraphMap projection)
 * 
 * cdef class CountingChart:             # <<<<<<<<<<<<<<
 *     cdef CCountingChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_CountingChart {
  PyObject_HEAD
  Chart<CountingPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":1008
 *     cdef kind
 * 
 * cdef class _CountingW:             # <<<<<<<<<<<<<<
 *     cdef int thisval
 *     cdef _CountingW init(self, int val)
 */
struct __pyx_obj_8pydecode_10potentials__CountingW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__CountingW *__pyx_vtab;
  int thisval;
};


/* "pydecode/potentials.pxd":896
 *               HypergraphMap projection)
 * 
 * cdef class BinaryVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CBinaryVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_BinaryVectorChart {
  PyObject_HEAD
  Chart<BinaryVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":252
 *     cdef kind
 * 
 * cdef class _LogViterbiW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _LogViterbiW init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__LogViterbiW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiW *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":563
 * 
 * 
 * cdef class SparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<SparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":347
 * 
 * 
 * cdef class InsidePotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphInsidePotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_InsidePotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<InsidePotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "hypergraph.pxd":36
 *         bool equal(const CHyperpath path)
 * 
 * cdef class Labeling:             # <<<<<<<<<<<<<<
 *     cdef edge_labels
 *     cdef node_labels
 */
struct __pyx_obj_8pydecode_10hypergraph_Labeling {
  PyObject_HEAD
  PyObject *edge_labels;
  PyObject *node_labels;
};


/* "pydecode/potentials.pxd":887
 * 
 * 
 * cdef class BinaryVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphBinaryVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BinaryVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<BinaryVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "hypergraph.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtab;
  HypergraphMap const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *range_graph;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *domain_graph;
};


/* "hypergraph.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
  PyObject *edge_labels;
  PyObject *node_labels;
  PyObject *started;
};


/* "pydecode/potentials.pxd":22
 *         bool& operator[](int)
 * 
 * cdef class Bitset:             # <<<<<<<<<<<<<<
 *     cdef cbitset data
 *     cdef init(self, cbitset data)
 */
struct __pyx_obj_8pydecode_10potentials_Bitset {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_Bitset *__pyx_vtab;
  bitset<500> data;
};


/* "pydecode/potentials.pxd":360
 *     cdef kind
 * 
 * cdef class _InsideW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _InsideW init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__InsideW {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__InsideW *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":464
 *               HypergraphMap projection)
 * 
 * cdef class BoolChart:             # <<<<<<<<<<<<<<
 *     cdef CBoolChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_BoolChart {
  PyObject_HEAD
  Chart<BoolPotential> *chart;
  PyObject *kind;
};


/* "hypergraph.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *labeling;
  PyObject *_cached_edges;
};


/* "hypergraph.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hypernode const *> _nodes;
};


/* "pydecode/potentials.pxd":356
 *               HypergraphMap projection)
 * 
 * cdef class InsideChart:             # <<<<<<<<<<<<<<
 *     cdef CInsideChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_InsideChart {
  PyObject_HEAD
  Chart<InsidePotential> *chart;
  PyObject *kind;
};



/* "pydecode/potentials.pxd":563
 * 
 * 
 * cdef class SparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphSparseVectorPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *, HypergraphPotentials<SparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials;


/* "hypergraph.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *, std::vector<Hypernode const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtabptr_8pydecode_10hypergraph__LazyNodes;


/* "hypergraph.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10hypergraph_Labeling *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtabptr_8pydecode_10hypergraph_Hypergraph;


/* "pydecode/potentials.pxd":455
 * 
 * 
 * cdef class BoolPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphBoolPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *, HypergraphPotentials<BoolPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtabptr_8pydecode_10potentials_BoolPotentials;


/* "pydecode/beam.pyx":7
 * from pydecode.potentials cimport *
 * 
 * cdef class BeamChart:             # <<<<<<<<<<<<<<
 *     cdef init(self, CBeamChart *chart, Hypergraph graph):
 *         self.thisptr = chart
 */

struct __pyx_vtabstruct_8pydecode_4beam_BeamChart {
  PyObject *(*init)(struct __pyx_obj_8pydecode_4beam_BeamChart *, BeamChart *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_4beam_BeamChart *__pyx_vtabptr_8pydecode_4beam_BeamChart;


/* "pydecode/potentials.pxd":22
 *         bool& operator[](int)
 * 
 * cdef class Bitset:             # <<<<<<<<<<<<<<
 *     cdef cbitset data
 *     cdef init(self, cbitset data)
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Bitset {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_Bitset *, bitset<500>);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Bitset *__pyx_vtabptr_8pydecode_10potentials_Bitset;


/* "hypergraph.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Path {
  struct __pyx_obj_8pydecode_10hypergraph_Path *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
  PyObject *(*equal)(struct __pyx_obj_8pydecode_10hypergraph_Path *, struct __pyx_obj_8pydecode_10hypergraph_Path *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtabptr_8pydecode_10hypergraph_Path;


/* "pydecode/potentials.pxd":252
 *     cdef kind
 * 
 * cdef class _LogViterbiW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _LogViterbiW init(self, double val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiW {
  struct __pyx_obj_8pydecode_10potentials__LogViterbiW *(*init)(struct __pyx_obj_8pydecode_10potentials__LogViterbiW *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiW *__pyx_vtabptr_8pydecode_10potentials__LogViterbiW;


/* "pydecode/potentials.pxd":239
 * 
 * 
 * cdef class LogViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphLogViterbiPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *, HypergraphPotentials<LogViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials;


/* "pydecode/potentials.pxd":468
 *     cdef kind
 * 
 * cdef class _BoolW:             # <<<<<<<<<<<<<<
 *     cdef bool thisval
 *     cdef _BoolW init(self, bool val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__BoolW {
  struct __pyx_obj_8pydecode_10potentials__BoolW *(*init)(struct __pyx_obj_8pydecode_10potentials__BoolW *, bool);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BoolW *__pyx_vtabptr_8pydecode_10potentials__BoolW;


/* "hypergraph.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtabptr_8pydecode_10hypergraph_Edge;


/* "hypergraph.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *(*init)(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap;


/* "pydecode/potentials.pxd":576
 *     cdef kind
 * 
 * cdef class _SparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _SparseVectorW init(self, vector[pair[int, int]] val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorW {
  struct __pyx_obj_8pydecode_10potentials__SparseVectorW *(*init)(struct __pyx_obj_8pydecode_10potentials__SparseVectorW *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorW *__pyx_vtabptr_8pydecode_10potentials__SparseVectorW;


/* "pydecode/potentials.pxd":144
 *     cdef kind
 * 
 * cdef class _ViterbiW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _ViterbiW init(self, double val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiW {
  struct __pyx_obj_8pydecode_10potentials__ViterbiW *(*init)(struct __pyx_obj_8pydecode_10potentials__ViterbiW *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiW *__pyx_vtabptr_8pydecode_10potentials__ViterbiW;


/* "pydecode/potentials.pxd":32
 *         CHyperpath *construct_path()
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *      cdef const CBackPointers *thisptr
 *      cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *(*init)(struct __pyx_obj_8pydecode_10potentials_BackPointers *, BackPointers const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtabptr_8pydecode_10potentials_BackPointers;


/* "pydecode/potentials.pxd":1008
 *     cdef kind
 * 
 * cdef class _CountingW:             # <<<<<<<<<<<<<<
 *     cdef int thisval
 *     cdef _CountingW init(self, int val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__CountingW {
  struct __pyx_obj_8pydecode_10potentials__CountingW *(*init)(struct __pyx_obj_8pydecode_10potentials__CountingW *, int);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__CountingW *__pyx_vtabptr_8pydecode_10potentials__CountingW;


/* "pydecode/potentials.pxd":779
 * 
 * 
 * cdef class MaxSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMaxSparseVectorPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *, HypergraphPotentials<MaxSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials;


/* "pydecode/potentials.pxd":360
 *     cdef kind
 * 
 * cdef class _InsideW:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _InsideW init(self, double val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__InsideW {
  struct __pyx_obj_8pydecode_10potentials__InsideW *(*init)(struct __pyx_obj_8pydecode_10potentials__InsideW *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__InsideW *__pyx_vtabptr_8pydecode_10potentials__InsideW;


/* "hypergraph.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *(*init)(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder;


/* "hypergraph.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *, std::vector<Hyperedge const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtabptr_8pydecode_10hypergraph__LazyEdges;


/* "pydecode/potentials.pxd":887
 * 
 * 
 * cdef class BinaryVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphBinaryVectorPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BinaryVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials *, HypergraphPotentials<BinaryVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BinaryVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_BinaryVectorPotentials;


/* "pydecode/potentials.pxd":995
 * 
 * 
 * cdef class CountingPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphCountingPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *, HypergraphPotentials<CountingPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtabptr_8pydecode_10potentials_CountingPotentials;


/* "pydecode/potentials.pxd":671
 * 
 * 
 * cdef class MinSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMinSparseVectorPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *, HypergraphPotentials<MinSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials;


/* "pydecode/potentials.pxd":347
 * 
 * 
 * cdef class InsidePotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphInsidePotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *, HypergraphPotentials<InsidePotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtabptr_8pydecode_10potentials_InsidePotentials;


/* "hypergraph.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Node {
  struct __pyx_obj_8pydecode_10hypergraph_Node *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Node *, Hypernode const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtabptr_8pydecode_10hypergraph_Node;


/* "pydecode/potentials.pxd":900
 *     cdef kind
 * 
 * cdef class _BinaryVectorW:             # <<<<<<<<<<<<<<
 *     cdef cbitset thisval
 *     cdef _BinaryVectorW init(self, cbitset val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__BinaryVectorW {
  struct __pyx_obj_8pydecode_10potentials__BinaryVectorW *(*init)(struct __pyx_obj_8pydecode_10potentials__BinaryVectorW *, bitset<500>);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BinaryVectorW *__pyx_vtabptr_8pydecode_10potentials__BinaryVectorW;


/* "pydecode/potentials.pxd":131
 * 
 * 
 * cdef class ViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphViterbiPotentials *thisptr
 */

struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *, HypergraphPotentials<ViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials;


/* "pydecode/potentials.pxd":792
 *     cdef kind
 * 
 * cdef class _MaxSparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MaxSparseVectorW init(self, vector[pair[int, int]] val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorW {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorW *(*init)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorW *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorW *__pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorW;


/* "pydecode/potentials.pxd":684
 *     cdef kind
 * 
 * cdef class _MinSparseVectorW:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MinSparseVectorW init(self, vector[pair[int, int]] val)
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorW {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorW *(*init)(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorW *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorW *__pyx_vtabptr_8pydecode_10potentials__MinSparseVectorW;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

#include <new>

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'pydecode.wrap' */

/* Module declarations from 'pydecode.hypergraph' */
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Labeling = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyEdges = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyNodes = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Hypergraph = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_GraphBuilder = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Node = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Edge = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Path = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_HypergraphMap = 0;

/* Module declarations from 'pydecode.potentials' */
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Bitset = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BackPointers = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__ViterbiW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LogViterbiW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsidePotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsideChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__InsideW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__BoolW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__SparseVectorW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MinSparseVectorW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MaxSparseVectorW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BinaryVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BinaryVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__BinaryVectorW = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__CountingW = 0;

/* Module declarations from 'pydecode.beam' */
static PyTypeObject *__pyx_ptype_8pydecode_4beam_BeamChart = 0;
static std::vector<int> __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pydecode.beam"
int __pyx_module_is_main_pydecode__beam = 0;

/* Implementation of 'pydecode.beam' */
static PyObject *__pyx_pf_8pydecode_4beam_9BeamChart_path(struct __pyx_obj_8pydecode_4beam_BeamChart *__pyx_v_self, int __pyx_v_result); /* proto */
static PyObject *__pyx_pf_8pydecode_4beam_9BeamChart_2__getitem__(struct __pyx_obj_8pydecode_4beam_BeamChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pydecode_4beam_beam_search(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials *__pyx_v_constraints, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_outside, double __pyx_v_lower_bound, PyObject *__pyx_v_groups, PyObject *__pyx_v_group_limits, int __pyx_v_num_groups); /* proto */
static PyObject *__pyx_tp_new_8pydecode_4beam_BeamChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_3[] = "/home/srush/Projects/decoding/python/pydecode/beam.pyx";
static char __pyx_k_4[] = "pydecode.beam";
static char __pyx_k__chart[] = "chart";
static char __pyx_k__graph[] = "graph";
static char __pyx_k__groups[] = "groups";
static char __pyx_k__cgroups[] = "cgroups";
static char __pyx_k__outside[] = "outside";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k____import__[] = "__import__";
static char __pyx_k__num_groups[] = "num_groups";
static char __pyx_k__potentials[] = "potentials";
static char __pyx_k__beam_groups[] = "beam_groups";
static char __pyx_k__beam_search[] = "beam_search";
static char __pyx_k__constraints[] = "constraints";
static char __pyx_k__lower_bound[] = "lower_bound";
static char __pyx_k__group_limits[] = "group_limits";
static char __pyx_k__cgroup_limits[] = "cgroup_limits";
static char __pyx_k____pyx_vtable__[] = "__pyx_vtable__";
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s____import__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____pyx_vtable__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__beam_groups;
static PyObject *__pyx_n_s__beam_search;
static PyObject *__pyx_n_s__cgroup_limits;
static PyObject *__pyx_n_s__cgroups;
static PyObject *__pyx_n_s__chart;
static PyObject *__pyx_n_s__constraints;
static PyObject *__pyx_n_s__graph;
static PyObject *__pyx_n_s__group_limits;
static PyObject *__pyx_n_s__groups;
static PyObject *__pyx_n_s__lower_bound;
static PyObject *__pyx_n_s__num_groups;
static PyObject *__pyx_n_s__outside;
static PyObject *__pyx_n_s__potentials;
static PyObject *__pyx_k_tuple_1;
static PyObject *__pyx_k_codeobj_2;

/* "pydecode/beam.pyx":8
 * 
 * cdef class BeamChart:
 *     cdef init(self, CBeamChart *chart, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = chart
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_4beam_9BeamChart_init(struct __pyx_obj_8pydecode_4beam_BeamChart *__pyx_v_self, BeamChart *__pyx_v_chart, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/beam.pyx":9
 * cdef class BeamChart:
 *     cdef init(self, CBeamChart *chart, Hypergraph graph):
 *         self.thisptr = chart             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_chart;

  /* "pydecode/beam.pyx":10
 *     cdef init(self, CBeamChart *chart, Hypergraph graph):
 *         self.thisptr = chart
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/beam.pyx":11
 *         self.thisptr = chart
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def path(self, int result):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_4beam_9BeamChart_1path(PyObject *__pyx_v_self, PyObject *__pyx_arg_result); /*proto*/
static PyObject *__pyx_pw_8pydecode_4beam_9BeamChart_1path(PyObject *__pyx_v_self, PyObject *__pyx_arg_result) {
  int __pyx_v_result;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path (wrapper)", 0);
  assert(__pyx_arg_result); {
    __pyx_v_result = __Pyx_PyInt_AsInt(__pyx_arg_result); if (unlikely((__pyx_v_result == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.beam.BeamChart.path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_4beam_9BeamChart_path(((struct __pyx_obj_8pydecode_4beam_BeamChart *)__pyx_v_self), ((int)__pyx_v_result));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/beam.pyx":13
 *         return self
 * 
 *     def path(self, int result):             # <<<<<<<<<<<<<<
 *         return Path().init(self.thisptr.get_path(result),
 *                            self.graph)
 */

static PyObject *__pyx_pf_8pydecode_4beam_9BeamChart_path(struct __pyx_obj_8pydecode_4beam_BeamChart *__pyx_v_self, int __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("path", 0);

  /* "pydecode/beam.pyx":14
 * 
 *     def path(self, int result):
 *         return Path().init(self.thisptr.get_path(result),             # <<<<<<<<<<<<<<
 *                            self.graph)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Path)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/beam.pyx":15
 *     def path(self, int result):
 *         return Path().init(self.thisptr.get_path(result),
 *                            self.graph)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *)((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_t_1), __pyx_v_self->thisptr->get_path(__pyx_v_result), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.beam.BeamChart.path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_4beam_9BeamChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_4beam_9BeamChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_4beam_9BeamChart_2__getitem__(((struct __pyx_obj_8pydecode_4beam_BeamChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/beam.pyx":17
 *                            self.graph)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         cdef vector[CBeamHyp *] beam = \
 *             self.thisptr.get_beam(node.nodeptr)
 */

static PyObject *__pyx_pf_8pydecode_4beam_9BeamChart_2__getitem__(struct __pyx_obj_8pydecode_4beam_BeamChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  std::vector<BeamHyp *> __pyx_v_beam;
  PyObject *__pyx_v_data = NULL;
  CYTHON_UNUSED long __pyx_v_i;
  BeamHyp *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<BeamHyp *>::iterator __pyx_t_2;
  BeamHyp *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/beam.pyx":19
 *     def __getitem__(self, Node node):
 *         cdef vector[CBeamHyp *] beam = \
 *             self.thisptr.get_beam(node.nodeptr)             # <<<<<<<<<<<<<<
 *         data = []
 *         i = 0
 */
  __pyx_v_beam = __pyx_v_self->thisptr->get_beam(__pyx_v_node->nodeptr);

  /* "pydecode/beam.pyx":20
 *         cdef vector[CBeamHyp *] beam = \
 *             self.thisptr.get_beam(node.nodeptr)
 *         data = []             # <<<<<<<<<<<<<<
 *         i = 0
 *         for p in beam:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/beam.pyx":21
 *             self.thisptr.get_beam(node.nodeptr)
 *         data = []
 *         i = 0             # <<<<<<<<<<<<<<
 *         for p in beam:
 *             data.append((Bitset().init(p.sig),
 */
  __pyx_v_i = 0;

  /* "pydecode/beam.pyx":22
 *         data = []
 *         i = 0
 *         for p in beam:             # <<<<<<<<<<<<<<
 *             data.append((Bitset().init(p.sig),
 *                          p.current_score,
 */
  __pyx_t_2 = __pyx_v_beam.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_beam.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_p = __pyx_t_3;

    /* "pydecode/beam.pyx":23
 *         i = 0
 *         for p in beam:
 *             data.append((Bitset().init(p.sig),             # <<<<<<<<<<<<<<
 *                          p.current_score,
 *                          p.future_score))
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Bitset)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((struct __pyx_vtabstruct_8pydecode_10potentials_Bitset *)((struct __pyx_obj_8pydecode_10potentials_Bitset *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Bitset *)__pyx_t_1), __pyx_v_p->sig); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pydecode/beam.pyx":24
 *         for p in beam:
 *             data.append((Bitset().init(p.sig),
 *                          p.current_score,             # <<<<<<<<<<<<<<
 *                          p.future_score))
 *         return data
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p->current_score); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "pydecode/beam.pyx":25
 *             data.append((Bitset().init(p.sig),
 *                          p.current_score,
 *                          p.future_score))             # <<<<<<<<<<<<<<
 *         return data
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p->future_score); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_data, ((PyObject *)__pyx_t_6)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  }

  /* "pydecode/beam.pyx":26
 *                          p.current_score,
 *                          p.future_score))
 *         return data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pydecode.beam.BeamChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_4beam_1beam_search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pydecode_4beam_1beam_search = {__Pyx_NAMESTR("beam_search"), (PyCFunction)__pyx_pw_8pydecode_4beam_1beam_search, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8pydecode_4beam_1beam_search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials *__pyx_v_constraints = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_outside = 0;
  double __pyx_v_lower_bound;
  PyObject *__pyx_v_groups = 0;
  PyObject *__pyx_v_group_limits = 0;
  int __pyx_v_num_groups;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("beam_search (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__potentials,&__pyx_n_s__constraints,&__pyx_n_s__outside,&__pyx_n_s__lower_bound,&__pyx_n_s__groups,&__pyx_n_s__group_limits,&__pyx_n_s__num_groups,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__constraints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower_bound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groups)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_groups)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "beam_search") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_constraints = ((struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials *)values[2]);
    __pyx_v_outside = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)values[3]);
    __pyx_v_lower_bound = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_lower_bound == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_groups = values[5];
    __pyx_v_group_limits = values[6];
    __pyx_v_num_groups = __Pyx_PyInt_AsInt(values[7]); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("beam_search", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.beam.beam_search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_constraints), __pyx_ptype_8pydecode_10potentials_BinaryVectorPotentials, 1, "constraints", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outside), __pyx_ptype_8pydecode_10potentials_LogViterbiChart, 1, "outside", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_4beam_beam_search(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_constraints, __pyx_v_outside, __pyx_v_lower_bound, __pyx_v_groups, __pyx_v_group_limits, __pyx_v_num_groups);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/beam.pyx":29
 * 
 * 
 * def beam_search(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 BinaryVectorPotentials constraints,
 */

static PyObject *__pyx_pf_8pydecode_4beam_beam_search(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials *__pyx_v_constraints, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_outside, double __pyx_v_lower_bound, PyObject *__pyx_v_groups, PyObject *__pyx_v_group_limits, int __pyx_v_num_groups) {
  std::vector<int> __pyx_v_cgroups;
  std::vector<int> __pyx_v_cgroup_limits;
  BeamGroups *__pyx_v_beam_groups;
  BeamChart *__pyx_v_chart;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("beam_search", 0);

  /* "pydecode/beam.pyx":37
 *                 group_limits,
 *                 int num_groups):
 *     cdef vector[int] cgroups = groups             # <<<<<<<<<<<<<<
 *     cdef vector[int] cgroup_limits = group_limits
 *     cdef CBeamGroups *beam_groups = new CBeamGroups(graph.thisptr,
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_groups); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cgroups = __pyx_t_1;

  /* "pydecode/beam.pyx":38
 *                 int num_groups):
 *     cdef vector[int] cgroups = groups
 *     cdef vector[int] cgroup_limits = group_limits             # <<<<<<<<<<<<<<
 *     cdef CBeamGroups *beam_groups = new CBeamGroups(graph.thisptr,
 *                                                     cgroups,
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_group_limits); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cgroup_limits = __pyx_t_1;

  /* "pydecode/beam.pyx":42
 *                                                     cgroups,
 *                                                     cgroup_limits,
 *                                                     num_groups)             # <<<<<<<<<<<<<<
 *     # cgroups.resize(graph.nodes_size())
 *     # cdef vector[int] cgroup_limits
 */
  __pyx_v_beam_groups = new BeamGroups(__pyx_v_graph->thisptr, __pyx_v_cgroups, __pyx_v_cgroup_limits, __pyx_v_num_groups);

  /* "pydecode/beam.pyx":56
 *                      deref(outside.chart),
 *                      lower_bound,
 *                      deref(beam_groups))             # <<<<<<<<<<<<<<
 *     return BeamChart().init(chart, graph)
 */
  __pyx_v_chart = beam_search(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_constraints->thisptr), (*__pyx_v_outside->chart), __pyx_v_lower_bound, (*__pyx_v_beam_groups));

  /* "pydecode/beam.pyx":57
 *                      lower_bound,
 *                      deref(beam_groups))
 *     return BeamChart().init(chart, graph)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_4beam_BeamChart)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_8pydecode_4beam_BeamChart *)((struct __pyx_obj_8pydecode_4beam_BeamChart *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_4beam_BeamChart *)__pyx_t_2), __pyx_v_chart, __pyx_v_graph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.beam.beam_search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int> __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int> __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pydecode_4beam_BeamChart __pyx_vtable_8pydecode_4beam_BeamChart;

static PyObject *__pyx_tp_new_8pydecode_4beam_BeamChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_4beam_BeamChart *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_4beam_BeamChart *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_4beam_BeamChart;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_4beam_BeamChart(PyObject *o) {
  struct __pyx_obj_8pydecode_4beam_BeamChart *p = (struct __pyx_obj_8pydecode_4beam_BeamChart *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_4beam_BeamChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_4beam_BeamChart *p = (struct __pyx_obj_8pydecode_4beam_BeamChart *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_4beam_BeamChart(PyObject *o) {
  struct __pyx_obj_8pydecode_4beam_BeamChart *p = (struct __pyx_obj_8pydecode_4beam_BeamChart *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_4beam_BeamChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_4beam_BeamChart[] = {
  {__Pyx_NAMESTR("path"), (PyCFunction)__pyx_pw_8pydecode_4beam_9BeamChart_1path, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BeamChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_4beam_BeamChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BeamChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_4beam_9BeamChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_4beam_BeamChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.beam.BeamChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_4beam_BeamChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_4beam_BeamChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BeamChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BeamChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_4beam_BeamChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_4beam_BeamChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_4beam_BeamChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_4beam_BeamChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("beam"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s____import__, __pyx_k____import__, sizeof(__pyx_k____import__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____pyx_vtable__, __pyx_k____pyx_vtable__, sizeof(__pyx_k____pyx_vtable__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__beam_groups, __pyx_k__beam_groups, sizeof(__pyx_k__beam_groups), 0, 0, 1, 1},
  {&__pyx_n_s__beam_search, __pyx_k__beam_search, sizeof(__pyx_k__beam_search), 0, 0, 1, 1},
  {&__pyx_n_s__cgroup_limits, __pyx_k__cgroup_limits, sizeof(__pyx_k__cgroup_limits), 0, 0, 1, 1},
  {&__pyx_n_s__cgroups, __pyx_k__cgroups, sizeof(__pyx_k__cgroups), 0, 0, 1, 1},
  {&__pyx_n_s__chart, __pyx_k__chart, sizeof(__pyx_k__chart), 0, 0, 1, 1},
  {&__pyx_n_s__constraints, __pyx_k__constraints, sizeof(__pyx_k__constraints), 0, 0, 1, 1},
  {&__pyx_n_s__graph, __pyx_k__graph, sizeof(__pyx_k__graph), 0, 0, 1, 1},
  {&__pyx_n_s__group_limits, __pyx_k__group_limits, sizeof(__pyx_k__group_limits), 0, 0, 1, 1},
  {&__pyx_n_s__groups, __pyx_k__groups, sizeof(__pyx_k__groups), 0, 0, 1, 1},
  {&__pyx_n_s__lower_bound, __pyx_k__lower_bound, sizeof(__pyx_k__lower_bound), 0, 0, 1, 1},
  {&__pyx_n_s__num_groups, __pyx_k__num_groups, sizeof(__pyx_k__num_groups), 0, 0, 1, 1},
  {&__pyx_n_s__outside, __pyx_k__outside, sizeof(__pyx_k__outside), 0, 0, 1, 1},
  {&__pyx_n_s__potentials, __pyx_k__potentials, sizeof(__pyx_k__potentials), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pydecode/beam.pyx":29
 * 
 * 
 * def beam_search(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 BinaryVectorPotentials constraints,
 */
  __pyx_k_tuple_1 = PyTuple_Pack(12, ((PyObject *)__pyx_n_s__graph), ((PyObject *)__pyx_n_s__potentials), ((PyObject *)__pyx_n_s__constraints), ((PyObject *)__pyx_n_s__outside), ((PyObject *)__pyx_n_s__lower_bound), ((PyObject *)__pyx_n_s__groups), ((PyObject *)__pyx_n_s__group_limits), ((PyObject *)__pyx_n_s__num_groups), ((PyObject *)__pyx_n_s__cgroups), ((PyObject *)__pyx_n_s__cgroup_limits), ((PyObject *)__pyx_n_s__beam_groups), ((PyObject *)__pyx_n_s__chart)); if (unlikely(!__pyx_k_tuple_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_1));
  __pyx_k_codeobj_2 = (PyObject*)__Pyx_PyCode_New(8, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_1, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_3, __pyx_n_s__beam_search, 29, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initbeam(void); /*proto*/
PyMODINIT_FUNC initbeam(void)
#else
PyMODINIT_FUNC PyInit_beam(void); /*proto*/
PyMODINIT_FUNC PyInit_beam(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_beam(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("beam"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pydecode.beam")) {
      if (unlikely(PyDict_SetItemString(modules, "pydecode.beam", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pydecode__beam) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8pydecode_4beam_BeamChart = &__pyx_vtable_8pydecode_4beam_BeamChart;
  __pyx_vtable_8pydecode_4beam_BeamChart.init = (PyObject *(*)(struct __pyx_obj_8pydecode_4beam_BeamChart *, BeamChart *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_4beam_9BeamChart_init;
  if (PyType_Ready(&__pyx_type_8pydecode_4beam_BeamChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_4beam_BeamChart.tp_dict, __pyx_vtabptr_8pydecode_4beam_BeamChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BeamChart", (PyObject *)&__pyx_type_8pydecode_4beam_BeamChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_4beam_BeamChart = &__pyx_type_8pydecode_4beam_BeamChart;
  /*--- Type import code ---*/
  __pyx_ptype_8pydecode_10hypergraph_Labeling = __Pyx_ImportType("pydecode.hypergraph", "Labeling", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Labeling), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Labeling)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyEdges = __Pyx_ImportType("pydecode.hypergraph", "_LazyEdges", sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph__LazyEdges)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph__LazyEdges = (struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph__LazyEdges->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph__LazyEdges)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyNodes = __Pyx_ImportType("pydecode.hypergraph", "_LazyNodes", sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph__LazyNodes)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph__LazyNodes = (struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph__LazyNodes->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph__LazyNodes)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Hypergraph = __Pyx_ImportType("pydecode.hypergraph", "Hypergraph", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Hypergraph)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Hypergraph = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Hypergraph->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Hypergraph)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_GraphBuilder = __Pyx_ImportType("pydecode.hypergraph", "GraphBuilder", sizeof(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_GraphBuilder)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder = (struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_GraphBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Node = __Pyx_ImportType("pydecode.hypergraph", "Node", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Node), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Node)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Node = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Node*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Node->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Node)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Edge = __Pyx_ImportType("pydecode.hypergraph", "Edge", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Edge), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Edge)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Edge = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Edge->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Edge)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Path = __Pyx_ImportType("pydecode.hypergraph", "Path", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Path), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Path)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Path = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Path*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Path->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Path)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_HypergraphMap = __Pyx_ImportType("pydecode.hypergraph", "HypergraphMap", sizeof(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap = (struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_HypergraphMap->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Bitset = __Pyx_ImportType("pydecode.potentials", "Bitset", sizeof(struct __pyx_obj_8pydecode_10potentials_Bitset), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_Bitset)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_Bitset = (struct __pyx_vtabstruct_8pydecode_10potentials_Bitset*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_Bitset->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_Bitset)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BackPointers = __Pyx_ImportType("pydecode.potentials", "BackPointers", sizeof(struct __pyx_obj_8pydecode_10potentials_BackPointers), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_BackPointers)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_BackPointers = (struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_BackPointers->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_BackPointers)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiPotentials = __Pyx_ImportType("pydecode.potentials", "ViterbiPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_ViterbiPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiChart = __Pyx_ImportType("pydecode.potentials", "ViterbiChart", sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_ViterbiChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__ViterbiW = __Pyx_ImportType("pydecode.potentials", "_ViterbiW", sizeof(struct __pyx_obj_8pydecode_10potentials__ViterbiW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__ViterbiW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__ViterbiW = (struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__ViterbiW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__ViterbiW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = __Pyx_ImportType("pydecode.potentials", "LogViterbiPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiChart = __Pyx_ImportType("pydecode.potentials", "LogViterbiChart", sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_LogViterbiChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LogViterbiW = __Pyx_ImportType("pydecode.potentials", "_LogViterbiW", sizeof(struct __pyx_obj_8pydecode_10potentials__LogViterbiW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__LogViterbiW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__LogViterbiW = (struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__LogViterbiW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__LogViterbiW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsidePotentials = __Pyx_ImportType("pydecode.potentials", "InsidePotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_InsidePotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_InsidePotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_InsidePotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_InsidePotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_InsidePotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsideChart = __Pyx_ImportType("pydecode.potentials", "InsideChart", sizeof(struct __pyx_obj_8pydecode_10potentials_InsideChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_InsideChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__InsideW = __Pyx_ImportType("pydecode.potentials", "_InsideW", sizeof(struct __pyx_obj_8pydecode_10potentials__InsideW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__InsideW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__InsideW = (struct __pyx_vtabstruct_8pydecode_10potentials__InsideW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__InsideW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__InsideW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolPotentials = __Pyx_ImportType("pydecode.potentials", "BoolPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_BoolPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_BoolPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_BoolPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_BoolPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_BoolPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolChart = __Pyx_ImportType("pydecode.potentials", "BoolChart", sizeof(struct __pyx_obj_8pydecode_10potentials_BoolChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_BoolChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__BoolW = __Pyx_ImportType("pydecode.potentials", "_BoolW", sizeof(struct __pyx_obj_8pydecode_10potentials__BoolW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__BoolW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__BoolW = (struct __pyx_vtabstruct_8pydecode_10potentials__BoolW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__BoolW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__BoolW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = __Pyx_ImportType("pydecode.potentials", "SparseVectorPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorChart = __Pyx_ImportType("pydecode.potentials", "SparseVectorChart", sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_SparseVectorChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__SparseVectorW = __Pyx_ImportType("pydecode.potentials", "_SparseVectorW", sizeof(struct __pyx_obj_8pydecode_10potentials__SparseVectorW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__SparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__SparseVectorW = (struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__SparseVectorW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__SparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = __Pyx_ImportType("pydecode.potentials", "MinSparseVectorPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = __Pyx_ImportType("pydecode.potentials", "MinSparseVectorChart", sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MinSparseVectorW = __Pyx_ImportType("pydecode.potentials", "_MinSparseVectorW", sizeof(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__MinSparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorW = (struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__MinSparseVectorW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__MinSparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = __Pyx_ImportType("pydecode.potentials", "MaxSparseVectorPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = __Pyx_ImportType("pydecode.potentials", "MaxSparseVectorChart", sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MaxSparseVectorW = __Pyx_ImportType("pydecode.potentials", "_MaxSparseVectorW", sizeof(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__MaxSparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorW = (struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__MaxSparseVectorW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BinaryVectorPotentials = __Pyx_ImportType("pydecode.potentials", "BinaryVectorPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_BinaryVectorPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_BinaryVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_BinaryVectorPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_BinaryVectorPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_BinaryVectorPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_BinaryVectorPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BinaryVectorChart = __Pyx_ImportType("pydecode.potentials", "BinaryVectorChart", sizeof(struct __pyx_obj_8pydecode_10potentials_BinaryVectorChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_BinaryVectorChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__BinaryVectorW = __Pyx_ImportType("pydecode.potentials", "_BinaryVectorW", sizeof(struct __pyx_obj_8pydecode_10potentials__BinaryVectorW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__BinaryVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__BinaryVectorW = (struct __pyx_vtabstruct_8pydecode_10potentials__BinaryVectorW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__BinaryVectorW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__BinaryVectorW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingPotentials = __Pyx_ImportType("pydecode.potentials", "CountingPotentials", sizeof(struct __pyx_obj_8pydecode_10potentials_CountingPotentials), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_CountingPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials_CountingPotentials = (struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials_CountingPotentials->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials_CountingPotentials)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingChart = __Pyx_ImportType("pydecode.potentials", "CountingChart", sizeof(struct __pyx_obj_8pydecode_10potentials_CountingChart), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials_CountingChart)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__CountingW = __Pyx_ImportType("pydecode.potentials", "_CountingW", sizeof(struct __pyx_obj_8pydecode_10potentials__CountingW), 1); if (unlikely(!__pyx_ptype_8pydecode_10potentials__CountingW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10potentials__CountingW = (struct __pyx_vtabstruct_8pydecode_10potentials__CountingW*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10potentials__CountingW->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10potentials__CountingW)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pydecode/beam.pyx":29
 * 
 * 
 * def beam_search(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 BinaryVectorPotentials constraints,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_4beam_1beam_search, NULL, __pyx_n_s_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__beam_search, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/beam.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pydecode.beam", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pydecode.beam");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s____pyx_vtable__, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s____pyx_vtable__);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s____import__);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
