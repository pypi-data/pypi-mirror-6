#! /usr/bin/env python
# encoding: utf-8

import sys
import os
import waflib

def configure(conf):
    conf.load(['compiler_cxx', 'compiler_c', 'python', 'cython'])

    conf.env._GL_SOURCE = ['./_gl.pyx']
    conf.env._GL_INCLUDES = conf.env.INCLUDES_PYEXT[:]
    conf.env._GL_INCLUDES += [
        conf.path.abspath(),
        '../openfl_lime/include',
        '../openfl_lime/include/renderer/opengl',
    ]
    conf.env._GL_INCLUDES += conf.env.LIME_INCLUDES

    plat = conf.options.platform

    conf.env._GL_LIB = []
    conf.env._GL_USE = []
    conf.env._GL_CXXFLAGS = conf.env._CORE_CXXFLAGS[:]
    conf.env._GL_LINKFLAGS = conf.env._CORE_LINKFLAGS[:]

#linux
    if plat in ('linux', 'linux64'):   
        conf.env._GL_LIB = ['GL']

#mac
    if plat in ('mac', 'mac64'):   
        pass

#win32
    if plat == 'win32':
        conf.env._GL_LIB = ['OpenGL32']

def build(bld):
    bld.shlib(
        target='_gl',
        use=bld.env._GL_USE,
        features='cxx cxxshlib cython pyext',
        cxxflags=bld.env._GL_CXXFLAGS,
        linkflags=bld.env._GL_LINKFLAGS,
        source=bld.env._GL_SOURCE,
        includes=bld.env._GL_INCLUDES,
        defines=bld.env.LIME_DEFINES,
        lib=bld.env._GL_LIB,
        install_path=bld.env.INSTALL_PATH)
