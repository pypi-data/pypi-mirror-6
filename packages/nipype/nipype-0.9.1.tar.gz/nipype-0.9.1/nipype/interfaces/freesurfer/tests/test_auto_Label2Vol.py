# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.freesurfer.model import Label2Vol
def test_Label2Vol_inputs():
    input_map = dict(reg_file=dict(xor=('reg_file', 'reg_header', 'identity'),
    argstr='--reg %s',
    ),
    template_file=dict(mandatory=True,
    argstr='--temp %s',
    ),
    surface=dict(argstr='--surf %s',
    ),
    label_voxel_volume=dict(argstr='--labvoxvol %f',
    ),
    native_vox2ras=dict(argstr='--native-vox2ras',
    ),
    vol_label_file=dict(genfile=True,
    argstr='--o %s',
    ),
    subject_id=dict(argstr='--subject %s',
    ),
    invert_mtx=dict(argstr='--invertmtx',
    ),
    label_hit_file=dict(argstr='--hits %s',
    ),
    proj=dict(argstr='--proj %s %f %f %f',
    requires=('subject_id', 'hemi'),
    ),
    reg_header=dict(xor=('reg_file', 'reg_header', 'identity'),
    argstr='--regheader %s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    hemi=dict(argstr='--hemi %s',
    ),
    args=dict(argstr='%s',
    ),
    map_label_stat=dict(argstr='--label-stat %s',
    ),
    terminal_output=dict(nohash=True,
    mandatory=True,
    ),
    seg_file=dict(copyfile=False,
    mandatory=True,
    xor=('label_file', 'annot_file', 'seg_file', 'aparc_aseg'),
    argstr='--seg %s',
    ),
    subjects_dir=dict(),
    fill_thresh=dict(argstr='--fillthresh %.f',
    ),
    identity=dict(xor=('reg_file', 'reg_header', 'identity'),
    argstr='--identity',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    label_file=dict(copyfile=False,
    xor=('label_file', 'annot_file', 'seg_file', 'aparc_aseg'),
    argstr='--label %s...',
    mandatory=True,
    ),
    aparc_aseg=dict(xor=('label_file', 'annot_file', 'seg_file', 'aparc_aseg'),
    argstr='--aparc+aseg',
    mandatory=True,
    ),
    annot_file=dict(copyfile=False,
    mandatory=True,
    xor=('label_file', 'annot_file', 'seg_file', 'aparc_aseg'),
    requires=('subject_id', 'hemi'),
    argstr='--annot %s',
    ),
    )
    inputs = Label2Vol.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_Label2Vol_outputs():
    output_map = dict(vol_label_file=dict(),
    )
    outputs = Label2Vol.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
