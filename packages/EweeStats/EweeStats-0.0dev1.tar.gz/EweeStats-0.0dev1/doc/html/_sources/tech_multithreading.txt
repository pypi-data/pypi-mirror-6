Multithreading
##############
Le programme a été décomposé en deux threads : un pour la lecture, le traitement et l'enregistrement des données et l'autre pour la création du graphique.
Si on n'avait mis qu'un seul thread, il y aurait une grosse perte d'informations au moment de créer le graphique. En effet, celui-ci met quelques secondes à se faire.
Le programme ne prendrait alors qu'une mesure toutes les deux ou trois secondes, ce qui est inacceptable.
Le multithreading permet de prendre des mesures et créer le graphique en même temps, c'est-à-dire que le programme n'attend pas que le graphique ait été créé pour commencer une nouvelle mesure.

Synchronisation des threads
***************************
Les threads sont synchronisés grâce à une queue et la variable transmit_is_ready.

.. autofunction:: queue.Queue(maxsize=i)

    :param i: taille de la queue
    :type i: integer

La synchronisation se déroule comme ceci :

    #. La boucle principale lit la variable transmit_is_ready, si elle est à 0, on ne fait rien, si elle est à 1, on remplit la queue
    #. le threadGraph lit la queue, dès qu'elle est remplie :
    #. on passe la variable transmit_is_ready à 0 pour que la boucle principale ne remplisse plus la queue
    #. le threadGraph crée le graphique, puis remet la variable transmit_is_ready à 1

Ainsi, dès que le threadGraph est prêt, et que la boucle principale a lu une valeur, un graphique est crée.

Il y a donc 3 méthodes dans le programme :
    * le premier thread dédié à la lecture, écriture ... des données
    * le second dédié à la création du graphique
    * et le lancement des threads

La dernière méthode ne sert qu'à créer et lancer les threads à l'aide des fonctions

.. autofunction:: threading.Thread()

et

.. py:function:: threading.Thread.start()

    Start the thread's activity.

    It must be called at most once per thread object. It arranges for the
    object's run() method to be invoked in a separate thread of control.
    
    This method will raise a RuntimeError if called more than once on the
    same thread object.
