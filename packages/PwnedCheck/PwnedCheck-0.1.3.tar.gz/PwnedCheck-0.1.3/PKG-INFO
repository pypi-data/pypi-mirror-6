Metadata-Version: 1.1
Name: PwnedCheck
Version: 0.1.3
Summary: Python package to interact with http://haveibeenpwned.com
Home-page: https://github.com/caseydunham/PwnedCheck
Author: Casey Dunham
Author-email: casey.dunham@gmail.com
License: The MIT License (MIT)

Copyright (c) 2013 Casey Dunham <casey.dunham@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Description: ==========
        PwnedCheck
        ==========
        
        Python package to interact with http://haveibeenpwned.com
        
        
        ============
        Installation
        ============
        
            $ pip install PwnedCheck
        
        
        =====
        Usage
        =====
        
        For a complete overview of the haveibeenpwned API please see https://haveibeenpwned.com/API.
        
        All checks are done through the `check` method. This will check a single email address against the haveibeenpwned API
        and return a list of sites that the email address has been found on.
        
        If the email address is not found in any of the data leaks, it will return an empty list (`[]`).
        
        If the email address is invalid (not properly formatted), `PwnedCheck` will throw an `InvalidEmail` exception.
        
        
            import pwnedcheck
        
            print pwnedcheck.check("foo@bar.com")
        
        
        
        You can also just pass a username into the check method. The haveibeenpwned.com API will search this username against the Snapchat leak.
        
        
        
        v0.1.3, 2014-01-02 -- Update documentation for Snapchat Username search
        v0.1.2, 2013-12-17 -- Fixed documentation for PyPi
        v0.1.1, 2013-12-17 -- Fixed typo in urllib2 import
        v0.1.0, 2013-12-17 -- Initial release.
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Healthcare Industry
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: Security
