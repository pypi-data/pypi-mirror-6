#!/usr/bin/env python

# Copyright (c) 2012-2013, Calxeda Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# * Neither the name of Calxeda Inc. nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.


import os
import sys
import argparse
import subprocess
import cxmanage_api.fabric


def main():
    parser = argparse.ArgumentParser(
        usage='CXMUX [options] <command> <ecmeip>', conflict_handler='resolve'
    )
    parser.add_argument('-n', '--nosync', action='store_true',
        help='Do not synchronize input across terminals')
    parser.add_argument('--virt-env', action='store', type=str,
        help='Calls workon <virtual_environment> before spawning a window')
    parser.add_argument('-u', '--user', default='admin',
        help='Username for login')
    parser.add_argument('-p', '--password', default='admin',
        help='Password for login')
    action = parser.add_mutually_exclusive_group()
    action.add_argument('-s', '--ssh', action='store_true',
        help='USE the SPU IPs rather than ECME IPs')
    action.add_argument('-r', '--serial', action='store_true',
        help='Run a SOL session to the nodes rather than a command')
    parser.add_argument('command', nargs=argparse.REMAINDER,
        help='Command to run')
    parser.add_argument('ecmeip', nargs=1,
        help='IP to run the commands against')

    args = parser.parse_args()
    if args.serial and args.command:
        parser.error('Do not specify a command when running with --serial')

    args.ecmeip = args.ecmeip[0]

    command = ' '.join(args.command)
    if args.serial:
        command = 'ipmitool -U %s -P %s -I lanplus sol activate -H' % \
            (args.user, args.password)
    
    name = '%s@%s' % (command.split()[0], args.ecmeip)
    tmux_windows = subprocess.check_output(
        'tmux list-windows -F "#{window_name}"',
        shell=True
    )
    if name in tmux_windows.splitlines():
        print 'There is already another tmux window with name: %s' % name
        return 4

    if args.virt_env:
        command = 'workon %s; ' % args.virt_env + command

    fabric = cxmanage_api.fabric.Fabric(
        ip_address=args.ecmeip,
        credentials={
            "ecme_username": args.user, "ecme_password": args.password
        }
    )
    ips = [node.ip_address for node in fabric.nodes.values()]
    if args.ssh:
        ips = fabric.get_server_ip().values()

    for i, ip in enumerate(ips):
        if i == 0:
            os.system('tmux new-window -n "%s"' % name)
            os.system('tmux send-keys "%s %s"' % (command, ip))
            os.system('tmux send-keys Enter')
            continue

        os.system('tmux split-window -h')
        os.system('tmux send-keys "%s %s"' % (command, ip))
        os.system('tmux send-keys Enter')
        os.system('tmux select-layout -t "%s" tiled >/dev/null' % name)

    if not args.nosync:
        os.system(
            'tmux set-window-option -t "%s" synchronize-panes on >/dev/null' %
            name
        )


if __name__ == '__main__':
    sys.exit(main())
