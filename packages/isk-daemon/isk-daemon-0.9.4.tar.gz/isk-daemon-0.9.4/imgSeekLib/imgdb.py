# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imgdb', [dirname(__file__)])
        except ImportError:
            import _imgdb
            return _imgdb
        if fp is not None:
            try:
                _mod = imp.load_module('_imgdb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imgdb = swig_import_helper()
    del swig_import_helper
else:
    import _imgdb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imgdb.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _imgdb.SwigPyIterator_value(self)
    def incr(self, n=1): return _imgdb.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _imgdb.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _imgdb.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _imgdb.SwigPyIterator_equal(self, *args)
    def copy(self): return _imgdb.SwigPyIterator_copy(self)
    def next(self): return _imgdb.SwigPyIterator_next(self)
    def __next__(self): return _imgdb.SwigPyIterator___next__(self)
    def previous(self): return _imgdb.SwigPyIterator_previous(self)
    def advance(self, *args): return _imgdb.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _imgdb.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _imgdb.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _imgdb.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _imgdb.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _imgdb.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _imgdb.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _imgdb.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _imgdb.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _imgdb.IntVector___nonzero__(self)
    def __bool__(self): return _imgdb.IntVector___bool__(self)
    def __len__(self): return _imgdb.IntVector___len__(self)
    def pop(self): return _imgdb.IntVector_pop(self)
    def __getslice__(self, *args): return _imgdb.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _imgdb.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _imgdb.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _imgdb.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _imgdb.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _imgdb.IntVector___setitem__(self, *args)
    def append(self, *args): return _imgdb.IntVector_append(self, *args)
    def empty(self): return _imgdb.IntVector_empty(self)
    def size(self): return _imgdb.IntVector_size(self)
    def clear(self): return _imgdb.IntVector_clear(self)
    def swap(self, *args): return _imgdb.IntVector_swap(self, *args)
    def get_allocator(self): return _imgdb.IntVector_get_allocator(self)
    def begin(self): return _imgdb.IntVector_begin(self)
    def end(self): return _imgdb.IntVector_end(self)
    def rbegin(self): return _imgdb.IntVector_rbegin(self)
    def rend(self): return _imgdb.IntVector_rend(self)
    def pop_back(self): return _imgdb.IntVector_pop_back(self)
    def erase(self, *args): return _imgdb.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _imgdb.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _imgdb.IntVector_push_back(self, *args)
    def front(self): return _imgdb.IntVector_front(self)
    def back(self): return _imgdb.IntVector_back(self)
    def assign(self, *args): return _imgdb.IntVector_assign(self, *args)
    def resize(self, *args): return _imgdb.IntVector_resize(self, *args)
    def insert(self, *args): return _imgdb.IntVector_insert(self, *args)
    def reserve(self, *args): return _imgdb.IntVector_reserve(self, *args)
    def capacity(self): return _imgdb.IntVector_capacity(self)
    __swig_destroy__ = _imgdb.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _imgdb.IntVector_swigregister
IntVector_swigregister(IntVector)

class LongIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _imgdb.LongIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _imgdb.LongIntVector___nonzero__(self)
    def __bool__(self): return _imgdb.LongIntVector___bool__(self)
    def __len__(self): return _imgdb.LongIntVector___len__(self)
    def pop(self): return _imgdb.LongIntVector_pop(self)
    def __getslice__(self, *args): return _imgdb.LongIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _imgdb.LongIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _imgdb.LongIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _imgdb.LongIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _imgdb.LongIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _imgdb.LongIntVector___setitem__(self, *args)
    def append(self, *args): return _imgdb.LongIntVector_append(self, *args)
    def empty(self): return _imgdb.LongIntVector_empty(self)
    def size(self): return _imgdb.LongIntVector_size(self)
    def clear(self): return _imgdb.LongIntVector_clear(self)
    def swap(self, *args): return _imgdb.LongIntVector_swap(self, *args)
    def get_allocator(self): return _imgdb.LongIntVector_get_allocator(self)
    def begin(self): return _imgdb.LongIntVector_begin(self)
    def end(self): return _imgdb.LongIntVector_end(self)
    def rbegin(self): return _imgdb.LongIntVector_rbegin(self)
    def rend(self): return _imgdb.LongIntVector_rend(self)
    def pop_back(self): return _imgdb.LongIntVector_pop_back(self)
    def erase(self, *args): return _imgdb.LongIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _imgdb.new_LongIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _imgdb.LongIntVector_push_back(self, *args)
    def front(self): return _imgdb.LongIntVector_front(self)
    def back(self): return _imgdb.LongIntVector_back(self)
    def assign(self, *args): return _imgdb.LongIntVector_assign(self, *args)
    def resize(self, *args): return _imgdb.LongIntVector_resize(self, *args)
    def insert(self, *args): return _imgdb.LongIntVector_insert(self, *args)
    def reserve(self, *args): return _imgdb.LongIntVector_reserve(self, *args)
    def capacity(self): return _imgdb.LongIntVector_capacity(self)
    __swig_destroy__ = _imgdb.delete_LongIntVector
    __del__ = lambda self : None;
LongIntVector_swigregister = _imgdb.LongIntVector_swigregister
LongIntVector_swigregister(LongIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _imgdb.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _imgdb.DoubleVector___nonzero__(self)
    def __bool__(self): return _imgdb.DoubleVector___bool__(self)
    def __len__(self): return _imgdb.DoubleVector___len__(self)
    def pop(self): return _imgdb.DoubleVector_pop(self)
    def __getslice__(self, *args): return _imgdb.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _imgdb.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _imgdb.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _imgdb.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _imgdb.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _imgdb.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _imgdb.DoubleVector_append(self, *args)
    def empty(self): return _imgdb.DoubleVector_empty(self)
    def size(self): return _imgdb.DoubleVector_size(self)
    def clear(self): return _imgdb.DoubleVector_clear(self)
    def swap(self, *args): return _imgdb.DoubleVector_swap(self, *args)
    def get_allocator(self): return _imgdb.DoubleVector_get_allocator(self)
    def begin(self): return _imgdb.DoubleVector_begin(self)
    def end(self): return _imgdb.DoubleVector_end(self)
    def rbegin(self): return _imgdb.DoubleVector_rbegin(self)
    def rend(self): return _imgdb.DoubleVector_rend(self)
    def pop_back(self): return _imgdb.DoubleVector_pop_back(self)
    def erase(self, *args): return _imgdb.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _imgdb.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _imgdb.DoubleVector_push_back(self, *args)
    def front(self): return _imgdb.DoubleVector_front(self)
    def back(self): return _imgdb.DoubleVector_back(self)
    def assign(self, *args): return _imgdb.DoubleVector_assign(self, *args)
    def resize(self, *args): return _imgdb.DoubleVector_resize(self, *args)
    def insert(self, *args): return _imgdb.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _imgdb.DoubleVector_reserve(self, *args)
    def capacity(self): return _imgdb.DoubleVector_capacity(self)
    __swig_destroy__ = _imgdb.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _imgdb.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)


def queryImgData(*args):
  return _imgdb.queryImgData(*args)
queryImgData = _imgdb.queryImgData

def queryImgID(*args):
  return _imgdb.queryImgID(*args)
queryImgID = _imgdb.queryImgID

def queryImgBlob(*args):
  return _imgdb.queryImgBlob(*args)
queryImgBlob = _imgdb.queryImgBlob

def queryImgPath(*args):
  return _imgdb.queryImgPath(*args)
queryImgPath = _imgdb.queryImgPath

def queryImgDataForThresFast(*args):
  return _imgdb.queryImgDataForThresFast(*args)
queryImgDataForThresFast = _imgdb.queryImgDataForThresFast

def addImage(*args):
  return _imgdb.addImage(*args)
addImage = _imgdb.addImage

def addImageBlob(*args):
  return _imgdb.addImageBlob(*args)
addImageBlob = _imgdb.addImageBlob

def savedb(*args):
  return _imgdb.savedb(*args)
savedb = _imgdb.savedb

def loaddb(*args):
  return _imgdb.loaddb(*args)
loaddb = _imgdb.loaddb

def savealldbs(*args):
  return _imgdb.savealldbs(*args)
savealldbs = _imgdb.savealldbs

def loadalldbs(*args):
  return _imgdb.loadalldbs(*args)
loadalldbs = _imgdb.loadalldbs

def removeID(*args):
  return _imgdb.removeID(*args)
removeID = _imgdb.removeID

def resetdb(*args):
  return _imgdb.resetdb(*args)
resetdb = _imgdb.resetdb

def initDbase(*args):
  return _imgdb.initDbase(*args)
initDbase = _imgdb.initDbase

def closeDbase():
  return _imgdb.closeDbase()
closeDbase = _imgdb.closeDbase

def getImgCount(*args):
  return _imgdb.getImgCount(*args)
getImgCount = _imgdb.getImgCount

def isImageOnDB(*args):
  return _imgdb.isImageOnDB(*args)
isImageOnDB = _imgdb.isImageOnDB

def getImageHeight(*args):
  return _imgdb.getImageHeight(*args)
getImageHeight = _imgdb.getImageHeight

def getImageWidth(*args):
  return _imgdb.getImageWidth(*args)
getImageWidth = _imgdb.getImageWidth

def calcAvglDiff(*args):
  return _imgdb.calcAvglDiff(*args)
calcAvglDiff = _imgdb.calcAvglDiff

def calcDiff(*args):
  return _imgdb.calcDiff(*args)
calcDiff = _imgdb.calcDiff

def getImageAvgl(*args):
  return _imgdb.getImageAvgl(*args)
getImageAvgl = _imgdb.getImageAvgl

def getDBList():
  return _imgdb.getDBList()
getDBList = _imgdb.getDBList

def getImgIdList(*args):
  return _imgdb.getImgIdList(*args)
getImgIdList = _imgdb.getImgIdList

def isValidDB(*args):
  return _imgdb.isValidDB(*args)
isValidDB = _imgdb.isValidDB

def destroydb(*args):
  return _imgdb.destroydb(*args)
destroydb = _imgdb.destroydb

def removedb(*args):
  return _imgdb.removedb(*args)
removedb = _imgdb.removedb

def addKeywordImg(*args):
  return _imgdb.addKeywordImg(*args)
addKeywordImg = _imgdb.addKeywordImg

def addKeywordsImg(*args):
  return _imgdb.addKeywordsImg(*args)
addKeywordsImg = _imgdb.addKeywordsImg

def removeKeywordImg(*args):
  return _imgdb.removeKeywordImg(*args)
removeKeywordImg = _imgdb.removeKeywordImg

def removeAllKeywordImg(*args):
  return _imgdb.removeAllKeywordImg(*args)
removeAllKeywordImg = _imgdb.removeAllKeywordImg

def getKeywordsImg(*args):
  return _imgdb.getKeywordsImg(*args)
getKeywordsImg = _imgdb.getKeywordsImg

def queryImgIDKeywords(*args):
  return _imgdb.queryImgIDKeywords(*args)
queryImgIDKeywords = _imgdb.queryImgIDKeywords

def getAllImgsByKeywords(*args):
  return _imgdb.getAllImgsByKeywords(*args)
getAllImgsByKeywords = _imgdb.getAllImgsByKeywords

def getKeywordsVisualDistance(*args):
  return _imgdb.getKeywordsVisualDistance(*args)
getKeywordsVisualDistance = _imgdb.getKeywordsVisualDistance

def getKeywordsPopular(*args):
  return _imgdb.getKeywordsPopular(*args)
getKeywordsPopular = _imgdb.getKeywordsPopular
class clustersStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clustersStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clustersStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _imgdb.clustersStruct_id_set
    __swig_getmethods__["id"] = _imgdb.clustersStruct_id_get
    if _newclass:id = _swig_property(_imgdb.clustersStruct_id_get, _imgdb.clustersStruct_id_set)
    __swig_setmethods__["imgIds"] = _imgdb.clustersStruct_imgIds_set
    __swig_getmethods__["imgIds"] = _imgdb.clustersStruct_imgIds_get
    if _newclass:imgIds = _swig_property(_imgdb.clustersStruct_imgIds_get, _imgdb.clustersStruct_imgIds_set)
    __swig_setmethods__["diameter"] = _imgdb.clustersStruct_diameter_set
    __swig_getmethods__["diameter"] = _imgdb.clustersStruct_diameter_get
    if _newclass:diameter = _swig_property(_imgdb.clustersStruct_diameter_get, _imgdb.clustersStruct_diameter_set)
    def __init__(self): 
        this = _imgdb.new_clustersStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imgdb.delete_clustersStruct
    __del__ = lambda self : None;
clustersStruct_swigregister = _imgdb.clustersStruct_swigregister
clustersStruct_swigregister(clustersStruct)

class ClusterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _imgdb.ClusterVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _imgdb.ClusterVector___nonzero__(self)
    def __bool__(self): return _imgdb.ClusterVector___bool__(self)
    def __len__(self): return _imgdb.ClusterVector___len__(self)
    def pop(self): return _imgdb.ClusterVector_pop(self)
    def __getslice__(self, *args): return _imgdb.ClusterVector___getslice__(self, *args)
    def __setslice__(self, *args): return _imgdb.ClusterVector___setslice__(self, *args)
    def __delslice__(self, *args): return _imgdb.ClusterVector___delslice__(self, *args)
    def __delitem__(self, *args): return _imgdb.ClusterVector___delitem__(self, *args)
    def __getitem__(self, *args): return _imgdb.ClusterVector___getitem__(self, *args)
    def __setitem__(self, *args): return _imgdb.ClusterVector___setitem__(self, *args)
    def append(self, *args): return _imgdb.ClusterVector_append(self, *args)
    def empty(self): return _imgdb.ClusterVector_empty(self)
    def size(self): return _imgdb.ClusterVector_size(self)
    def clear(self): return _imgdb.ClusterVector_clear(self)
    def swap(self, *args): return _imgdb.ClusterVector_swap(self, *args)
    def get_allocator(self): return _imgdb.ClusterVector_get_allocator(self)
    def begin(self): return _imgdb.ClusterVector_begin(self)
    def end(self): return _imgdb.ClusterVector_end(self)
    def rbegin(self): return _imgdb.ClusterVector_rbegin(self)
    def rend(self): return _imgdb.ClusterVector_rend(self)
    def pop_back(self): return _imgdb.ClusterVector_pop_back(self)
    def erase(self, *args): return _imgdb.ClusterVector_erase(self, *args)
    def __init__(self, *args): 
        this = _imgdb.new_ClusterVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _imgdb.ClusterVector_push_back(self, *args)
    def front(self): return _imgdb.ClusterVector_front(self)
    def back(self): return _imgdb.ClusterVector_back(self)
    def assign(self, *args): return _imgdb.ClusterVector_assign(self, *args)
    def resize(self, *args): return _imgdb.ClusterVector_resize(self, *args)
    def insert(self, *args): return _imgdb.ClusterVector_insert(self, *args)
    def reserve(self, *args): return _imgdb.ClusterVector_reserve(self, *args)
    def capacity(self): return _imgdb.ClusterVector_capacity(self)
    __swig_destroy__ = _imgdb.delete_ClusterVector
    __del__ = lambda self : None;
ClusterVector_swigregister = _imgdb.ClusterVector_swigregister
ClusterVector_swigregister(ClusterVector)


def getClusterDb(*args):
  return _imgdb.getClusterDb(*args)
getClusterDb = _imgdb.getClusterDb

def getClusterKeywords(*args):
  return _imgdb.getClusterKeywords(*args)
getClusterKeywords = _imgdb.getClusterKeywords

def getIdsBloomFilter(*args):
  return _imgdb.getIdsBloomFilter(*args)
getIdsBloomFilter = _imgdb.getIdsBloomFilter
class bloom_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bloom_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bloom_filter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _imgdb.new_bloom_filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imgdb.delete_bloom_filter
    __del__ = lambda self : None;
    def insert(self, *args): return _imgdb.bloom_filter_insert(self, *args)
    def contains(self, *args): return _imgdb.bloom_filter_contains(self, *args)
    def size(self): return _imgdb.bloom_filter_size(self)
    def __iand__(self, *args): return _imgdb.bloom_filter___iand__(self, *args)
    def __ior__(self, *args): return _imgdb.bloom_filter___ior__(self, *args)
    def __ixor__(self, *args): return _imgdb.bloom_filter___ixor__(self, *args)
bloom_filter_swigregister = _imgdb.bloom_filter_swigregister
bloom_filter_swigregister(bloom_filter)

# This file is compatible with both classic and new-style classes.


