Metadata-Version: 1.1
Name: rabbitpy
Version: 0.12.3
Summary: A pure python, thread-safe, minimalistic and pythonic RabbitMQ client library
Home-page: http://rabbitpy.readthedocs.org
Author: Gavin M. Roy
Author-email: gavinmroy@gmail.com
License: Copyright (c) 2012-2013 Gavin M. Roy
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the rabbitpy library nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Description: rabbitpy - rabbitmq simplified
        ==============================
        
        A pure python, thread-safe, minimalistic and pythonic BSD Licensed
        AMQP/RabbitMQ library that supports Python 2.6+ and Python 3.2+.
        rabbitpy aims to provide a simple and easy to use API for interfacing with
        RabbitMQ, minimizing the programming overhead often found in other libraries.
        
        |PyPI version| |Downloads| |Build Status|
        
        Installation
        ------------
        
        rabbitpy may be installed via the Python package index with the tool of
        your choice. I prefer pip:
        
        ::
        
            pip install rabbitpy
        
        But there's always easy_install:
        
        ::
        
            easy_install rabbitpy
        
        rmqid Compatibility
        -------------------
        
        rabbitpy is API compatible with rmqid.
        
        Documentation
        -------------
        
        https://rabbitpy.readthedocs.org
        
        Requirements
        ------------
        
        -  pamqp - https://github.com/pika/pamqp
        -  requests - http://docs.python-requests.org/
        
        Examples
        ========
        
        Simple Publisher
        ----------------
        
        The simple publisher is ideal for sending one off messages:
        
        .. code:: python
        
            >>> rabbitpy.publish('amqp://guest:guest@localhost:5672/%2f',
                                 exchange='test',
                                 routing_key='example',
                                 body='This is my test message')
        
        If you want to add properties:
        
        .. code:: python
        
            >>> rabbitpy.publish('amqp://guest:guest@localhost:5672/%2f',
                                 exchange='test',
                                 routing_key='example',
                                 body='This is my test message',
                                 properties={'content_type': 'text/plain'})
        
        And publisher confirms:
        
        .. code:: python
        
            >>> rabbitpy.publish('amqp://guest:guest@localhost:5672/%2f',
                                 exchange='test',
                                 routing_key='example',
                                 body='This is my test message',
                                 properties={'content_type': 'text/plain'},
                                 confirm=True)
            True
            >>>
        
        Simple Getter
        -------------
        
        .. code:: python
        
            >>> m = rabbitpy.get('amqp://guest:guest@localhost:5672/%2f', 'test')
            >>> m.json()
            {u'foo': u'bar'}
        
        Simple Consumer
        ---------------
        .. code:: python
        
            >>> for message in rabbitpy.consume('amqp://guest:guest@localhost:5672/%2f', 'example', no_ack=True):
            ...     message.pprint(properties=True)
            ...
            Exchange: amq.topic
        
            Routing Key: example
        
            Properties:
        
            {'app_id': '',
             'cluster_id': '',
             'content_encoding': '',
             'content_type': '',
             'correlation_id': '',
             'delivery_mode': None,
             'expiration': '',
             'headers': None,
             'message_id': 'b191f7f4-4e9d-4420-b18a-2ac8783ab3c5',
             'message_type': '',
             'priority': None,
             'reply_to': '',
             'timestamp': datetime.datetime(2013, 12, 18, 21, 48, 5),
             'user_id': ''}
        
            Body:
        
            'This is my test message'
        
        More complex examples are available at https://rabbitpy.readthedocs.org
        
        Version History
        ---------------
        - 0.12.3: Minor Message.pprint() reformatting
        - 0.12.2: Add Exchange and Routing Key to Message.pprint, check for empty method frames in Channel._create_message
        - 0.12.1: Fix exception with pika.exceptions.AMQP
        - 0.12.0: Updated simple consumer to potential one-liner, added rabbitpy.Message.pprint()
        - 0.11.0: Major bugfix focused on receiving multiple AMQP frames at the same time. Add auto-coersion of property data-types.
        - 0.10.0: Rewrite of IO layer yielding improved performance and reduction of CPU usage, bugfixes
        - 0.9.0: Major performance improvements, CPU usage reduction, minor bug-fixes
        - 0.8.0: Major bugfixes, IPv6 support
        - 0.7.0: Bugfixes and code cleanup. Most notable fix around Basic.Return and recursion in Channel._wait_on_frame.
        - 0.6.0: Bugfix with Queue.get(), RPC requests expecting multiple responses and the new Queue.consume_messages() method.
        - 0.5.1: Installer/setup fix
        - 0.5.0: Bugfix release including low level socket sending fix and connection timeouts.
        
        .. |PyPI version| image:: https://badge.fury.io/py/rabbitpy.png
           :target: http://badge.fury.io/py/rabbitpy
        .. |Downloads| image:: https://pypip.in/d/rabbitpy/badge.png
           :target: https://crate.io/packages/rabbitpy
        .. |Build Status| image:: https://travis-ci.org/gmr/rabbitpy.png?branch=master
           :target: https://travis-ci.org/gmr/rabbitpy
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Communications
Classifier: Topic :: Internet
Classifier: Topic :: Software Development :: Libraries
