<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="collective.tablepage">

<head>
<metal:js fill-slot="javascript_head_slot">
<script type="text/javascript">
<!--
(function ($) {
    $(document).ready(function () {
        /**
         * add new file
         */

        var fieldInc = 1;
        var patt = /_\d+$/;
        function incAttribute(elem, name) {
            var attr = elem.attr(name);
            var oldVal = parseInt(patt.exec(attr)[0].substr(1, attr.length-1), 10);
            elem.attr(name, attr.replace( patt, '_' + (oldVal + fieldInc) ));
        }
        
        // Save the new field model for later
        var subFieldFile = $('.fileField').clone();
        $('#newFile').click(function(event) {
            event.preventDefault();
            var newFileField = subFieldFile.clone().hide();
            $('.fileField:last').after(newFileField);
            newFileField.find(':input').each(function() {
                incAttribute($(this), 'id');
                incAttribute($(this), 'name');
            });
            newFileField.find('label').each(function() {
                incAttribute($(this), 'for');
            });
            newFileField.slideDown('fast');
            newFileField.find(':input:first').focus();
            fieldInc++;
        });


        /**
         * Sorting multiple files
         */

        function moveRow($element, direction) {
            var $myParent = $element.parents('li.storageFile');
            var $siblingParent = null;
            if (direction==='up') {
                $siblingParent = $myParent.prev();
                $myParent.insertBefore($siblingParent);
            } else if (direction==='down') {
                $siblingParent = $myParent.next();            
                $myParent.insertAfter($siblingParent);
            }
            // Now switching buttons (I can't use "detach" until Plone 3.3 is supported)
            var myButtons = $myParent.find('.commandSelectedFile').clone(true);
            $myParent.find('.commandSelectedFile').remove();
            $siblingParent.find('.commandSelectedFile').appendTo($myParent);
            $siblingParent.append(myButtons);
        }

        $('a.moveUp').click(function(event) {
            event.preventDefault();
            moveRow($(this), 'up');
        });
        $('a.moveDown').click(function(event) {
            event.preventDefault();
            moveRow($(this), 'down');
        });
        $('a.removeRow').click(function(event) {
            event.preventDefault()
            var row = $(this).parents('li.storageFile');
            
            // if is the first or last row, some buttons must be changed
            if (row.prevAll('li').length==0) {
                row.next().find('a.moveUp').remove();
            }
            if (row.nextAll('li').length==0) {
                row.prev().find('a.moveDown').remove();
            }
            row.remove();
            $('.availableFiles li[data-uid=' + row.attr('data-uid') + ']').show();

        });
        $('a.addRow').click(function(event) {
            event.preventDefault();
            var row = $(this).parents('li.storageFile');
            row.hide();
            var activeFiles = $(this).parents('.subField').find('.savedFiles');
            var fieldId = activeFiles.attr('data-fieldname');
            var newRow = $('<li class="storageFile"><\/li>');
            newRow.attr('data-uid', row.data('uid'));
            var newInput = row.find('input').clone();
            newRow.append(newInput);
            newInput.attr('name', 'existing_' + fieldId + ':list');
            newRow.append(row.find('a:first').clone());
            if ($('li', activeFiles).length>0) {
                newRow.append($('#buttonModels').find('a.moveUp').clone(true));
                $('li:last', activeFiles).prepend($('#buttonModels').find('a.moveDown').clone(true));
            }
            newRow.append($('#buttonModels').find('a.removeRow').clone(true));
            activeFiles.append(newRow);
        });
        
        /*
         * Multiple file upload and validation error is a nighmare. We have the uuid in the request
         * and also stored in the "data-submitted-values" HTML 5 attribute, but we need to "click"
         * on add commands to select those values.
         */
         
        $('.savedFiles[data-submitted-values]').each(function() {
            var $this = $(this),
                container = $this.parents('.subField');
                
                uuids = $this.attr('data-submitted-values').split(','),
                selectable = container.find('.availableFiles');
            for (var i=0;i<uuids.length;i++) {
                $('.storageFile input[value=' + uuids[i] + ']', selectable).nextAll('.commandSelectedFile').click();
            }
        });
         
    });
})(jQuery);
//-->
</script>
</metal:js>
</head>

<body>

<metal:main fill-slot="main">
    <tal:main-macro metal:define-macro="main">
        <h1 class="documentFirstHeading" i18n:translate=""
            tal:condition="python:request.get('row-index') is None or request.get('addRow')"> 
            New row
        </h1>
        <h1 class="documentFirstHeading" i18n:translate=""
            tal:condition="python:request.get('row-index') is not None and not request.get('addRow')"> 
            Edit row
        </h1>

        <p class="documentDescription" i18n:translate="">
            Fill data of this table's row
        </p>

        <form id="editRow" class="enableUnloadProtection" method="post" enctype="multipart/form-data" action=""
              tal:attributes="action string:${view/context/absolute_url}/@@${view/__name__}">
            <fieldset>
                <legend i18n:translate="">Provide data for the row</legend>
            
                <div class="field tablePageField"
                     tal:attributes="class python:field.configuration['id'] in view.errors.keys() and 'field tablePageField error' or default"
                     tal:repeat="field view/fields">
                     <div class="fieldErrorBox"
                          tal:define="err_msg python:view.errors.get(field.configuration['id'])"
                          tal:condition="err_msg"
                          tal:content="err_msg">Error message</div>
                    <tal:field define="value python:view.data.get(field.configuration['id'])"
                               replace="structure python:field.render_edit(value)">
                    </tal:field>
                </div>

                <input type="hidden" name="row-index:int" value=""
                       tal:condition="python:request.get('row-index') is not None"
                       tal:attributes="value request/row-index" />
                <input type="hidden" name="addRow" value="1"
                       tal:condition="python:request.get('addRow')" />
                <input type="hidden" name="form.submitted" value="1" />
                <input class="context" type="submit" name="save" value="Save" i18n:domain="plone" i18n:attributes="value" />
                <input class="context noUnloadProtection" type="submit" name="cancel" value="Cancel"
                       i18n:domain="plone"  i18n:attributes="value" />
            </fieldset>
        </form>

    </tal:main-macro>
</metal:main>

</body>
</html>

