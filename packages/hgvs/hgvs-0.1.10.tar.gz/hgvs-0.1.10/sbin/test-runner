#!/usr/bin/env python
# run mapping tests from tsv files with cols id,HGVSg,HGVSc,HGVSp.

# Example:
# (default-2.7)snafu$ ./sbin/test-runner tests/data/DNAH11-HGMD.tsv
# HGVSg in	HGVSc in 	HGVSp in	HGVSg (c-to-g)	HGVSc (g-to-c)	HGVSp (c-to-p)	c-to-g eq?	g-to-c eq?	c-to-p eq?
# NC_000007.13:g.21726874G>A	NM_003777.3:c.5799+1G>A		NC_000007.13:g.21726874G>A	NM_003777.3:c.5799+1G>A	NP_003768.2:p.=	True	True	
# NC_000007.13:g.21760475G>A	NM_003777.3:c.7287+1G>A		NC_000007.13:g.21760475G>A	NM_003777.3:c.7287+1G>A	NP_003768.2:p.=	True	True	


import io, csv, logging, sys

import ometa.runtime

import uta.db.transcriptdb

import hgvs.hgvsmapper as hgvsmapper
import hgvs.parser


def read_tsv(fn):
    _in = csv.DictReader(open(fn,'r'), delimiter='\t')
    for rec in _in:
        if rec['id'].startswith('#'):
            continue
        yield rec

def parse_or_None(hgvsparser,hgvs):
    try:
        return hgvsparser.parse_hgvs_variant(hgvs)
    except ometa.runtime.ParseError:
        return None

if __name__ == '__main__':
    logging.basicConfig(level=logging.WARN)

    uta_conn = uta.db.transcriptdb.TranscriptDB()
    hgvsmapper = hgvs.hgvsmapper.HGVSMapper(uta_conn, cache_transcripts=True)
    hgvsparser = hgvs.parser.Parser()
    
    def _test1(rec):
        logging.debug('processing '+', '.join([rec['HGVSg'],rec['HGVSc'],rec['HGVSp']]))

        var_g = hgvsparser.parse_hgvs_variant(rec['HGVSg'])
        var_c = hgvsparser.parse_hgvs_variant(rec['HGVSc'])
        var_p = parse_or_None(hgvsparser,rec['HGVSp'])
        
        var_c_from_g = hgvsmapper.hgvsg_to_hgvsc( var_g, var_c.ac )
        var_g_from_c = hgvsmapper.hgvsc_to_hgvsg( var_c )
        var_p_from_c = hgvsmapper.hgvsc_to_hgvsp( var_c, var_p.ac )
        
        hgvs_c_from_g = str(var_c_from_g)
        hgvs_g_from_c = str(var_g_from_c)
        hgvs_p_from_c = str(var_p_from_c)

        c_to_g_eq = rec['HGVSg'] == hgvs_g_from_c
        g_to_c_eq = rec['HGVSc'] == hgvs_c_from_g

        if rec['HGVSp'] == '':
            c_to_p_eq = ''
        else:
            # parse and reformat to canonicalize 
            in_posedit = str(var_p).split(':')[1]
            out_posedit = hgvs_p_from_c.split(':')[1]
            c_to_p_eq = in_posedit == out_posedit

        print( '\t'.join([
            rec['HGVSg'], rec['HGVSc'], rec['HGVSp'],
            hgvs_g_from_c, hgvs_c_from_g, hgvs_p_from_c,
            str(c_to_g_eq), str(g_to_c_eq), str(c_to_p_eq), 
            ]))


    print( '\t'.join([
        'HGVSg in', 'HGVSc in ', 'HGVSp in',
        'HGVSg (c-to-g)', 'HGVSc (g-to-c)', 'HGVSp (c-to-p)',
        'c-to-g eq?', 'g-to-c eq?', 'c-to-p eq?',
        ]))

    for rec in read_tsv(sys.argv[1]):
        try:
            _test1(rec)
        except Exception as e:
            logging.error(e)
            logging.error(rec)
            

## <LICENSE>
## Copyright 2014 HGVS Contributors (https://bitbucket.org/invitae/hgvs)
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## </LICENSE>
