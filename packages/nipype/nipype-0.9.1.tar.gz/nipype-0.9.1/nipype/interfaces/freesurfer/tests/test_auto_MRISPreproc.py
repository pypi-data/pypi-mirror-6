# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.freesurfer.model import MRISPreproc
def test_MRISPreproc_inputs():
    input_map = dict(surf_dir=dict(argstr='--surfdir %s',
    ),
    vol_measure_file=dict(argstr='--iv %s %s...',
    ),
    fsgd_file=dict(xor=('subjects', 'fsgd_file', 'subject_file'),
    argstr='--fsgd %s',
    ),
    fwhm=dict(xor=['num_iters'],
    argstr='--fwhm %f',
    ),
    fwhm_source=dict(xor=['num_iters_source'],
    argstr='--fwhm-src %f',
    ),
    surf_measure=dict(xor=('surf_measure', 'surf_measure_file', 'surf_area'),
    argstr='--meas %s',
    ),
    subject_file=dict(xor=('subjects', 'fsgd_file', 'subject_file'),
    argstr='--f %s',
    ),
    surf_measure_file=dict(xor=('surf_measure', 'surf_measure_file', 'surf_area'),
    argstr='--is %s...',
    ),
    source_format=dict(argstr='--srcfmt %s',
    ),
    subjects=dict(xor=('subjects', 'fsgd_file', 'subject_file'),
    argstr='--s %s...',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    hemi=dict(argstr='--hemi %s',
    mandatory=True,
    ),
    surf_area=dict(xor=('surf_measure', 'surf_measure_file', 'surf_area'),
    argstr='--area %s',
    ),
    args=dict(argstr='%s',
    ),
    terminal_output=dict(nohash=True,
    mandatory=True,
    ),
    num_iters_source=dict(xor=['fwhm_source'],
    argstr='--niterssrc %d',
    ),
    smooth_cortex_only=dict(argstr='--smooth-cortex-only',
    ),
    subjects_dir=dict(),
    num_iters=dict(xor=['fwhm'],
    argstr='--niters %d',
    ),
    proj_frac=dict(argstr='--projfrac %s',
    ),
    target=dict(mandatory=True,
    argstr='--target %s',
    ),
    out_file=dict(genfile=True,
    argstr='--out %s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    )
    inputs = MRISPreproc.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_MRISPreproc_outputs():
    output_map = dict(out_file=dict(),
    )
    outputs = MRISPreproc.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
