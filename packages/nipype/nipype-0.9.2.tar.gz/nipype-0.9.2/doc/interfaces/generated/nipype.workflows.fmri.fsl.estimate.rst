.. AUTO-GENERATED FILE -- DO NOT EDIT!

workflows.fmri.fsl.estimate
===========================


.. module:: nipype.workflows.fmri.fsl.estimate


.. _nipype.workflows.fmri.fsl.estimate.create_fixed_effects_flow:

:func:`create_fixed_effects_flow`
---------------------------------

`Link to code <http://github.com/nipy/nipype/tree/b1b78251dfd6f3b60c6bc63f79f86b356a8fe9cc/nipype/workflows/fmri/fsl/estimate.py#L134>`__



Create a fixed-effects workflow

This workflow is used to combine registered copes and varcopes across runs
for an individual subject

Example
~~~~~~~

>>> fixedfx = create_fixed_effects_flow()
>>> fixedfx.base_dir = '.'
>>> fixedfx.inputs.inputspec.copes = [['cope1run1.nii.gz', 'cope1run2.nii.gz'], ['cope2run1.nii.gz', 'cope2run2.nii.gz']] # per contrast
>>> fixedfx.inputs.inputspec.varcopes = [['varcope1run1.nii.gz', 'varcope1run2.nii.gz'], ['varcope2run1.nii.gz', 'varcope2run2.nii.gz']] # per contrast
>>> fixedfx.inputs.inputspec.dof_files = ['dofrun1', 'dofrun2'] # per run
>>> fixedfx.run() #doctest: +SKIP

Inputs::

     inputspec.copes : list of list of cope files (one list per contrast)
     inputspec.varcopes : list of list of varcope files (one list per
                          contrast)
     inputspec.dof_files : degrees of freedom files for each run

Outputs::

     outputspec.res4d : 4d residual time series
     outputspec.copes : contrast parameter estimates
     outputspec.varcopes : variance of contrast parameter estimates
     outputspec.zstats : z statistics of contrasts
     outputspec.tstats : t statistics of contrasts


Graph
~~~~~

.. graphviz::

	digraph fixedfx{

	  label="fixedfx";

	  fixedfx_l2model[label="l2model (fsl)"];

	  fixedfx_inputspec[label="inputspec (utility)"];

	  fixedfx_copemerge[label="copemerge (fsl)"];

	  fixedfx_varcopemerge[label="varcopemerge (fsl)"];

	  fixedfx_gendofvolume[label="gendofvolume (utility)"];

	  fixedfx_flameo[label="flameo (fsl)"];

	  fixedfx_outputspec[label="outputspec (utility)"];

	  fixedfx_l2model -> fixedfx_flameo;

	  fixedfx_l2model -> fixedfx_flameo;

	  fixedfx_l2model -> fixedfx_flameo;

	  fixedfx_inputspec -> fixedfx_copemerge;

	  fixedfx_inputspec -> fixedfx_gendofvolume;

	  fixedfx_inputspec -> fixedfx_varcopemerge;

	  fixedfx_copemerge -> fixedfx_gendofvolume;

	  fixedfx_copemerge -> fixedfx_flameo;

	  fixedfx_varcopemerge -> fixedfx_flameo;

	  fixedfx_gendofvolume -> fixedfx_flameo;

	  fixedfx_flameo -> fixedfx_outputspec;

	  fixedfx_flameo -> fixedfx_outputspec;

	  fixedfx_flameo -> fixedfx_outputspec;

	  fixedfx_flameo -> fixedfx_outputspec;

	  fixedfx_flameo -> fixedfx_outputspec;

	}


.. _nipype.workflows.fmri.fsl.estimate.create_modelfit_workflow:

:func:`create_modelfit_workflow`
--------------------------------

`Link to code <http://github.com/nipy/nipype/tree/b1b78251dfd6f3b60c6bc63f79f86b356a8fe9cc/nipype/workflows/fmri/fsl/estimate.py#L8>`__



Create an FSL individual modelfitting workflow

Example
~~~~~~~

>>> modelfit = create_modelfit_workflow()
>>> modelfit.base_dir = '.'
>>> info = dict()
>>> modelfit.inputs.inputspec.session_info = info
>>> modelfit.inputs.inputspec.interscan_interval = 3.
>>> modelfit.inputs.inputspec.film_threshold = 1000
>>> modelfit.run() #doctest: +SKIP

Inputs::

     inputspec.session_info : info generated by modelgen.SpecifyModel
     inputspec.interscan_interval : interscan interval
     inputspec.contrasts : list of contrasts
     inputspec.film_threshold : image threshold for FILM estimation

Outputs::

     outputspec.realignment_parameters : realignment parameter files
     outputspec.smoothed_files : smoothed functional files
     outputspec.outlier_files : list of outliers
     outputspec.outlier_stats : statistics of outliers
     outputspec.outlier_plots : images of outliers
     outputspec.mask_file : binary mask file in reference image space
     outputspec.reg_file : registration file that maps reference image to
                           freesurfer space
     outputspec.reg_cost : cost of registration (useful for detecting
                           misalignment)


Graph
~~~~~

.. graphviz::

	digraph modelfit{

	  label="modelfit";

	  modelfit_inputspec[label="inputspec (utility)"];

	  modelfit_level1design[label="level1design (fsl)"];

	  modelfit_modelgen[label="modelgen (fsl)"];

	  modelfit_modelestimate[label="modelestimate (fsl)"];

	  modelfit_conestimate[label="conestimate (fsl)"];

	  modelfit_ztop[label="ztop (fsl)"];

	  modelfit_outputspec[label="outputspec (utility)"];

	  modelfit_inputspec -> modelfit_level1design;

	  modelfit_inputspec -> modelfit_level1design;

	  modelfit_inputspec -> modelfit_level1design;

	  modelfit_inputspec -> modelfit_level1design;

	  modelfit_inputspec -> modelfit_level1design;

	  modelfit_inputspec -> modelfit_modelestimate;

	  modelfit_inputspec -> modelfit_modelestimate;

	  modelfit_level1design -> modelfit_modelgen;

	  modelfit_level1design -> modelfit_modelgen;

	  modelfit_modelgen -> modelfit_modelestimate;

	  modelfit_modelgen -> modelfit_conestimate;

	  modelfit_modelestimate -> modelfit_conestimate;

	  modelfit_modelestimate -> modelfit_conestimate;

	  modelfit_modelestimate -> modelfit_conestimate;

	  modelfit_modelestimate -> modelfit_conestimate;

	  modelfit_modelestimate -> modelfit_outputspec;

	  modelfit_modelestimate -> modelfit_outputspec;

	  modelfit_conestimate -> modelfit_ztop;

	  modelfit_conestimate -> modelfit_outputspec;

	  modelfit_conestimate -> modelfit_outputspec;

	  modelfit_ztop -> modelfit_outputspec;

	}


.. _nipype.workflows.fmri.fsl.estimate.create_overlay_workflow:

:func:`create_overlay_workflow`
-------------------------------

`Link to code <http://github.com/nipy/nipype/tree/b1b78251dfd6f3b60c6bc63f79f86b356a8fe9cc/nipype/workflows/fmri/fsl/estimate.py#L114>`__



Setup overlay workflow


Graph
~~~~~

.. graphviz::

	digraph overlay{

	  label="overlay";

	  overlay_overlaystats[label="overlaystats (fsl)"];

	  overlay_slicestats[label="slicestats (fsl)"];

	  overlay_overlaystats -> overlay_slicestats;

	}

