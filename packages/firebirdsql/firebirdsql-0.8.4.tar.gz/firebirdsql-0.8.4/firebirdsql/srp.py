##############################################################################
# Copyright (c) 2013 Hajime Nakagami<nakagami@gmail.com>
# All rights reserved.
# Licensed under the New BSD License
# (http://www.freebsd.org/copyright/freebsd-license.html)
#
# Python DB-API 2.0 module for Firebird. 
##############################################################################
# This SRP implementation is in reference to
# http://omake.accense.com/browser/python/SRP/srp.py .
'''
Following document was copied from <http://srp.stanford.edu/design.html>.
-----
SRP Protocol Design

SRP is the newest addition to a new class of strong authentication protocols that resist all the well-known passive and active attacks over the network. SRP borrows some elements from other key-exchange and identification protcols and adds some subtlee
 modifications and refinements. The result is a protocol that preserves the strength and efficiency of the EKE family protocols while fixing some of their shortcomings. 

The following is a description of SRP-6 and 6a, the latest versions of SRP: 

  N    A large safe prime (N = 2q+1, where q is prime)
       All arithmetic is done modulo N.
  g    A generator modulo N
  k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
  s    User's salt
  I    Username
  p    Cleartext Password
  H()  One-way hash function
  ^    (Modular) Exponentiation
  u    Random scrambling parameter
  a,b  Secret ephemeral values
  A,B  Public ephemeral values
  x    Private key (derived from p and s)
  v    Password verifier

The host stores passwords using the following formula: 

  x = H(s, p)               (s is chosen randomly)
  v = g^x                   (computes password verifier)

The host then keeps {I, s, v} in its password database. The authentication protocol itself goes as follows: 

User -> Host:  I, A = g^a                  (identifies self, a = random number)
Host -> User:  s, B = kv + g^b             (sends salt, b = random number)

        Both:  u = H(A, B)

        User:  x = H(s, p)                 (user enters password)
        User:  S = (B - kg^x) ^ (a + ux)   (computes session key)
        User:  K = H(S)

        Host:  S = (Av^u) ^ b              (computes session key)
        Host:  K = H(S)

Now the two parties have a shared, strong session key K. To complete authentication, they need to prove to each other that their keys match. One possible way: 

User -> Host:  M = H(H(N) xor H(g), H(I), s, A, B, K)
Host -> User:  H(A, M, K)

The two parties also employ the following safeguards: 

  1. The user will abort if he receives B == 0 (mod N) or u == 0. 
  2. The host will abort if it detects that A == 0 (mod N). 
  3. The user must show his proof of K first. If the server detects that the user's proof is incorrect, it must abort without showing its own proof of K. 

See http://srp.stanford.edu/ for more information.
'''

import sys
import hashlib
import hmac
import random
import binascii

DEBUG=True

PYTHON_MAJOR_VER = sys.version_info[0]

if PYTHON_MAJOR_VER == 3:
    def ord(c):
        return c

ablen = 256     # length of a, b (bits)

# 1024, 1536, 2048, 3072, 4096, 6144 and 8192 bit 'N' and its generator.
# This table was copied from "TLSLite v0.3.8".

pflist = {
  1024 : (2, 128, 0xEEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3),
  1536 : (2, 192, 0x9DEF3CAFB939277AB1F12A8617A47BBBDBA51DF499AC4C80BEEEA9614B19CC4D5F4F5F556E27CBDE51C6A94BE4607A291558903BA0D0F84380B655BB9A22E8DCDF028A7CEC67F0D08134B1C8B97989149B609E0BE3BAB63D47548381DBC5B1FC764E3F4B53DD9DA1158BFD3E2B9C8CF56EDF019539349627DB2FD53D24B7C48665772E437D6C7F8CE442734AF7CCB7AE837C264AE3A9BEB87F8A2FE9B8B5292E5A021FFF5E91479E8CE7A28C2442C6F315180F93499A234DCF76E3FED135F9BB),
  2048 : (2, 256, 0xAC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310DCD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF747359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB694B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73),
  3072 : (2, 384, 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF),
  4096 : (5, 512, 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF),
  6144 : (5, 768, 0x
  8192 : (5, 1024, 0x
}

def bytes2long(s):
    n = 0
    for c in s:
        n <<= 8
        n += ord(c)
    return n

def long2bytes(n):
    s = []
    while n > 0:
      s.insert(0, n & 255)
      n >>= 8
    if PYTHON_MAJOR_VER == 3:
        return bytes(s)
    else:
        return b''.join([chr(c) for c in s])

def sha1(*args):
    sha1 = hashlib.sha1()
    for v in args:
        if not isinstance(v, bytes):
            v = long2bytes(v)
        sha1.update(v)
    return sha1.digest()

def pad(n, scale):
    s = []
    for x in range(scale):
        s.insert(0, n & 255)
        n >>= 8
    if PYTHON_MAJOR_VER == 3:
        return bytes(s)
    else:
        return b''.join([chr(c) for c in s])

def makeU(x, y, scale):
    return bytes2long(sha1(pad(x, scale), pad(y, scale)))

def makeX(salt, user, password):
    return bytes2long(sha1(salt, sha1(user, b':', password)))

def client_seed(user, password, bits=1024):
    "A, a"
    g, scale, N = pflist[bits]
    while 1:
      a = random.randrange(0, 1 << ablen)
      A = pow(g, a, N)
      if A != 0:
        break
    return A, a

def server_seed(v, bits=1024):
    "B, b"
    g, scale, N = pflist[bits]
    k = makeU(N, g, scale)
    while 1:
      b = random.randrange(0, 1 << ablen)
      B = (pow(g, b, N) + k * v) % N
      if B != 0:
        break
    return B, b

def client_proof(user, password, salt, A, B, a, bits=1024):
    "M, K"
    g, scale, N = pflist[bits]
    k = makeU(N, g, scale)

    # User -> Host:  M = H(H(N) xor H(g), H(I), s, A, B, K)
    u = makeU(A, B, scale)
    x = makeX(salt, user, password)
    v = pow(g, x, N)
    S = pow((B - k * v) % N, a + u * x, N)
    K = sha1(S)
    sha_hmac = hmac.new(K)
    sha_hmac.update(sha1(N))
    sha_hmac.update(sha1(g))
    sha_hmac.update(sha1(user))
    sha_hmac.update(salt)
    sha_hmac.update(long2bytes(A))
    sha_hmac.update(long2bytes(B))
    return sha_hmac.digest(), K

def server_proof(user, salt, A, B, clientProof, b, v, bits=1024):
    g, scale, N = pflist[bits]
    u = makeU(A, B, scale)
    S = pow((A * pow(v, u, N)) % N, b, N)
    K = sha1(S)
    sha_hmac = hmac.new(K)
    sha_hmac.update(sha1(N))
    sha_hmac.update(sha1(g))
    sha_hmac.update(sha1(user))
    sha_hmac.update(salt)
    sha_hmac.update(long2bytes(A))
    sha_hmac.update(long2bytes(B))
    M = sha_hmac.digest()
    assert clientProof == M
    sha_hmac = hmac.new(K)
    sha_hmac.update(long2bytes(A))
    sha_hmac.update(M)
    return sha_hmac.digest(), K

def verify_server_proof(clientKey, A, M, serverProof):
    sha_hmac = hmac.new(clientKey)
    sha_hmac.update(long2bytes(A))
    sha_hmac.update(M)
    assert sha_hmac.digest() == serverProof

def get_salt():
    saltlen = 32    # bytes
    if PYTHON_MAJOR_VER == 3:
        return bytes([random.randrange(0, 256) for x in range(saltlen)])
    else:
        return b''.join([chr(random.randrange(0, 256)) for x in range(saltlen)])

def get_verifier(user, password, salt, bits=1024):
    g, scale, N = pflist[bits]
    v = pow(g, makeX(salt, user, password), N)
    return v

if __name__ == '__main__':
    """
    A, a, B, b are long.
    salt, M are bytes.
    """
    # Both
    bits = 1024
    user = b'sysdba'
    password = b'masterkey'

    # Client send A to Server
    A, a = client_seed(user, password)

    # Server send B, salt to Client
    salt = get_salt()
    v = get_verifier(user, password, salt)
    B, b = server_seed(v)

    # Client send M to Server
    M, clientKey = client_proof(user, password, salt, A, B, a, bits=bits)

    # Server send serverProof to Client
    serverProof, serverKey = server_proof(user, salt, A, B, M, b, v)

    # Client can verify by serverProof
    verify_server_proof(clientKey, A, M, serverProof)

    # Client and Server has same key
    assert clientKey == serverKey

