= My Presentation

Author: @somebody

== My First Slide

Presentation software for engineers

[options="incremental"]
* Content should be simple but presentation stylish.
* Author slides in plain text (asciidoc)
* And play them in the browser.

== My Second Slide

[source,python]
----
>>> x = list("Simeon")
>>> x.lower()
"simeon"
----    

== Line Number are Optional

[source,python,numbered]
----
# with line numbers
import datetime
print "Hello World"
----    

== I want presenter notes

Sorry. Working on it...

We do have "extra content". Put items in a sidebar directive and hit
"s". Try it now.


[[floating-bubble]]
**********
This is sidebar content.

Show it only if you need to...
**********

== Of course you can make lists

And use a directive to make them appear one item at a time.

[options="incremental"]               
1. bulleted lists
2. ordered lists

== Easily done

----
[options="incremental"]               
1. bulleted lists
2. ordered lists
----

== [large-black-slide]#Special Slides#

== [black-slide]#You can pick from one of several built in themes#

== [typewriter-slide]#We'll probably come up with some more.#

== You can add images

image::images/sample1.jpg[width="600px"]

== [image-slide hidden]#This won't show up#

image::images/sample1.jpg[The caption!]

[big black]#Make full screen images if you want... to#

== And that's it!

[options="incremental"]
    Oh wait, not quite!

== There are a few more features

* Notations in code blocks.
* Screwing around with font size and color.
* Definition lists. Literal blocks. Quote blocks. Etc.
* Oh yeah - and press "h" to see the help and built-in commands to
  navigate the slide deck

== [notransition]#This slide has no#

[big black]#Transitions!#

== [notransition]#This slide has no#

[big red]#Transitions!#

== How about diagrams in slides?

Just learn graphviz so text like

.....................................................................
["graphviz"]
---------------------------------------------------------------------
digraph proxy {
  client -> proxy [ label = " request " ];
  proxy -> client [ label = " response " ];
  host -> proxy [ label = " response " ];
  proxy -> host [ label = " request " ]; 
} 
---------------------------------------------------------------------
.....................................................................

<<<

Ends up like

["graphviz"]
---------------------------------------------------------------------
digraph proxy {
  client -> proxy [ label = " request " ];
  proxy -> client [ label = " response " ];
  host -> proxy [ label = " response " ];
  proxy -> host [ label = " request " ]; 
} 
---------------------------------------------------------------------

== Keep Pulling

New features constantly landing!

== More Documentation

Coming soon...


         

           
