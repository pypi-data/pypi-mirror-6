#!/usr/bin/env python
import os
import sys
import shutil
import stat
from subprocess import call
from os.path import join as pj

def download(url, target):
    import urllib
    urlp = urllib.urlopen(url)
    with open(target, 'w') as localfile:
        localfile.write(urlp.read())
    urlp.close()

def mkdir(dirname):
    print
    print '*** mkdir  ', dirname
    os.mkdir(dirname)

class VirtualEnv(object):

    def __init__(self, venv_dir):
        self.bin_dir = pj(venv_dir, 'bin')

    def call_bin(self, script_name, args):
        call([pj(self.bin_dir, script_name)] + list(args))

    def pip(self, *args):
        self.call_bin('pip', list(args))

    def python(self, *args):
        self.call_bin('python', args)

    def python_oneliner(self, snippet):
        self.python('-c', snippet)

def main(args):

    if '--dev' in args:
        use_devel_version = True
        args.remove('--dev')
    else:
        use_devel_version = False

    if len(args) != 2:
        print 'Usage:'
        print
        print 'bootstrape [--dev] <APE_ROOT_DIR>'
        print
        print 'Creates an ape-root at APE_ROOT_DIR for your product lines.'
        print 'The given directory must not exist already.'
        print
        print 'If --dev is given, this installs the latest master from git.'
        print 'Otherwise, the latest stable version of ape is used from PYPI.'

        sys.exit(1)

    ape_root_dir = os.path.abspath(args[1])

    if os.path.exists(ape_root_dir):
        print 'ape root dir already exists: ', ape_root_dir
        print 'aborted'
        sys.exit(1)

    if not os.path.isdir(os.path.dirname(ape_root_dir)):
        print 'parent directory not found: ', os.path.dirname(ape_root_dir)
        print 'aborted'
        sys.exit(1)

    mkdir(ape_root_dir)
    _ape_dir = pj(ape_root_dir, '_ape')
    mkdir(_ape_dir)

    venv_dir = pj(_ape_dir, 'venv')
    print '*** creating virtualenv ', venv_dir
    print
    try:
        call(['virtualenv', venv_dir, '--no-site-packages'])
    except OSError:
        print 'You probably dont have virtualenv installed: sudo apt-get install python-virtualenv'

    venv = VirtualEnv(venv_dir)
    print

    if use_devel_version:
        print '*** installing ape into virtualenv (latest git master)'
        venv.pip('install', '-e', 'git+https://github.com/henzk/ape.git#egg=ape')
    else:
        print '*** installing ape into virtualenv (latest from PYPI)'
        venv.pip('install', 'ape')
    print

    print 
    print '*** creating _ape/activape and aperun scripts'
    #get the activape_template from inside the ape package installed in venv
    activape_dst = pj(_ape_dir, 'activape')
    venv.python_oneliner(
        'import os, shutil, pkg_resources;'
        'shutil.copyfile(os.path.abspath('
        'pkg_resources.resource_filename('
        '"ape", "resources/activape_template"'
        ')), "%s")'
         % activape_dst
    )

    aperun_dst = pj(_ape_dir, 'aperun')
    venv.python_oneliner(
        'import os, shutil, pkg_resources;'
        'shutil.copyfile(os.path.abspath('
        'pkg_resources.resource_filename('
        '"ape", "resources/aperun_template"'
        ')), "%s")'
         % aperun_dst
    )

    st = os.stat(aperun_dst)
    os.chmod(aperun_dst, st.st_mode | stat.S_IEXEC)

    if not os.path.isfile(activape_dst):
        print '!!Error creating activape script!!'
        print 'aborted'
        sys.exit(1)

    if not os.path.isfile(aperun_dst):
        print '!!Error creating aperun script!!'
        print 'aborted'
        sys.exit(1)

    print
    print '*** ape container mode setup complete'

if __name__ == '__main__':
    main(sys.argv)
