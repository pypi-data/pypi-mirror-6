.TH ANSIBLE.POSTGRESQL_USER 3 "2014-01-08" "1.4.4" "ANSIBLE MODULES"
.\" generated from library/database/postgresql_user
.SH NAME
postgresql_user \- Adds or removes a users (roles) from a PostgreSQL database.
.\" ------ DESCRIPTION
.SH DESCRIPTION
.PP
Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables. 
.PP
The fundamental function of the module is to create, or delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users. 
.PP
A user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not. 
.\" ------ OPTIONS
.\"
.\"
.SH OPTIONS
   
.IP db
name of database where permissions will be granted   
.IP encrypted
denotes if the password is already encrypted. boolean.(Added in Ansible version 1.4.)
   
.IP expires
sets the user's password expiration.(Added in Ansible version 1.4.)
   
.IP fail_on_user
if \fCyes\fR, fail when user can't be removed. Otherwise just log and continue
.IR Choices :
yes,no. (default: yes)   
.IP login_host
Host running PostgreSQL. (default: localhost)   
.IP login_password
Password used to authenticate with PostgreSQL   
.IP login_user
User (role) used to authenticate with PostgreSQL (default: postgres)   
.IP name
name of the user (role) to add or remove(required)   
.IP password
set the user's password, before 1.4 this was required.   
.IP priv
PostgreSQL privileges string in the format: \fCtable:priv1,priv2\fR   
.IP role_attr_flags
PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER
.IR Choices :
[NO]SUPERUSER,[NO]CREATEROLE,[NO]CREATEUSER,[NO]CREATEDB,[NO]INHERIT,[NO]LOGIN,[NO]REPLICATION.   
.IP state
The user (role) state
.IR Choices :
present,absent. (default: present).\"
.\"
.\" ------ NOTES
.SH NOTES
.PP
The default authentication assumes that you are either logging in as or sudo'ing to the postgres account on the host. 
.PP
This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host. For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module. 
.PP
If you specify PUBLIC as the user, then the privilege changes will apply to all users. You may not specify password or role_attr_flags when the PUBLIC user is specified. 
.\"
.\"
.\" ------ EXAMPLES
.\" ------ PLAINEXAMPLES
.SH EXAMPLES
.nf
# Create django user and grant access to database and products table
- postgresql_user: db=acme name=django password=ceec4eif7ya priv=CONNECT/products:ALL

# Create rails user, grant privilege to create other databases and demote rails from super user status
- postgresql_user: name=rails password=secret role_attr_flags=CREATEDB,NOSUPERUSER

# Remove test user privileges from acme
- postgresql_user: db=acme name=test priv=ALL/products:ALL state=absent fail_on_user=no

# Remove test user from test database and the cluster
- postgresql_user: db=test name=test priv=ALL state=absent

# Example privileges string format
INSERT,UPDATE/table:SELECT/anothertable:ALL

# Remove an existing user's password
- postgresql_user: db=test user=test password=NULL

.fi

.\" ------- AUTHOR
.SH AUTHOR
Lorin Hochstein
.SH SEE ALSO
.IR ansible (1),
.I http://ansible.github.com/modules.html#postgresql-user