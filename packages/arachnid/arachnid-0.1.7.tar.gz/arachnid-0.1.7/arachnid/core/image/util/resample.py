# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _resample
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types



cvar = _resample.cvar
pi = cvar.pi
twopi = cvar.twopi

def resample_fft_center(*args):
  """
    This SWIG wrapper function resample an image from
    	the Fourier Transform.
    	
    	Assumes the Fourier transform is shifted to the center
    	using fftshift.

    	:Parameters:

    	img : array
    		  Input 2D complex array
    	out : array
    		  Resampled output 2D complex array
    	
    """
  return _resample.resample_fft_center(*args)

def downsample(*args):
  """
    This SWIG wrapper function downsamples an image
    	
    	Adopted from SPARX

    	:Parameters:

    	img : array
    		  Input 2D array
    	out : array
    		  Downsampled output 2D array
    	kernel : array
    		 	 Filter kernel
    	
    """
  return _resample.downsample(*args)

def sinc_blackman_kernel(*args):
  """
    This SWIG wrapper function creates a 2D kernel for filtering an image
    	
    	Adopted from SPARX

    	:Parameters:

    	kernel : array
    		 	 Filter kernel
    	m : int
    		Kernel size
    	freq : float
    		   Frequency response
    	
    """
  return _resample.sinc_blackman_kernel(*args)

