.TH "polysh" "1" "0.4" "Guillaume Chazarain" "Remote shells"
.SH "NAME"
polysh \- Group Shell
.SH "SYNOPSIS"
\fBpolysh\fR [OPTIONS]... HOSTS...
.SH "DESCRIPTION"
\fIpolysh\fR spawns many remote shells at once and allows to manage them in a single interface.
.SH "PROMPTS"
The \fIpolysh\fR prompt shows either 'ready (X)> ' or 'waiting (X/Y)> '. The 'ready' prompt means that all enabled remote shells are ready to receive commands and there are X such remote shells. Failing that, the 'waiting' prompt is shown, meaning that X remote shells are not yet ready to receive commands. Either way, all the readline editing features like navigation in the history, searching in the history, and completion are available.

Commands prefixed by an exclamation mark are executed locally.

Signals like Ctrl\-C and Ctrl\-Z sent to \fIpolysh\fR are forwarded to the remote shells.
.SH "COMPLETION"
The \fIpolysh\fR prompt supports completion by pressing the Tab key. Completion results are taken from the command line history, paths from the local filesystem and commands from the user $PATH.
.SH "HOST NAMES EXPANSION"
Host names with numbers can be generated by polysh using the <START\-END> syntax. The generated numbers will be zero padded according to the number of zeroes in the START and END numbers.
.SH "OPTIONS"
.TP
\fB\-\-version\fR
Show program's version number and exit.
.TP
\fB\-h, \-\-help\fR
Show the help message and exit.
.TP
\fB\-\-hosts\-file=FILE\fR
Read hostnames from given file, one per line. Hostnames are given on the command line, but they can also be read from files. The format is one hostname per line, '#' comments and blank lines are skipped.
.TP
\fB\-\-command=CMD\fR
Command to execute on the remote shells. This starts \fIpolysh\fR in non\-interactive mode. It will start the remote shells, send the command, print the output and exit when the command is completed on all remote shells. This is the same as piping a command on the standard input. Exit codes from the remote shells will be aggregated (taking the max) to form \fIpolysh\fR's exit code.
.TP
\fB\-\-ssh=SSH\fR
Ssh command to use [exec ssh -oLogLevel=Quiet -t %(host)s exec bash --noprofile]. By default, \fIpolysh\fR spawns lightweight remote shells using the ssh command, but another shell command can be specified here. For example, with \-\-ssh='usleep $((RANDOM*50)); exec ssh' a delay will be introduced to avoid all hosts accessing a NFS server at the same time. If the hostname should not be added at the end of the command, the macro %(host)s can be inserted where the hostname should be placed. Also, make sure the command you use launchs a pty, this may need the \-t option for ssh.
.TP
\fB\-\-user=USER\fR
Remote user to log in as. When specified, \fIpolysh\fR will ssh to USER@HOST instead of simply HOST.
.TP
\fB\-\-no\-color\fR
Disable colored hostnames [enabled]. When specified, \fIpolysh\fR will not use tty colors for the hostname prefix.
.TP
\fB\-\-password\-file=FILE\fR
read a password from the specified file. - is the tty. This can be used when public key authentication is not available, either write the password in a file, or set FILE to - so that \fIpolysh\fR will prompt for a password.
.TP
\fB\-\-log\-file=LOG_FILE\fR
File to log each machine conversation [none]. If specified, \fIpolysh\fR will log all executed commands and their output in the file. The logging destination can be dynamically changed with the :set_log control command.
.TP
\fB\-\-abort\-errors\fR
Abort if some shell fails to initialize [ignore]. By default, \fIpolysh\fR just logs an error when it cannot succesfully open a remote shell. With this option, it exits with a failure.
.TP
\fB\-\-debug\fR
Print debugging information. Use this option to see exactly what is transferred between \fIpolysh\fR and the remote shells. This option can be dynamically toggled using the set_debug command in the control shell.
.SH "CONTROL COMMANDS"
Control commands are special purpose commands prefixed by a colon and directed at \fIpolysh\fR itself instead of the remote shells. These commands are:
\" BEGIN AUTO-GENERATED CONTROL COMMANDS DOCUMENTATION
.TP
\fB:add NAMES...\fR
Add one or many remote shells.
.TP
\fB:chdir LOCAL_PATH\fR
Change the current directory of \fIpolysh\fR (not the remote shells).
.TP
\fB:disable [SHELLS...]\fR
Disable sending commands to remote shells. If the command would have no effect, it changes all other shells to the inverse enable value. That is, if you disable only already disabled shells, it will first enable all other shells. The special characters * ? and [] work as expected.
.TP
\fB:enable [SHELLS...]\fR
Enable sending commands to remote shells. If the command would have no effect, it changes all other shells to the inverse enable value. That is, if you enable only already enabled shells, it will first disable all other shells. The special characters * ? and [] work as expected.
.TP
\fB:export_vars\fR
Export some environment variables on enabled remote shells. POLYSH_NR_SHELLS is the total number of enabled shells. POLYSH_RANK uniquely identifies each shell with a number between 0 and POLYSH_NR_SHELLS - 1. POLYSH_NAME is the hostname as specified on the command line and POLYSH_DISPLAY_NAME the hostname as displayed by :list (most of the time the same as POLYSH_NAME).
.TP
\fB:help [COMMAND]\fR
List control commands or show their documentations.
.TP
\fB:hide_password\fR
Do not echo the next typed line. This is useful when entering password. If debugging or logging is enabled, it will be disabled to avoid displaying a password. Therefore, you will have to reenable logging or debugging afterwards if need be.
.TP
\fB:list [SHELLS...]\fR
List remote shells and their states. The output consists of: <hostname> <enabled?> <state>: <last printed line>. The special characters * ? and [] work as expected.
.TP
\fB:purge [SHELLS...]\fR
Delete disabled remote shells. This helps to have a shorter list. The special characters * ? and [] work as expected.
.TP
\fB:quit\fR
Quit \fIpolysh\fR.
.TP
\fB:reconnect [SHELLS...]\fR
Try to reconnect to disconnected remote shells. The special characters * ? and [] work as expected.
.TP
\fB:rename [NEW_NAME]\fR
Rename all enabled remote shells with the argument. The argument will be shell expanded on the remote processes. With no argument, the original hostname will be restored as the displayed name.
.TP
\fB:replicate SHELL:REMOTE_PATH\fR
Copy a path from one remote shell to all others
.TP
\fB:reset_prompt [SHELLS...]\fR
Change the prompt to be recognized by \fIpolysh\fR. The special characters * ? and [] work as expected.
.TP
\fB:send_ctrl LETTER [SHELLS...]\fR
Send a control character to remote shells. The first argument is the control character to send like c, d or z. Note that these three control characters can be sent simply by typing them into \fIpolysh\fR. The remaining optional arguments are the destination shells. The special characters * ? and [] work as expected.
.TP
\fB:set_debug y|n [SHELLS...]\fR
Enable or disable debugging output for remote shells. The first argument is 'y' to enable the debugging output, 'n' to disable it. The remaining optional arguments are the selected shells. The special characters * ? and [] work as expected.
.TP
\fB:set_log [LOCAL_PATH]\fR
Duplicate every console I/O into the given local file. If LOCAL_PATH is not given, restore the default behaviour of not logging.
.TP
\fB:show_read_buffer [SHELLS...]\fR
Print the data read by remote shells. The special characters * ? and [] work as expected.
.TP
\fB:upload LOCAL_PATH\fR
Upload the specified local path to enabled remote shells.
\" END AUTO-GENERATED CONTROL COMMANDS DOCUMENTATION
.SH "AUTHOR"
Guillaume Chazarain <guichaz@gmail.com>
.br
See http://guichaz.free.fr/polysh
