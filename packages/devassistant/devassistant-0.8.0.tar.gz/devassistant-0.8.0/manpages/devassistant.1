.\" Copyright Petr Hracek, 2013
.\"
.\" This page is distributed under GPL.
.\"
.TH DA 1 2013-03-12 "" "Linux User's Manual"
.SH NAME
devassistant \- setup development environment and create basic projects in various
languages
Please note that \fBda\fP binary is the recommended way of running DevAssistant
(even though it works completely same).

.SH SYNOPSIS
\fBdevassistant [--debug] [ ASSISTANT_TYPE ] [ OPTIONS ] [[ SUBASSISTANT ] [OPTIONS] ...]
\fBdevassistant [--debug] [ ACTION ] [ OPTIONS ]

.SH DESCRIPTION
\fBdevassistant\fP is the main binary of DevAssistant. It is responsible for
dispatching commandline calls to assistants or actions. It accepts an optional
\fB--debug\fP flag, which makes DevAssistant log lots of debugging information,
including all called CLI commands and their output.

.SH DESCRIPTION - ASSISTANT_TYPE
DevAssistant can help you with various tasks during development. The tasks
are carried out by so called "assistants" - there are three types of assistants:

\fBcrt\fP - create new projects, install dependencies and setup environment
.br
\fBmod\fP - modify previously created projects (e.g. import them to Eclipse)
.br
\fBprep\fP - prepare development environment for an upstream project or for
a custom development task

Each assistant type can have many associated assistants (e.g. python, ruby)
and each assistant can have many associated subassistants (e.g. django, flask).
You can display these (and also other options) by running e.g.
\fBdevassistant crt -h\fP and \fBdevassistant crt python -h\fP. Once you select
the desired assistant (and its subassistants), just run it, e.g.
\fBdevassistant crt python django -n newproject\fP.

The list of assistants and their functionality may vary depending on type
of your installation - just run help to see currently available assistants.

.SH DESCRIPTION - ACTION
DevAssistant is designed to also provide custom functionality through so-called
actions. Currently, these contain:

\fBhelp\fP - display verbose help.
.br
\fBversion\fP - display devassistant version.

Again, to show options, just use \fB-h\fP with the action, e.g.
\fBdevassistant version -h\fP.

.SH COMMON OPTIONS
There are some commonly used options shared among many assistants. Their usual
meaning is explained below:
.TP
.B \-h --help
print help for selected assistant.
.TP
.B \-n --name
name of the project (relative or absolute path).
.TP
.B \-e --eclipse
import project into
.I eclipse 
environment. Uses ~/workspace workspace by default, can be overriden by
specifying another path.
.TP
.B \-g --github <username>
create a GitHub repo and push the initial sources there. Uses current system
username as GH username, unless specified otherwise.The GitHub projectname is
taken from \fBname\fP parameter.
.TP
.B \-b --build
generate a SPEC file, SRPM and mock-build RPM.
.TP
.B \-v --vim
install vim settings specific for this language (backs up your original vim settings)
.TP

.SH "SEE ALSO"
.BR da (1)
.BR da-gui (1)
