Metadata-Version: 1.1
Name: puppetboard
Version: 0.0.3
Summary: Web frontend for PuppetDB
Home-page: https://github.com/nedap/puppetboard
Author: Daniele Sluijters
Author-email: daniele.sluijters+pypi@gmail.com
License: Apache License
Version 2.0, January 2004
http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and
distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright
owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities
that control, are controlled by, or are under common control with that entity.
For the purposes of this definition, "control" means (i) the power, direct or
indirect, to cause the direction or management of such entity, whether by
contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising
permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including
but not limited to software source code, documentation source, and configuration
files.

"Object" form shall mean any form resulting from mechanical transformation or
translation of a Source form, including but not limited to compiled object code,
generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made
available under the License, as indicated by a copyright notice that is included
in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that
is based on (or derived from) the Work and for which the editorial revisions,
annotations, elaborations, or other modifications represent, as a whole, an
original work of authorship. For the purposes of this License, Derivative Works
shall not include works that remain separable from, or merely link (or bind by
name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version
of the Work and any modifications or additions to that Work or Derivative Works
thereof, that is intentionally submitted to Licensor for inclusion in the Work
by the copyright owner or by an individual or Legal Entity authorized to submit
on behalf of the copyright owner. For the purposes of this definition,
"submitted" means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems, and
issue tracking systems that are managed by, or on behalf of, the Licensor for
the purpose of discussing and improving the Work, but excluding communication
that is conspicuously marked or otherwise designated in writing by the copyright
owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf
of whom a Contribution has been received by Licensor and subsequently
incorporated within the Work.

2. Grant of Copyright License.

Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the Work and such
Derivative Works in Source or Object form.

3. Grant of Patent License.

Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable (except as stated in this section) patent license to make, have
made, use, offer to sell, sell, import, and otherwise transfer the Work, where
such license applies only to those patent claims licensable by such Contributor
that are necessarily infringed by their Contribution(s) alone or by combination
of their Contribution(s) with the Work to which such Contribution(s) was
submitted. If You institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work or a
Contribution incorporated within the Work constitutes direct or contributory
patent infringement, then any patent licenses granted to You under this License
for that Work shall terminate as of the date such litigation is filed.

4. Redistribution.

You may reproduce and distribute copies of the Work or Derivative Works thereof
in any medium, with or without modifications, and in Source or Object form,
provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of
this License; and
You must cause any modified files to carry prominent notices stating that You
changed the files; and
You must retain, in the Source form of any Derivative Works that You distribute,
all copyright, patent, trademark, and attribution notices from the Source form
of the Work, excluding those notices that do not pertain to any part of the
Derivative Works; and
If the Work includes a "NOTICE" text file as part of its distribution, then any
Derivative Works that You distribute must include a readable copy of the
attribution notices contained within such NOTICE file, excluding those notices
that do not pertain to any part of the Derivative Works, in at least one of the
following places: within a NOTICE text file distributed as part of the
Derivative Works; within the Source form or documentation, if provided along
with the Derivative Works; or, within a display generated by the Derivative
Works, if and wherever such third-party notices normally appear. The contents of
the NOTICE file are for informational purposes only and do not modify the
License. You may add Your own attribution notices within Derivative Works that
You distribute, alongside or as an addendum to the NOTICE text from the Work,
provided that such additional attribution notices cannot be construed as
modifying the License.
You may add Your own copyright statement to Your modifications and may provide
additional or different license terms and conditions for use, reproduction, or
distribution of Your modifications, or for any such Derivative Works as a whole,
provided Your use, reproduction, and distribution of the Work otherwise complies
with the conditions stated in this License.

5. Submission of Contributions.

Unless You explicitly state otherwise, any Contribution intentionally submitted
for inclusion in the Work by You to the Licensor shall be under the terms and
conditions of this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify the terms of
any separate license agreement you may have executed with Licensor regarding
such Contributions.

6. Trademarks.

This License does not grant permission to use the trade names, trademarks,
service marks, or product names of the Licensor, except as required for
reasonable and customary use in describing the origin of the Work and
reproducing the content of the NOTICE file.

7. Disclaimer of Warranty.

Unless required by applicable law or agreed to in writing, Licensor provides the
Work (and each Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are
solely responsible for determining the appropriateness of using or
redistributing the Work and assume any risks associated with Your exercise of
permissions under this License.

8. Limitation of Liability.

In no event and under no legal theory, whether in tort (including negligence),
contract, or otherwise, unless required by applicable law (such as deliberate
and grossly negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special, incidental,
or consequential damages of any character arising as a result of this License or
out of the use or inability to use the Work (including but not limited to
damages for loss of goodwill, work stoppage, computer failure or malfunction, or
any and all other commercial damages or losses), even if such Contributor has
been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability.

While redistributing the Work or Derivative Works thereof, You may choose to
offer, and charge a fee for, acceptance of support, warranty, indemnity, or
other liability obligations and/or rights consistent with this License. However,
in accepting such obligations, You may act only on Your own behalf and on Your
sole responsibility, not on behalf of any other Contributor, and only if You
agree to indemnify, defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason of your
accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work

To apply the Apache License to your work, attach the following boilerplate
notice, with the fields enclosed by brackets "[]" replaced with your own
identifying information. (Don't include the brackets!) The text should be
enclosed in the appropriate comment syntax for the file format. We also
recommend that a file or class name and description of purpose be included on
the same "printed page" as the copyright notice for easier identification within
third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Description: ###########
        Puppetboard
        ###########
        
        Puppetboard is a web interface to `PuppetDB`_ aiming to replace the reporting
        functionality of `Puppet Dashboard`_.
        
        Puppetboard relies on the `pypuppetdb`_ library to fetch data from PuppetDB
        and is built with the help of the `Flask`_ microframework.
        
        .. _pypuppetdb: https://pypi.python.org/pypi/pypuppetdb
        .. _PuppetDB: http://docs.puppetlabs.com/puppetdb/latest/index.html
        .. _Puppet Dashboard: http://docs.puppetlabs.com/dashboard/
        .. _Flask: http://flask.pocoo.org
        
        Because this project is powered by Flask we are restricted to:
            * Python 2.6
            * Python 2.7
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/overview.png
           :alt: View of a node
           :width: 1024
           :height: 700
           :align: center
        
        .. contents::
        
        Word of caution
        ===============
        
        Puppetboard is very, very young but it works fairly well.
        
        That being said a lot of the code is very exeprimental, just trying
        to figure out what works and what not, what we need to do different
        and what features we need on the PuppetDB side of things.
        
        As such you should be at least comfortable handling a few errors
        this might throw at you.
        
        Installation
        ============
        
        Puppetboard is now packaged and available on PyPi.
        
        Production
        ----------
        
        To install it simply issue the following command:
        
        .. code-block:: bash
        
           $ pip install puppetboard
        
        This will install Puppetboard and take care of the dependencies. If you
        do this Puppetboard will be installed in the so called site-packages or
        dist-packages of your Python distribution.
        
        The complete path on Debian systems would be:
        ``/usr/local/lib/python2.X/lib/dist-packages/puppetboard``.
        
        You will need this path in order to configure your HTTPD and WSGI-capable
        application server.
        
        Development
        -----------
        
        If you wish to hack on Puppetboard you should fork/clone the Github repository
        and then install the requirements through:
        
        .. code-block:: bash
        
           $ pip install -r requirements.txt
        
        You're advised to do this inside a virtualenv specifically created to work on
        Puppetboard as to not pollute your global Python installation.
        
        Configuration
        =============
        The following instructions will help you configure Puppetboard and your HTTPD.
        
        Settings
        --------
        Puppetboard will look for a file pointed at by the ``PUPPETBOARD_SETTINGS``
        environment variable. The file has to be identical to ``default_settings.py``
        but should only override the settings you need changed.
        
        You can grab a copy of ``default_settings.py`` from the path where pip
        installed Puppetboard to or by looking in the source checkout.
        
        If you run PuppetDB and Puppetboard on the same machine the default settings
        provided will be enough to get you started and you won't need a custom
        settings file.
        
        Assuming your webserver and PuppetDB machine are not identical you will at
        least have to change the following settings:
        
        * ``PUPPETDB_HOST``
        * ``PUPPETDB_PORT``
        
        By default PuppetDB requires SSL to be used when a non-local client wants to
        connect. Therefor you'll also have to supply the following settings:
        
        * ``PUPPETDB_KEY = /path/to/private/keyfile.pem``
        * ``PUPPETDB_CERT = /path/to/public/keyfile.crt``
        
        For information about how to generate the correct keys please refer to the
        `pypuppetdb documentation`_.
        
        Other settings that might be interesting:
        
        * ``PUPPETDB_TIMEOUT``: Defaults to 20 seconds but you might need to increase
          this value. It depends on how big the results are when querying PuppetDB.
          This behaviour will change in a future release when pagination will be
          introduced.
        * ``UNRESPONSIVE_HOURS``: The amount of hours since the last check-in after
          which a node is considered unresponsive.
        * ``LOGLEVEL``: A string representing the loglevel. It defaults to ``'info'``
          but can be changed to ``'warning'`` or ``'critical'`` for less verbose
          logging or ``'debug'`` for more information.
        * ``ENABLE_QUERY``: Defaults to ``True`` causing a Query tab to show up in the
          web interface allowing users to write and execute arbitrary queries against
          a set of endpoints in PuppetDB. Change this to ``False`` to disable this.
        
        .. _pypuppetdb documentation: http://pypuppetdb.readthedocs.org/en/v0.1.0/quickstart.html#ssl
        
        Development
        -----------
        
        You can run it in development mode by simply executing:
        
        .. code-block:: bash
        
           $ python dev.py
        
        Use ``PUPPETBOARD_SETTINGS`` to change the different settings or patch
        ``default_settings.py`` directly. Take care not to include your local
        changes on that file when submitting patches for Puppetboard.
        
        Production
        ----------
        To run Puppetboard in production we provide instructions for the following
        scenarios:
        
        * Apache + mod_wsgi
        * Apache + mod_passenger
        * uwsgi + nginx
        
        If you deploy Puppetboard through a different setup we'd welcome a pull
        request that adds the instructions to this section.
        
        Apache + mod_wsgi
        ^^^^^^^^^^^^^^^^^
        
        First we need to create the necessary directories:
        
        .. code-block:: bash
        
           $ mkdir -p /var/www/puppetboard
           $ chown www-data:www-data /var/www/puppetboard
        
        Copy Puppetboard's ``default_settings.py`` to the newly created puppetboard
        directory and name the file ``settings.py``. This file will be available
        at the path Puppetboard was installed, for example:
        ``/usr/local/lib/python2.X/lib/dist-packages/puppetboard/default_settings.py``.
        
        Change the settings that need changing to match your environment and delete
        or comment with a ``#`` the rest of the entries.
        
        If you don't need to change any settings you can skip the creation of the
        ``settings.py`` file entirely.
        
        Now create a ``wsgi.py`` with the following content in the newly created
        puppetboard directory:
        
        .. code-block::
        
            from __future__ import absolute_import
            import os
        
            # Needed if a settings.py file exists
            os.environ['PUPPETBOARD_SETTINGS'] = '/var/www/puppetboard/settings.py'
            from puppetboard.app import app as application
        
        Make sure this file is owned by the user and group the webserver runs as.
        
        The last thing we need to do is configure Apache:
        
        .. code-block::
        
            <VirtualHost *:80>
                ServerName puppetboard.example.tld
                WSGIDaemonProcess puppetboard user=www-data group=www-data threads=5
                WSGIScriptAlias / /var/www/puppetboard/wsgi.py
                ErrorLog /var/log/apache2/puppetboard.error.log
                CustomLog /var/log/apache2/puppetboard.access.log combined
        
                Alias /static /usr/local/lib/python2.X/dist-packages/puppetboard/static
        
                <Directory /usr/local/lib/python2.X/dist-packages/puppetboard>
                    WSGIProcessGroup puppetboard
                    WSGIApplicationGroup %{GLOBAL}
                    Order deny,allow
                    Allow from all
                </Directory>
            </VirtualHost>
        
        Note the directory path, it's the path to where pip installed Puppetboard. We
        also alias the ``/static`` path so that Apache will serve the static files
        like the included CSS and Javascript.
        
        Apache + mod_passenger
        ^^^^^^^^^^^^^^^^^^^^^^
        
        It is possible to run Python applications through Passenger. Passenger has
        supported this since version 3 but it's considered experimental. Since the
        release of Passenger 4 it's a 'core' feature of the product.
        
        Performance wise it also leaves something to be desired compared to the
        mod_wsgi powered solution. Application start up is noticeably slower and
        loading pages takes a fraction longer.
        
        First we need to create the necessary directories:
        
        .. code-block:: bash
        
           $ mkdir -p /var/www/puppetboard/{tmp,public}
           $ chown -R www-data:www-data /var/www/puppetboard
        
        Copy Puppetboard's ``default_settings.py`` to the newly created puppetboard
        directory and name the file ``settings.py``. This file will be available
        at the path Puppetboard was installed, for example:
        ``/usr/local/lib/python2.X/lib/dist-packages/puppetboard/default_settings.py``.
        
        Change the settings that need changing to match your environment and delete
        or comment with a ``#`` the rest of the entries.
        
        If you don't need to change any settings you can skip the creation of the
        ``settings.py`` file entirely.
        
        Now create a ``passenger_wsgi.py`` with the following content in the newly
        created puppetboard directory:
        
        .. code-block::
        
            from __future__ import absolute_import
            import os
            import logging
        
            logging.basicConfig(filename=/path/to/file/for/logging, level=logging.INFO)
        
            # Needed if a settings.py file exists
            os.environ['PUPPETBOARD_SETTINGS'] = '/var/www/puppetboard/settings.py'
        
            try:
                from puppetboard.app import app as application
            except Exception, inst:
                logging.exception("Error: %s", str(type(inst)))
        
        Unfortunately due to the way Passenger works we also need to configure logging
        inside ``passenger_wsgi.py`` else application start up issues won't be logged.
        
        This means that even though ``LOGLEVEL`` might be set in your ``settings.py``
        this setting will take precedence over it.
        
        Now the only thing left to do is configure Apache:
        
        .. code-block::
        
           <VirtualHost *:80>
               ServerName puppetboard.example.tld
               DocumentRoot /var/www/puppetboard/public
               ErrorLog /var/log/apache2/puppetboard.error.log
               CustomLog /var/log/apache2/puppetboard.access.log combined
        
               RackAutoDetect On
               Alias /static /usr/local/lib/python2.X/dist-packages/puppetboard/static
           </VirtualHost>
        
        Note the ``/static`` alias path, it's the path to where pip installed
        Puppetboard. This is needed so that Apache will serve the static files like
        the included CSS and Javascript.
        
        nginx + uwsgi
        ^^^^^^^^^^^^^
        A common Python deployment scenario is to use the uwsgi application server
        (which can also serve rails/rack, PHP, Perl and other applications) and proxy
        to it through something like nginx or perhaps even HAProxy.
        
        uwsgi has a feature that every instance can run as its own user. In this
        example we'll use the ``www-data`` user but you can create a separate user
        solely for running Puppetboard and use that instead.
        
        First we need to create the necessary directories:
        
        .. code-block:: bash
        
           $ mkdir -p /var/www/puppetboard
           $ chown www-data:www-data /var/www/puppetboard
        
        Copy Puppetboard's ``default_settings.py`` to the newly created puppetboard
        directory and name the file ``settings.py``. This file will be available
        at the path Puppetboard was installed, for example:
        ``/usr/local/lib/python2.X/lib/dist-packages/puppetboard/default_settings.py``.
        
        Change the settings that need changing to match your environment and delete
        or comment with a ``#`` the rest of the entries.
        
        If you don't need to change any settings you can skip the creation of the
        ``settings.py`` file entirely.
        
        Now create a ``wsgi.py`` with the following content in the newly created
        puppetboard directory:
        
        .. code-block::
        
            from __future__ import absolute_import
            import os
        
            # Needed if a settings.py file exists
            os.environ['PUPPETBOARD_SETTINGS'] = '/var/www/puppetboard/settings.py'
            from puppetboard.app import app as application
        
        Make sure this file is owned by the user and group the uwsgi instance will run
        as.
        
        Now we need to start uwsgi:
        
        .. code-block:: bash
        
           $ uwsgi --http :9090 --wsgi-file /var/www/puppetboard/wsgi.py
        
        Feel free to change the port to something other than ``9090``.
        
        The last thing we need to do is configure nginx to proxy the requests:
        
        .. code-block::
        
           upstream puppetboard {
               server 127.0.0.1:9090;
           }
        
           server {
               listen      80;
               server_name puppetboard.example.tld;
               charset     utf-8;
        
               location /static {
                   alias /usr/local/lib/python2.X/dist-packages/puppetboard/static;
               }
        
               location / {
                   uwsgi_pass puppetboard;
                   include    /path/to/uwsgi_params/probably/etc/nginx/uwsgi_params;
               }
           }
        
        If all went well you should now be able to access to Puppetboard. Note the
        ``/static`` location block to make nginx serve static files like the included
        CSS and Javascript.
        
        Because nginx natively supports the uwsgi protocol we use ``uwsgi_pass``
        instead of the traditional ``proxy_pass``.
        
        Security
        --------
        
        If you wish to make users authenticate before getting access to Puppetboard
        you can use one of the following configuration snippets.
        
        Apache
        ^^^^^^
        
        Inside the ``VirtualHost``:
        
        .. code-block::
        
            <Location "/">
                AuthType Basic
                AuthName "Puppetboard"
                Require valid-user
                AuthBasicProvider file
                AuthUserFile /path/to/a/file.htpasswd
            </Location>
        
        nginx
        ^^^^^
        
        Inside the ``location / {}`` block that has the ``uwsgi_pass`` directive:
        
        .. code-block::
        
            auth_basic "Puppetboard";
            auth_basic_user_file /path/to/a/file.htpasswd;
        
        Getting Help
        ============
        This project is still very new so it's not inconceivable you'll run into
        issues.
        
        For bug reports you can file an `issue`_. If you need help with something
        feel free to hit up `@daenney`_ by e-mail or find him on IRC. He can usually
        be found on `IRCnet`_ and `Freenode`_ and idles in #puppet.
        
        There's now also the #puppetboard channel on `Freenode`_ where we hang out
        and answer questions related to pypuppetdb and Puppetboard.
        
        .. _issue: https://github.com/nedap/puppetboard/issues
        .. _@daenney: https://github.com/daenney
        .. _IRCnet: http://www.ircnet.org
        .. _Freenode: http://freenode.net
        
        Third party
        ===========
        Some people have already started building things with and around Puppetboard.
        
        `Hunter Haugen`_ has provided a Vagrant setup:
        
        * https://github.com/hunner/puppetboard-vagrant
        
        `Spencer Krum`_ created a Puppet module to install Puppetboard with:
        
        * https://github.com/nibalizer/puppet-module-puppetboard
        
        You can install it with:
        
            puppet module install nibalizer-puppetboard
        
        .. _Hunter Haugen: https://github.com/hunner
        .. _Spencer Krum: https://github.com/nibalizer
        
        Contributing
        ============
        We welcome contributions to this project. However, there are a few ground
        rules contributors should be aware of.
        
        License
        -------
        This project is licensed under the Apache v2.0 License. As such, your
        contributions, once accepted, are automatically covered by this license.
        
        Commit messages
        ---------------
        Write decent commit messages. Don't use swear words and refrain from
        uninformative commit messages as 'fixed typo'.
        
        The preferred format of a commit message:
        
        ::
        
            docs/quickstart: Fixed a typo in the Nodes section.
        
            If needed, elaborate further on this commit. Feel free to write a
            complete blog post here if that helps us understand what this is
            all about.
        
            Fixes #4 and resolves #2.
        
        If you'd like a more elaborate guide on how to write and format your commit
        messages have a look at this post by `Tim Pope`_.
        
        .. _Tim Pope: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
        
        Screenshots
        ===========
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/overview.png
           :alt: Overview / Index / Homepage
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/nodes.png
           :alt: Nodes view, all active nodes
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/node.png
           :alt: Single node page / overview
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/report.png
           :alt: Report view
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/report_message.png
           :alt: Report view with message
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/facts.png
           :alt: Facts view
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/fact.png
           :alt: Single fact, with graphs
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/fact_value.png
           :alt: All nodes that have this fact with that value
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/metrics.png
           :alt: Metrics view
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/metric.png
           :alt: Single metric
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/query.png
           :alt: Query view
           :width: 1024
           :height: 700
           :align: center
        
        .. image:: https://raw.github.com/nedap/puppetboard/master/screenshots/broken.png
           :alt: Error page
           :width: 1024
           :height: 700
           :align: center
        
        #########
        Changelog
        #########
        
        This is the changelog for Puppetboard.
        
        0.0.3
        =====
        This release introduces a few big changes. The most obvious one is the
        revamped Overview page which has received significant love. Most of the work
        was done by Julius Härtl. The Nodes tab has been given a slight face-lift
        too.
        
        Other changes:
        
        * This release depends on the new pypuppetdb 0.1.0. Because of this the SSL
          configuration options have been changed:
        
          * ``PUPPETDB_SSL`` is gone and replaced by ``PUPPETDB_SSL_VERIFY`` which
            now defaults to ``True``. This only affects connections to PuppetDB that
            happen over SSL.
          * SSL is automatically enabled if both ``PUPPETDB_CERT`` and
            ``PUPPETDB_KEY`` are provided.
        
        * Display of deeply nested metrics and query results have been fixed.
        * Average resources per node metric is now displayed as a natural number.
        * A link back to the node has been added to the reports.
        * A few issues with reports have been fixed.
        * A new setting called ``UNRESPONSIVE_HOURS`` has been added which denotes
          the amount of hours after which Puppetboard will display the node as
          unreported if it hasn't checked in. We default to ``2`` hours.
        * The event message can now be viewed by clicking on the event.
        
        Puppetboard is now neatly packaged up and available on PyPi. This should
        significantly help reduce the convoluted installation instructions people had
        to follow.
        
        Updated installation instructions have been added on how to install from PyPi
        and how to configure your HTTPD.
        
        0.0.2
        =====
        In this release we've introduced a few new things. First of all we now require
        pypuppetdb version 0.0.4 or later which includes support for the v3 API
        introduced with PuppetDB 1.5.
        
        Because of changes in PuppetDB 1.5 and therefor in pypuppetdb users of the v2
        API, regardless of the PuppetDB version, will no longer be able to view reports
        or events.
        
        In light of this the following settings have been removed:
        
        * ``PUPPETDB_EXPERIMENTAL``
        
        Two new settings have been added:
        
        * ``PUPPETDB_API``: an integer, defaulting to ``3``, representing the API
          version we want to use.
        * ``ENABLE_QUERY``: a boolean, defaulting to ``True``, on wether or not to
          be able to use the Query tab.
        
        We've also added a few new features:
        
        * Thanks to some work done during PuppetConf together with Nick Lewis (from
          Puppet Labs) we now expose all of PuppetDB's metrics in the Metrics tab. The
          formatting isn't exactly pretty but it's a start.
        * Spencer Krum added the graphing capabilities to the Facts tab.
        * Daniel Lawrence added a feature so that facts on the node view are clickable
          and take you to the complete overview of that fact for your infrastructure
          and made the nodes in the complete facts list clickable so you can jump to a
          node.
        * Klavs Klavsen contributed some documentation on how to run Puppetboard with
          Passenger.
        
        0.0.1
        =====
        Initial release.
        
Keywords: puppet puppetdb puppetboard
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Framework :: Flask
Classifier: Intended Audience :: System Administrators
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
