IPython Notebook Casper Filter Examples
---------------------------------------

{% from "dexy.jinja" import hl, ext with context -%}

The `ipynbcasper` filter launches the ipython notebook server and then runs
casper.js scripts against the running server.

The output generated can be .json or .txt format. This filter is also
frequently run for its side effects (generating images or other data files).

The default `casper.js` script is named `full.js` and will execute each cell to
refresh its contents, then take a screenshot of each cell individually, and
also take a screenshot of the whole workbook. A `mini.js` script is also
included which takes a screenshot of the list of notebooks available (this is
intended as a Hello, World style example). You can also specify a custom script
to run, this script must be passed as an input. In this example the `custom.js`
script is specified::

    {{ d['dexy.yaml|idio|t']['ansi2html'] | indent(4) }}

json output
...........

The default output is .json::

    {{ d['dexy.yaml|idio|t']['ipynbcasper'] | indent(4) }}

Here is the generated json::

    {{ ppjson(str(d['Trapezoid Rule.ipynb|ipynbcasper'])) | indent(4) }}

The `cellimages` element is a list of image files, one for each cell in the notebook, which are generated by the default `full.js` casper script.

The list can be iterated over to retrieve each cell image in turn, or the
`images-by-name` element can be used to refer to cell images based on the
`name` entry in cell metadata.

Here is an example of using `images-by-name`::

    {{ d['dexy.rst|idio']['images-by-name'] | indent(4) }}

{% if ext == '.html' %}

.. raw:: html
    <!-- @export "images-by-name" -->
    {% set nb_info = d['Trapezoid Rule.ipynb|ipynbcasper'].from_json() %}
    <img src="{{ nb_info['images-by-name']['plot'] }}" />
    <!-- @end -->

{% endif %}

And here is an example of iterating over the entries in `cellimages`::

    {{ d['dexy.rst|idio']['cellimages'] | indent(4) }}

{% if ext == '.html' %}

.. raw:: html
    <!-- @export "cellimages" -->
    {% for img in d['Trapezoid Rule.ipynb|ipynbcasper'].from_json()['cellimages'] %}
    <img src="{{ img }}" />
    {% endfor %}
    <!-- @end -->

{% endif %}

text output
...........

If .txt output is selected, the output returned is the stdout from running the
casper script. This can be run through the `ansi2html` filter to interpret the
ansi codes. If you put the `ansi2html` filter immediately after `ipynbcasper`,
it will automatically select `.txt` output because of the file extensions
accepted by ansi2html::

    {{ d['dexy.yaml|idio|t']['ansi2html'] | indent(4) }}

Here are the contents of the custom casper.js script `custom.js`:

{{ hl(d['custom.js'], "javascript") }}

{% if ext == '.html' %}
Here is the generated output from running this script in `test` mode:

.. raw:: html

    {{ d['Trapezoid Rule.ipynb|ipynbcasper|ansi2html'] | indent(4) }}

{% endif %}

